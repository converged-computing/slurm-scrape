{
    "url": "https://slurm.schedmd.com/sched_config.html",
    "sections": [
        {
            "title": "\n\nSlurm Workload Manager\n\n",
            "content": "\n\nSchedMD\n\n"
        },
        {
            "title": "Scheduling Configuration Guide",
            "content": "OverviewSlurm is designed to perform a quick and simple scheduling attempt at\nevents such as job submission or completion and configuration changes.\nDuring these event-triggered scheduling events, default_queue_depth\n(default is 100) number of jobs will be considered.At less frequent intervals, defined by sched_interval, the main\nscheduling loop will run, considering all jobs while still honoring the\npartition_job_depth limit.In both cases, jobs are evaluated in a strict priority order and once any\njob or job array task in a partition is left pending, no other jobs in that\npartition will be scheduled to avoid taking resources from the higher-priority\npending job.A more comprehensive scheduling attempt is typically done by the backfill\nscheduling plugin, which considers job run time and resources required to\ndetermine if lower-priority jobs would actually take resources needed by\nhigher-priority jobs. This allows the backfill scheduler to assign more specific\nreasons to pending jobs, or to start jobs\nthat were previously pending.Scheduling Configuration\n\nThe SchedulerType configuration parameter specifies the scheduler\nplugin to use.\nOptions are sched/backfill, which performs backfill scheduling, and\nsched/builtin, which attempts to schedule jobs in a strict priority order within\neach partition/queue.There is also a SchedulerParameters configuration parameter which\ncan specify a wide range of parameters as described below.\nThis first set of parameters applies to all scheduling configurations.\nSee the slurm.conf(5) man page for more details.\n\ndefault_queue_depth=# - Specifies the number of jobs to consider for\nscheduling on each event that may result in a job being scheduled.\nDefault value is 100 jobs. Since this happens frequently, a relatively\nsmall number is generally best.\ndefer - Do not attempt to schedule jobs individually at submit time.\nCan be useful for high-throughput computing.\nmax_switch_wait=# - Specifies the maximum time a job can wait for\ndesired number of leaf switches. Default value is 300 seconds.\npartition_job_depth=# - Specifies how many jobs are tested in any\nsingle partition, default value is 0 (no limit).\nsched_interval=# - Specifies how frequently, in seconds, the main\nscheduling loop will execute and test all pending jobs, with the\npartition_job_depth limit in place. The default value is 60 seconds.\nBackfill Scheduling\n\nThe backfill scheduling plugin is loaded by default.\nWithout backfill scheduling, each partition is scheduled strictly in priority\norder, which typically results in significantly lower system utilization and\nresponsiveness than otherwise possible.\nBackfill scheduling will start lower priority jobs if doing so does not delay\nthe expected start time of any higher priority jobs.\nSince the expected start time of pending jobs depends upon the expected\ncompletion time of running jobs, reasonably accurate time limits are important\nfor backfill scheduling to work well.Slurm's backfill scheduler takes into consideration every running job.\nIt then considers pending jobs in priority order, determining when and where\neach will start, taking into consideration the possibility of\njob preemption,\ngang scheduling,\ngeneric resource (GRES) requirements,\nmemory requirements, etc.\nIf the job under consideration can start immediately without impacting the\nexpected start time of any higher priority job, then it does so.\nOtherwise the resources required by the job will be reserved during the job's\nexpected execution time.\nThe backfill plugin will set the expected start time for pending jobs setting\nthese reserved nodes into a 'Planned' state. A job's\nexpected start time can be seen using the squeue --start command.\nFor performance reasons, the backfill scheduler reserves whole nodes for jobs,\neven if jobs don't require whole nodes.\nThe scheduling logic builds a sorted list of job-partition pairs. Jobs\nsubmitted to multiple partitions will have as many entries in the list as\nrequested partitions. By default, the backfill scheduler may evaluate all the\njob-partition pairs for a single job, potentially reserving resources for each\npair, but only starting the job in the reservation offering the earliest start\ntime.Having a single job reserving resources for multiple partitions could impede\nother jobs (or hetjob components) from reserving resources already reserved for\nthe partitions that don't offer the earliest start time.\nA single job that requests multiple partitions can also prevent itself\nfrom starting earlier in a lower priority partition if the partitions overlap\nnodes and a backfill reservation in the higher priority partition blocks nodes\nthat are also in the lower priority partition.Backfill scheduling is difficult without reasonable time limit estimates\nfor jobs, but some configuration parameters that can help.\nDefaultTime - Default job time limit (specify value by partition)\nMaxTime - Maximum job time limit (specify value by partition)\nOverTimeLimit - Amount by which a job can exceed its time limit\nbefore it is killed. A system-wide configuration parameter.\nBackfill scheduling is a time consuming operation.\nLocks are released briefly every two seconds so that other options can be\nprocessed, for example to process new job submission requests.\nBackfill scheduling can optionally continue execution after the lock release\nand ignore newly submitted jobs (SchedulerParameters=bf_continue).\nDoing so will permit consideration of more jobs, but may result in the delayed\nscheduling of newly submitted jobs.\nA partial list of SchedulerParameters configuration parameters related to\nbackfill scheduling follows.\nFor more details and a complete list of the backfill related SchedulerParameters\nsee the slurm.conf(5) man page.\n\nbf_continue - If set, then continue backfill scheduling after\nperiodically releasing locks for other operations.\nbf_interval=# - Interval between backfill scheduling attempts.\nDefault value is 30 seconds.\nbf_max_job_part=# - Maximum number of jobs to initiate per partition\nin each backfill cycle. Default value is 0 (no limit).\nbf_max_job_start=# - Maximum number of jobs to initiate\nin each backfill cycle. Default value is 0 (no limit).\nbf_max_job_test=# - Maximum number of jobs consider for backfill\nscheduling in each backfill cycle. Default value is 100 jobs.\nbf_max_job_user=# - Maximum number of jobs to initiate per user\nin each backfill cycle. Default value is 0 (no limit).\nbf_max_time=# - Maximum time in seconds the backfill scheduler can\nspend (including time spent sleeping when locks are released) before\ndiscontinuing. The default value is the value of bf_interval, which\ndefaults to 30 seconds.\nbf_one_resv_per_job - Disallow adding more than one backfill\nreservation per job. This option makes it so that a job submitted to multiple\npartitions will stop reserving resources once the first job-partition pair\nhas booked a backfill reservation. Subsequent pairs from the same job will\nonly be tested to start now. This allows for other jobs to be able to book the\nother pairs resources at the cost of not guaranteeing that the multi-partition\njob will start in the partition offering the earliest start time (unless it\ncan start immediately). This option is disabled by default.\nbf_resolution=# - Time resolution of backfill scheduling.\nDefault value is 60 seconds.\nLarger values are appropriate if job time limits are imprecise and/or\nsmall delays in starting pending jobs in order to achieve higher system\nutilization is desired.\nbf_window=# - How long, in minutes, into the future to look when\ndetermining when and where jobs can start.\nHigher values result in more overhead and less responsiveness.\nA value at least as long as the highest allowed time limit is generally\nadvisable to prevent job starvation.\nIn order to limit the amount of data managed by the backfill scheduler,\nif the value of bf_window is increased, then it is generally advisable\nto also increase bf_resolution.\nThe default value is 1440 minutes (one day).\nbf_yield_interval=# - \nThe backfill scheduler will periodically relinquish locks in order for other\npending operations to take place. This specifies the times when the locks are\nrelinquished in microseconds. The default value is 2,000,000  microseconds\n(2 seconds). Smaller values may be helpful for high throughput computing when\nused in conjunction with the bf_continue option.\nbf_yield_sleep=# - \nThe backfill scheduler will periodically relinquish locks in order for other\npending operations to take place. This specifies the length of time for which\nthe locks are relinquished in microseconds. The default value is 500,000\nmicroseconds (0.5 seconds).  \nLast modified 04 June 2024"
        },
        {
            "title": "Navigation",
            "content": "\nSlurm Workload Manager\nVersion 24.05\n\n\nAbout\n\nOverview\nRelease Notes\n\n\n\nUsing\n\nDocumentation\nFAQ\nPublications\n\n\n\nInstalling\n\nDownload\nRelated Software\nInstallation Guide\n\n\n\nGetting Help\n\nMailing Lists\nSupport and Training\nTroubleshooting\n\n\n"
        }
    ]
}