{
    "url": "https://slurm.schedmd.com/jobcomp_kafka.html",
    "sections": [
        {
            "title": "\n\nSlurm Workload Manager\n\n",
            "content": "\n\nSchedMD\n\n"
        },
        {
            "title": "Job Completion Kafka plugin guide",
            "content": "When configured, the jobcomp/kafka plugin attempts to publish a subset\nof the fields for each completed job record to a Kafka server.RequirementsThe plugin serializes the subset of fields to JSON before each produce\nattempt. The serialization is done using the Slurm serialization plugins, so the\nlibjson-c development files are an indirect prerequisite for this plugin.\nThe plugin offloads part of the client producer work to librdkafka and\nconsumes its API, thus the library development files are another prerequisite.\n\nlibrdkafka\n\t\t development files\nlibjson-c development\n\t\t files\nConfigurationThe plugin is configured with the following\nslurm.conf options:\n\nJobCompType\nShould be set to jobcomp/kafka.\nJobCompType=jobcomp/kafka\n\n\nJobCompLoc This string\nrepresents an absolute path to a file containing 'key=value' pairs configuring\n\n\tlibrdkafka properties. For the plugin to work properly, this file\nneeds to exist and at least the bootstrap.servers property needs to be\nbe configured.\nJobCompLoc=/arbitrary/path/to/rdkafka.conf\nNOTE: There is no default value for JobCompLoc when this plugin is\nconfigured, and thus it needs to be explicitly set.\nNOTE: The librdkafka parameters configured in the file\nreferenced by this option take effect upon slurmctld restart.\nNOTE: The plugin doesn't validate these parameters, but just logs\nan error and fails if any parameter passed to the library API function\nrd_kafka_conf_set() fails.\nAn example configuration file could look like this:\n\nbootstrap.servers=kafkahost1:9092\ndebug=broker,topic,msg\nlinger.ms=400\nlog_level=7\n\n\n\nJobCompParams Comma\nseparated list of extra configurable parameters. Please refer to the slurm.conf\nman page for specific details. Example:\nJobCompParams=flush_timeout=200,poll_interval=3,requeue_on_msg_timeout,\ntopic=mycluster\nNOTE: Changes to this option do not require a slurmctld restart.\nReconfiguration or SIGHUP is sufficient for them to take effect.\n\n\nDebugFlags Optional\nJobComp debug flag for extra plugin specific logging.\nDebugFlags=JobComp\n\nPlugin FunctionalityFor each finished job, the plugin jobcomp_p_log_record() operation is\nexecuted. A subset of the job record fields are serialized into a JSON string\nvia the Slurm serialization plugins. Then the serialized string is attempted\nto be produced using the librdkafka rd_kafka_producev() API call.Producing a message to librdkafka can be done even if the Kafka server is\ndown. But an error returned from this call makes it so the message is discarded.\nProduced messages accumulate in the librdkafka out queue for up to \"linger.ms\"\nmilliseconds (a configurable librdkafka parameter) before building\na message set from the accumulated messages.Then the librdkafka library transmits a produce request. While no \"ACK\" is\nreceived, messages are conceptually considered to be \"in-flight\" according to\nthe library documentation. The library then receives a produce response, which\ncan be handled in one of two ways:\nretriable error\nThe library will automatically attempt a retry if\nno library limit parameter is hit.\npermanent error or success\nThe message will be removed\nfrom the library out queue and is staged to the library delivery report queue.\nThe following diagram illustrates the functionality being described:The jobcomp/kafka plugin has a background poll handler thread that\nperiodically calls the librdkafka API rd_kafka_poll() function. How frequent\nthe thread makes the call is configurable via JobCompParams=poll_interval.\nThe call makes it so that messages in the library delivery report queue are\npulled and handled back to the plugin delivery report callback, which takes\ndifferent actions depending on the error message the library set. By default,\nsuccessful messages are just logged if DebugFlags=JobComp is enabled, and\nmessages with permanent errors are discarded, unless the error is message timed\nout and JobCompParams is configured with \"requeue_on_msg_timeout\", which would\ninstruct the callback to attempt to produce the message again.On plugin termination, the fini() operation is executed. The rd_kafka_purge()\nlibrary API function is called which purges librdkafka out queue messages. The\nrd_kafka_flush() API call is also called, which waits until all outstanding\nproduce requests (and potentially other types of requests) are completed.\nHow much to wait is also configurable via JobCompParams=flush_timeout\nparameter. Purged messages are always saved to the plugin state file in the\nSlurm StateSaveLocation, and messages purged while \"in-flight\" are discarded.\nNOTE: You must be using librdkafka v1.0.0 or later in order to take\nadvantage of the purge functionality described above. With previous versions\nthe outgoing queue can not be purged to the state file on shutdown, which\nmeans that any messages that weren't delivered before the termination of the\nkafka plugin will be lost.On plugin initialization, after parsing the configuration, saved messages in\nthe state are loaded and attempted to be produced again. So undelivered messages\nshould be resilient to slurmctld restarts.The Kafka broker \"host:port\" list should be explicitly configured in the\nfile referenced by JobCompLoc option explained above. The default topic is\nthe configured Slurm ClusterName, but it can also be configured via\nJobCompParams=topic parameter.The jobcomp/kafka plugin mostly logs informational messages to the\nJobComp DebugFlag, except for error messages. The librdkafka by default logs\nto the application stderr, but the plugin configures the library to forcefully\nlog to syslog instead. The library logging level and debug contexts are also\nconfigurable via the file referenced by JobCompLoc, as well as the rest of the\nlibrary configuration parameters.Last modified 22 February 2023"
        },
        {
            "title": "Navigation",
            "content": "\nSlurm Workload Manager\nVersion 24.05\n\n\nAbout\n\nOverview\nRelease Notes\n\n\n\nUsing\n\nDocumentation\nFAQ\nPublications\n\n\n\nInstalling\n\nDownload\nRelated Software\nInstallation Guide\n\n\n\nGetting Help\n\nMailing Lists\nSupport and Training\nTroubleshooting\n\n\n"
        }
    ]
}