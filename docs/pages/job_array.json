{
    "url": "https://slurm.schedmd.com/job_array.html",
    "sections": [
        {
            "title": "\n\nSlurm Workload Manager\n\n",
            "content": "\n\nSchedMD\n\n"
        },
        {
            "title": "Job Array Support",
            "content": "OverviewJob arrays offer a mechanism for submitting and managing collections of\nsimilar jobs quickly and easily; job arrays with millions of tasks can be\nsubmitted in milliseconds (subject to configured size limits).\nAll jobs must have the same initial options (e.g. size, time limit, etc.),\nhowever it is possible to change some of these options after the job has begun\nexecution using the scontrol command specifying the JobID of the array or individual\nArrayJobID.\n$ scontrol update job=101 ...\n$ scontrol update job=101_1 ...\nJob arrays are only supported for batch jobs and the array index values are\nspecified using the --array or -a option of the sbatch\ncommand. The option argument can be specific array index values, a range of\nindex values, and an optional step size as shown in the examples below.\nNote that the minimum index value is zero and the maximum value is a Slurm\nconfiguration parameter (MaxArraySize minus one).\nJobs which are part of a job array will have the environment variable\nSLURM_ARRAY_TASK_ID set to its array index value.\n# Submit a job array with index values between 0 and 31\n$ sbatch --array=0-31    -N1 tmp\n\n# Submit a job array with index values of 1, 3, 5 and 7\n$ sbatch --array=1,3,5,7 -N1 tmp\n\n# Submit a job array with index values between 1 and 7\n# with a step size of 2 (i.e. 1, 3, 5 and 7)\n$ sbatch --array=1-7:2   -N1 tmp\nA maximum number of simultaneously running tasks from the job array may be\nspecified using a \"%\" separator.\nFor example \"--array=0-15%4\" will limit the number of simultaneously\nrunning tasks from this job array to 4.Job ID and Environment Variables\n\nJob arrays will have additional environment variables set.\nSLURM_ARRAY_JOB_ID will be set to the first job ID of the array.\nSLURM_ARRAY_TASK_ID will be set to the job array index value.\nSLURM_ARRAY_TASK_COUNT will be set to the number of tasks in the job\narray.\nSLURM_ARRAY_TASK_MAX will be set to the highest job array index\nvalue.\nSLURM_ARRAY_TASK_MIN will be set to the lowest job array index value.Under normal circumstances, array jobs will have the first task of the array\nbe a place holder for the rest of the array, causing it to be the last to run.\nAs a result, the task with the lowest SLURM_JOB_ID will have the highest\nSLURM_ARRAY_TASK_ID.\nFor example a job submission of this sort:\nsbatch --array=1-3 -N1 tmp\nwill generate a job array containing three jobs. If the sbatch command\nresponds with:\nSubmitted batch job 36\nthen the environment variables will be set as follows:\nSLURM_JOB_ID=36\nSLURM_ARRAY_JOB_ID=36\nSLURM_ARRAY_TASK_ID=3\nSLURM_ARRAY_TASK_COUNT=3\nSLURM_ARRAY_TASK_MAX=3\nSLURM_ARRAY_TASK_MIN=1\n\nSLURM_JOB_ID=37\nSLURM_ARRAY_JOB_ID=36\nSLURM_ARRAY_TASK_ID=1\nSLURM_ARRAY_TASK_COUNT=3\nSLURM_ARRAY_TASK_MAX=3\nSLURM_ARRAY_TASK_MIN=1\n\nSLURM_JOB_ID=38\nSLURM_ARRAY_JOB_ID=36\nSLURM_ARRAY_TASK_ID=2\nSLURM_ARRAY_TASK_COUNT=3\nSLURM_ARRAY_TASK_MAX=3\nSLURM_ARRAY_TASK_MIN=1\nOrdering of the tasks as shown above is not guaranteed. For example, there\ncan be cases where individual tasks are created out of order when tasks are\nrequeued. The task with the lowest JOB_ID may not have the highest TASK_ID if\nthe tasks are not created sequentially due to the tasks being updated/modified\nbefore they start. Other edge cases may cause similar behavior.All Slurm commands and APIs recognize the SLURM_JOB_ID value.\nMost commands also recognize the SLURM_ARRAY_JOB_ID plus SLURM_ARRAY_TASK_ID\nvalues separated by an underscore as identifying an element of a job array.\nUsing the example above, \"37\" or \"36_1\" would be equivalent ways to identify\nthe second array element of job 36.\nA set of APIs has been developed to operate on an entire job array or select\ntasks of a job array in a single function call.\nThe function response consists of an array identifying the various error codes\nfor various tasks of a job ID.\nFor example the job_resume2() function might return an array of error\ncodes indicating that tasks 1 and 2 have already completed; tasks 3 through 5\nare resumed successfully, and tasks 6 through 99 have not yet started.File NamesTwo additional options are available to specify a job's stdin, stdout, and\nstderr file names:\n%A will be replaced by the value of SLURM_ARRAY_JOB_ID (as defined above)\nand\n%a will be replaced by the value of SLURM_ARRAY_TASK_ID (as defined above).\nThe default output file format for a job array is \"slurm-%A_%a.out\".\nAn example of explicit use of the formatting is:\nsbatch -o slurm-%A_%a.out --array=1-3 -N1 tmp\nwhich would generate output files names of this sort\n\"slurm-36_1.out\", \"slurm-36_2.out\" and \"slurm-36_3.out\".\nIf these file name options are used without being part of a job array then\n\"%A\" will be replaced by the current job ID and \"%a\" will be replaced by\n4,294,967,294 (equivalent to 0xfffffffe or NO_VAL).Scancel Command Use\n\nIf the job ID of a job array is specified as input to the scancel command\nthen all elements of that job array will be cancelled.\nAlternately an array ID, optionally using regular expressions, may be specified\nfor job cancellation.\n# Cancel array ID 1 to 3 from job array 20\n$ scancel 20_[1-3]\n\n# Cancel array ID 4 and 5 from job array 20\n$ scancel 20_4 20_5\n\n# Cancel all elements from job array 20\n$ scancel 20\n\n# Cancel the current job or job array element (if job array)\nif [[-z $SLURM_ARRAY_JOB_ID]]; then\n  scancel $SLURM_JOB_ID\nelse\n  scancel ${SLURM_ARRAY_JOB_ID}_${SLURM_ARRAY_TASK_ID}\nfi\nSqueue Command UseWhen a job array is submitted to Slurm, only one job record is created.\nAdditional job records will only be created when the state of a task in the\njob array changes, typically when a task is allocated resources or its state\nis modified using the scontrol command.\nBy default, the squeue command will report all of the tasks associated with\na single job record on one line and use a regular expression to indicate the\n\"array_task_id\" values as shown below.\n$ squeue\n JOBID     PARTITION  NAME  USER  ST  TIME  NODES NODELIST(REASON)\n1080_[5-1024]  debug   tmp   mac  PD  0:00      1 (Resources)\n1080_1         debug   tmp   mac   R  0:17      1 tux0\n1080_2         debug   tmp   mac   R  0:16      1 tux1\n1080_3         debug   tmp   mac   R  0:03      1 tux2\n1080_4         debug   tmp   mac   R  0:03      1 tux3\nAn option of \"--array\" or \"-r\" has also been added to the squeue command\nto print one job array element per line as shown below.\nThe environment variable \"SQUEUE_ARRAY\" is equivalent to including the \"--array\"\noption on the squeue command line.\n$ squeue -r\n JOBID PARTITION  NAME  USER  ST  TIME  NODES NODELIST(REASON)\n1082_3     debug   tmp   mac  PD  0:00      1 (Resources)\n1082_4     debug   tmp   mac  PD  0:00      1 (Priority)\n  1080     debug   tmp   mac   R  0:17      1 tux0\n  1081     debug   tmp   mac   R  0:16      1 tux1\n1082_1     debug   tmp   mac   R  0:03      1 tux2\n1082_2     debug   tmp   mac   R  0:03      1 tux3\nThe squeue --step/-s and --job/-j options can accept job or step\nspecifications of the same format.\n$ squeue -j 1234_2,1234_3\n...\n$ squeue -s 1234_2.0,1234_3.0\n...\nTwo additional job output format field options have been added to squeue:\n%F prints the array_job_id value\n%K prints the array_task_id value\n(all of the obvious letters to use were already assigned to other job fields).Scontrol Command Use\n\nUse of the scontrol show job option shows two new fields related to\njob array support.\nThe JobID is a unique identifier for the job.\nThe ArrayJobID is the JobID of the first element of the job\narray.\nThe ArrayTaskID is the array index of this particular entry, either a\nsingle number of an expression identifying the entries represented by this\njob record (e.g. \"5-1024\").\nNeither field is displayed if the job is not part of a job array.\nThe optional job ID specified with the scontrol show job or\nscontrol show step commands can identify job array elements by\nspecifying ArrayJobId and ArrayTaskId with an underscore between\nthem (e.g. <ArrayJobID>_<ArrayTaskId>). \n\nThe scontrol command will operate on all elements of a job array if the\njob ID specified is ArrayJobID.\nIndividual job array tasks can be modified using the\nArrayJobID_ArrayTaskID as shown below.\n\n$ sbatch --array=1-4 -J array ./sleepme 86400\nSubmitted batch job 21845\n\n$ squeue\n JOBID   PARTITION     NAME     USER  ST  TIME NODES NODELIST\n 21845_1    canopo    array    david  R  0:13  1     dario\n 21845_2    canopo    array    david  R  0:13  1     dario\n 21845_3    canopo    array    david  R  0:13  1     dario\n 21845_4    canopo    array    david  R  0:13  1     dario\n\n$ scontrol update JobID=21845_2 name=arturo\n$ squeue\n JOBID   PARTITION     NAME     USER  ST   TIME  NODES NODELIST\n 21845_1    canopo    array    david  R   17:03   1    dario\n 21845_2    canopo   arturo    david  R   17:03   1    dario\n 21845_3    canopo    array    david  R   17:03   1    dario\n 21845_4    canopo    array    david  R   17:03   1    dario\n\n\n\nThe scontrol hold, holdu, release, requeue, requeuehold, suspend and resume\ncommands can also either operate on all elements of a job array or individual\nelements as shown below.\n\n\n$ scontrol suspend 21845\n$ squeue\n JOBID PARTITION      NAME     USER  ST TIME  NODES NODELIST\n21845_1    canopo    array    david  S 25:12  1     dario\n21845_2    canopo   arturo    david  S 25:12  1     dario\n21845_3    canopo    array    david  S 25:12  1     dario\n21845_4    canopo    array    david  S 25:12  1     dario\n$ scontrol resume 21845\n$ squeue\n JOBID PARTITION      NAME     USER  ST TIME  NODES NODELIST\n21845_1    canopo    array    david  R 25:14  1     dario\n21845_2    canopo   arturo    david  R 25:14  1     dario\n21845_3    canopo    array    david  R 25:14  1     dario\n21845_4    canopo    array    david  R 25:14  1     dario\n\nscontrol suspend 21845_3\n$ squeue\n JOBID PARTITION      NAME     USER  ST TIME  NODES NODELIST\n21845_1    canopo    array    david  R 25:14  1     dario\n21845_2    canopo   arturo    david  R 25:14  1     dario\n21845_3    canopo    array    david  S 25:14  1     dario\n21845_4    canopo    array    david  R 25:14  1     dario\nscontrol resume 21845_3\n$ squeue\n JOBID PARTITION      NAME     USER  ST TIME  NODES NODELIST\n21845_1    canopo    array    david  R 25:14  1     dario\n21845_2    canopo   arturo    david  R 25:14  1     dario\n21845_3    canopo    array    david  R 25:14  1     dario\n21845_4    canopo    array    david  R 25:14  1     dario\n\n\nJob Dependencies\n\n\nA job which is to be dependent upon an entire job array should specify\nitself dependent upon the ArrayJobID.\nSince each array element can have a different exit code, the interpretation of\nthe afterok and afternotok clauses will be based upon the highest\nexit code from any task in the job array.\nWhen a job dependency specifies the job ID of a job array:\nThe after clause is satisfied after all tasks in the job array start.\nThe afterany clause is satisfied after all tasks in the job array\ncomplete.\nThe aftercorr clause is satisfied after the corresponding task ID in the\nspecified job has completed successfully (ran to completion with an exit code of\nzero).\nThe afterok clause is satisfied after all tasks in the job array\ncomplete successfully.\nThe afternotok clause is satisfied after all tasks in the job array\ncomplete with at least one tasks not completing successfully.\nExamples of use are shown below:\n\n# Wait for specific job array elements\nsbatch --depend=after:123_4 my.job\nsbatch --depend=afterok:123_4:123_8 my.job2\n\n# Wait for entire job array to complete\nsbatch --depend=afterany:123 my.job\n\n# Wait for corresponding job array elements\nsbatch --depend=aftercorr:123 my.job\n\n# Wait for entire job array to complete successfully\nsbatch --depend=afterok:123 my.job\n\n# Wait for entire job array to complete and at least one task fails\nsbatch --depend=afternotok:123 my.job\n\nOther Command Use\n\n\nThe following Slurm commands do not currently recognize job arrays and their\nuse requires the use of Slurm job IDs, which are unique for each array element:\nsbcast, sprio, sreport, sshare and sstat.\nThe sacct, sattach and strigger commands have been modified to permit\nspecification of either job IDs or job array elements.\nThe sview command has been modified to permit display of a job's ArrayJobId\nand ArrayTaskId fields. Both fields are displayed with a value of \"N/A\" if\nthe job is not part of a job array.\nSystem Administration\n\n\nA new configuration parameter has been added to control the maximum\njob array size: MaxArraySize. The smallest index that can be specified\nby a user is zero and the maximum index is MaxArraySize minus one.\nThe default value of MaxArraySize is 1001.\nThe maximum MaxArraySize supported in Slurm is 4000001.\n Be mindful about the value of MaxArraySize as job arrays offer an easy way\nfor users to submit large numbers of jobs very quickly.\nThe sched/backfill plugin has been modified to improve performance with\njob arrays. Once one element of a job array is discovered to not be runnable\nor impact the scheduling of pending jobs, the remaining elements of that job\narray will be quickly skipped.\nSlurm creates a single job record when a job array is submitted.\nAdditional job records are only created as needed, typically when a task\nof a job array is started, which provides a very scalable mechanism to\nmanage large job counts.\nEach task of the job array will share the same ArrayJobId but will have their\nown unique ArrayTaskId. In addition to the ArrayJobId, each job will have a\nunique JobId that gets assigned as the tasks are started.\nLast modified 01 January 2024\n"
        },
        {
            "title": "Navigation",
            "content": "\nSlurm Workload Manager\nVersion 24.05\n\n\nAbout\n\nOverview\nRelease Notes\n\n\n\nUsing\n\nDocumentation\nFAQ\nPublications\n\n\n\nInstalling\n\nDownload\nRelated Software\nInstallation Guide\n\n\n\nGetting Help\n\nMailing Lists\nSupport and Training\nTroubleshooting\n\n\n"
        },
        {
            "title": "Job Dependencies\n\n",
            "content": "A job which is to be dependent upon an entire job array should specify\nitself dependent upon the ArrayJobID.\nSince each array element can have a different exit code, the interpretation of\nthe afterok and afternotok clauses will be based upon the highest\nexit code from any task in the job array.When a job dependency specifies the job ID of a job array:\nThe after clause is satisfied after all tasks in the job array start.\nThe afterany clause is satisfied after all tasks in the job array\ncomplete.\nThe aftercorr clause is satisfied after the corresponding task ID in the\nspecified job has completed successfully (ran to completion with an exit code of\nzero).\nThe afterok clause is satisfied after all tasks in the job array\ncomplete successfully.\nThe afternotok clause is satisfied after all tasks in the job array\ncomplete with at least one tasks not completing successfully.Examples of use are shown below:\n# Wait for specific job array elements\nsbatch --depend=after:123_4 my.job\nsbatch --depend=afterok:123_4:123_8 my.job2\n\n# Wait for entire job array to complete\nsbatch --depend=afterany:123 my.job\n\n# Wait for corresponding job array elements\nsbatch --depend=aftercorr:123 my.job\n\n# Wait for entire job array to complete successfully\nsbatch --depend=afterok:123 my.job\n\n# Wait for entire job array to complete and at least one task fails\nsbatch --depend=afternotok:123 my.job\nOther Command Use\n\nThe following Slurm commands do not currently recognize job arrays and their\nuse requires the use of Slurm job IDs, which are unique for each array element:\nsbcast, sprio, sreport, sshare and sstat.\nThe sacct, sattach and strigger commands have been modified to permit\nspecification of either job IDs or job array elements.\nThe sview command has been modified to permit display of a job's ArrayJobId\nand ArrayTaskId fields. Both fields are displayed with a value of \"N/A\" if\nthe job is not part of a job array.System Administration\n\nA new configuration parameter has been added to control the maximum\njob array size: MaxArraySize. The smallest index that can be specified\nby a user is zero and the maximum index is MaxArraySize minus one.\nThe default value of MaxArraySize is 1001.\nThe maximum MaxArraySize supported in Slurm is 4000001.\n Be mindful about the value of MaxArraySize as job arrays offer an easy way\nfor users to submit large numbers of jobs very quickly.The sched/backfill plugin has been modified to improve performance with\njob arrays. Once one element of a job array is discovered to not be runnable\nor impact the scheduling of pending jobs, the remaining elements of that job\narray will be quickly skipped.Slurm creates a single job record when a job array is submitted.\nAdditional job records are only created as needed, typically when a task\nof a job array is started, which provides a very scalable mechanism to\nmanage large job counts.\nEach task of the job array will share the same ArrayJobId but will have their\nown unique ArrayTaskId. In addition to the ArrayJobId, each job will have a\nunique JobId that gets assigned as the tasks are started.Last modified 01 January 2024"
        }
    ]
}