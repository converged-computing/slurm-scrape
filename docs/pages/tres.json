{
    "url": "https://slurm.schedmd.com/tres.html",
    "sections": [
        {
            "title": "\n\nSlurm Workload Manager\n\n",
            "content": "\n\nSchedMD\n\n"
        },
        {
            "title": "Trackable RESources (TRES)",
            "content": "A TRES is a resource that can be tracked for usage or used to enforce\n  limits against.  A TRES is a combination of a Type and a Name.\n  Types are predefined.\n\nCurrent TRES Types are:\n\nBB (burst buffers)\nBilling\nCPU\nEnergy\nFS (filesystem)\nGRES\nIC (interconnect)\nLicense\nMem (Memory)\nNode\nPages\nVMem (Virtual Memory/Size)\n\n  The Billing TRES is calculated from a partition's TRESBillingWeights. Though\n  TRES weights on a partition may be defined as doubles, the Billing TRES values\n  for a job are stored as integers. This is not the case when calculating a\n  job's fairshare where the value is treated as a double.\n\n  Valid 'FS' TRES are 'disk' (local disk) and 'lustre'.  These are primarily\n  there for reporting usage, not limiting access.\n\n  Valid 'IC' TRES is 'ofed'.  These are primarily there for reporting usage, not\n  limiting access.\nslurm.conf settings\nAccountingStorageTRES\nUsed to define which TRES are\n  to be tracked on the system. By default Billing, CPU, Energy, Memory, Node,\n  FS/Disk, Pages and VMem are tracked. These default TRES cannot be disabled,\n  but only appended to. The following example:\n\nAccountingStorageTRES=gres/gpu,license/iop1\n\n  will track billing, cpu, energy, memory, nodes, fs/disk, pages and vmem along\n  with a GRES called gpu, as well as a license called iop1. Whenever these\n  resources are used on the cluster they are recorded. TRES are automatically\n  set up in the database on the start of the slurmctld.\n\n The TRES that require associated names are BB, GRES, and\n  License.  As seen in the above example, GRES and License are typically\n  different on each system.  The BB TRES is named the same as\n  the burst buffer plugin being used. In the above example we are using the\n  Cray burst buffer plugin.\n\n When including a specific GRES with a subtype, it is also recommended to\ninclude its generic type, otherwise a request with only the generic one won't\nbe accounted for. For example, if we want to account for gres/gpu:tesla,\nwe would also include gres/gpu for accounting gpus in requests like\nsrun --gres=gpu:1.\n\nAccountingStorageTRES=gres/gpu,gres/gpu:tesla\n\nNOTE: Setting gres/gpu will also set gres/gpumem and gres/gpuutil.\ngres/gpumem and gres/gpuutil can be set individually when gres/gpu is not set.\n\nPriorityWeightTRES\nA comma separated list of TRES Types and weights that sets the\n  degree that each TRES Type contributes to the job's priority.\nPriorityWeightTRES=CPU=1000,Mem=2000,GRES/gpu=3000\nApplicable only if PriorityType=priority/multifactor and if\nAccountingStorageTRES is configured with each TRES Type.\nThe default values are 0.\nThe Billing TRES is not available for priority calculations because the\nnumber isn't generated until after the job has been allocated resources \u2014\nsince the number can change for different partitions.\n\nTRESBillingWeights\nFor each partition this option is used to define the billing\n  weights of each TRES type that will be used in calculating the usage\n  of a job.\n\nBilling weights are specified as a comma-separated list of\nTRES=Weight pairs.\n\nAny TRES Type is available for billing. Note that the base unit for memory\nand burst buffers is megabytes.\n\nBy default the billing of TRES is calculated as the sum of all TRES types\nmultiplied by their corresponding billing weight.\n\nThe weighted amount of a resource can be adjusted by adding a suffix of\nK,M,G,T or P after the billing weight. For example, a memory weight of \"mem=.25\"\non a job allocated 8GB will be billed 2048 (8192MB *.25) units. A memory weight\nof \"mem=.25G\" on the same job will be billed 2 (8192MB * (.25/1024)) units.\n\nWhen a job is allocated 1 CPU and 8 GB of memory on a partition configured\nwith:\n\nTRESBillingWeights=\"CPU=1.0,Mem=0.25G,GRES/gpu=2.0,license/licA=1.5\"\nthe billable TRES will be:\n\n(1*1.0) + (8*0.25) + (0*2.0) + (0*1.5) = 3.0\nIf PriorityFlags=MAX_TRES is configured, the billable TRES is\n  calculated as the MAX of individual TRESs on a node (e.g. cpus, mem,\n  gres) plus the sum of all global TRESs (e.g. licenses). Using the\n  same example above, the billable TRES will be:\n\nMAX(1*1.0, 8*0.25, 0*2.0) + (0*1.5) = 2.0\nIf TRESBillingWeights is not defined then the job is billed against the total\nnumber of allocated CPUs.\n\nNOTE: TRESBillingWeights is only used when calculating fairshare and\ndoesn't affect job priority directly as it is currently not used for the size of\nthe job. If you want TRESs to play a role in the job's priority then refer to\nthe PriorityWeightTRES option.\n\nNOTE: As with PriorityWeightTRES only TRES defined in\n  AccountingStorageTRES are available for TRESBillingWeights.\n\nNOTE: Jobs can be limited based off of the calculated TRES billing\nvalue. See Resource Limits documentation for\nmore information.\n\nNOTE: If a Billing TRES is defined as a weight, it is ignored.\n\nsacctsacct can be used to view the TRES of each job by adding \"tres\" to the\n  --format option.\nsacctmgrsacctmgr is used to view the various TRES available globally in the\n  system. sacctmgr show tres will do this.\nsreportsreport reports on different TRES. Simply using the comma separated input\n  option --tres= will have sreport generate reports available\n  for the requested TRES types.  More information about these reports\n  can be found on the sreport manpage.\n\n  In sreport, the \"Reported\" Billing TRES is calculated from the largest\n  Billing TRES of each node multiplied by the time frame. For example, if a node\n  is part of multiple partitions and each has a different TRESBillingWeights\n  defined the Billing TRES for the node will be the highest of the partitions.\n  If TRESBillingWeights is not defined on any partition for a node then the\n  Billing TRES will be equal to the number of CPUs on the node.\nLast modified 16 August 2024"
        },
        {
            "title": "Navigation",
            "content": "\nSlurm Workload Manager\nVersion 24.05\n\n\nAbout\n\nOverview\nRelease Notes\n\n\n\nUsing\n\nDocumentation\nFAQ\nPublications\n\n\n\nInstalling\n\nDownload\nRelated Software\nInstallation Guide\n\n\n\nGetting Help\n\nMailing Lists\nSupport and Training\nTroubleshooting\n\n\n"
        }
    ]
}