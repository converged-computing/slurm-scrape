{
    "url": "https://slurm.schedmd.com/prep_plugins.html",
    "sections": [
        {
            "title": "\n\nSlurm Workload Manager\n\n",
            "content": "\n\nSchedMD\n\n"
        },
        {
            "title": "PrEp Plugin API",
            "content": "OverviewThis document describes the Slurm PrEp \u2014 short for \"Pr\"olog and\n\"Ep\"ilog \u2014 plugins API. It is intended as a resource to programmers\nwishing to write their own Slurm prep plugins.The purpose of the prep plugin APIs to provide a native C interface to the\nsame hooks traditionally used by the Prolog, Epilog,\nPrologSlurmctld, and EpilogSlurmctld scripts. Those interfaces\nare now implemented through the prep/script plugin, and that plugin\nserves as a good example of how to approach development of additional\nplugins.Slurm PrEp plugins must conform to the Slurm Plugin API with the following\nspecifications:\nconst char plugin_name[]=\"full\u00a0text\u00a0name\"\n\nA free-formatted ASCII text string that identifies the plugin.\n\nconst char plugin_type[]=\"major/minor\"\n\nThe major type must be \"prep\".\nThe minor type can be any suitable name for the type of prep plugin.\nconst uint32_t plugin_version\nIf specified, identifies the version of Slurm used to build this plugin and\nany attempt to load the plugin from a different version of Slurm will result\nin an error.\nIf not specified, then the plugin may be loaded by Slurm commands and\ndaemons from any version, however this may result in difficult to diagnose\nfailures due to changes in the arguments to plugin functions or changes\nin other Slurm functions used by the plugin.\nSlurm can be configured to use multiple prep plugins if desired through the\nPrEpPlugins configuration option. Additional plugins should be comma-separated.\nNote that, by default, the prep/script plugin is loaded if that option\nis not set, but will not be loaded if an explicit setting has been made. Thus,\nif you do set that option, and intend to still use the Prolog,\nEpilog, PrologSlurmctld, and/or EpilogSlurmctld options\nyou will need to ensure both your additional plugin and prep/script are\nset.Special care must be used when developing against the\nprep_p_prolog_slurmctld() or\nprep_p_epilog_slurmctld() interfaces. These\nfunctions are called while the slurmctld holds a number of internal locks,\nand need to return quickly otherwise slurmctld responsiveness and system\nthroughput will be impacted. For simple logging, this is not required, and\nthe \"async\" option can be left to false. But, especially for anything\ncommunicating with an external API or spawning additional processes, it is\nhighly recommended to first make a local copy of any job record details\nrequired, and then spawn a separate processing thread \u2014 which, by default,\nwill not have inherited any slurmctld locks \u2014 to continue processing.\nYou must set the async return value to true, and call the corresponding\nprolog_slurmctld_callback() or\nepilog_slurmctld_callback() function before\nthe thread exits. These callbacks are provided as function pointers when the\nslurmctld starts through\nprep_p_register_callbacks() call, and these\nfunction pointers should be cached locally in your plugin.API FunctionsAll of the following functions are required. Functions which are not\nimplemented must be stubbed.int init(void)Description:\n  Called when the plugin is loaded, before any other functions are\n  called. Put global initialization here.Returns: \nSLURM_SUCCESS on success, or\nSLURM_ERROR on failure.void fini(void)Description:\n  Called when the plugin is removed. Clear any allocated storage here.Returns: None.Note: These init and fini functions are not the same as those\ndescribed in the dlopen (3) system library.\nThe C run-time system co-opts those symbols for its own initialization.\nThe system _init() is called before the Slurm\ninit(), and the Slurm\nfini() is called before the system's\n_fini().\nvoid prep_p_register_callbacks(prep_callbacks_t *callbacks)\nDescription:\nThis function is called by the slurmctld to pass function pointer addresses\nused with asynchronous operation with the prep_p_prolog_slurmctld() and\nprep_p_epilog_slurmctld() interfaces. These pointers must be saved if\nasynchronous operation is used, otherwise this function can be an empty stub.\nArguments: \ncallbacks\n(input) contains function pointers for use with asynchronous operation within the slurmctld\nReturns: None.\nint prep_p_prolog(job_env_t *job_env, slurm_cred_t *cred)\nDescription:\nCalled within the slurmd as root before the first step of a job starts on the\ncompute node.\nArguments: \njob_env\n(input) details from the step launch request\ncred\n(input) launch credential with additional verifiable launch details signed by\nthe slurmctld\nReturns: \nSLURM_SUCCESS on success, or\nSLURM_ERROR on failure, will cause job failure.\n\n\nint prep_p_epilog(job_env_t *job_env, slurm_cred_t *cred)\n\nDescription:\nCalled within the slurmd as root after all job steps have completed.\nArguments: \njob_env\n(input) details from the step launch request\ncred\n(input) launch credential with additional verifiable launch details signed by\nthe slurmctld\nReturns: \nSLURM_SUCCESS on success, or\nSLURM_ERROR on failure, will cause job failure.\n\n\nint prep_p_prolog_slurmctld(job_record_t *job_ptr, bool *async)\n\nDescription:\nCalled within the slurmctld before a job launches.\nArguments: \njob_ptr\n(input) raw job record\nasync\n(output) set to true if this interface has spawned a separate processing thread\nthat must complete before the job starts execution\nReturns: \nSLURM_SUCCESS on success, or\nSLURM_ERROR on failure, will cause job failure.\n\n\nint prep_p_epilog_slurmctld(job_record_t *job_ptr, bool *async)\n\nDescription:\nCalled within the slurmctld as a job is terminating.\nArguments: \njob_ptr\n(input) raw job record\nasync\n(output) set to true if this interface has spawned a separate processing thread\nthat must complete before the job is marked complete\nReturns: \nSLURM_SUCCESS on success, or\nSLURM_ERROR on failure, will cause job failure.\n\nLast modified 18 April 2023\n"
        },
        {
            "title": "Navigation",
            "content": "\nSlurm Workload Manager\nVersion 24.05\n\n\nAbout\n\nOverview\nRelease Notes\n\n\n\nUsing\n\nDocumentation\nFAQ\nPublications\n\n\n\nInstalling\n\nDownload\nRelated Software\nInstallation Guide\n\n\n\nGetting Help\n\nMailing Lists\nSupport and Training\nTroubleshooting\n\n\n"
        }
    ]
}