{
    "url": "https://slurm.schedmd.com/classic_fair_share.html",
    "sections": [
        {
            "title": "\n\nSlurm Workload Manager\n\n",
            "content": "\n\nSchedMD\n\n"
        },
        {
            "title": "Classic Fairshare Algorithm",
            "content": "Overview\nAs of the 19.05 release, the Fair Tree algorithm is now the default, and the\nclassic fair share algorithm is only available if\nPriorityFlags=NO_FAIR_TREE has been explicitly configured.\nNormalized Shares\n\nThe fair-share hierarchy represents the portion of the computing resources\nthat have been allocated to different projects. These allocations are assigned\nto an account. There can be multiple levels of allocations made as allocations\nof a given account are further divided to sub-accounts:\n\n  Figure 1. Machine Allocation\nThe chart above shows the resources of the machine allocated to four\naccounts: A, B, C and D. Furthermore, account A's shares are allocated to\nsub-accounts A1 through A4. Users are granted permission (through sacctmgr) to\nsubmit jobs against specific accounts. If there are 10 users given equal shares\nin Account A3, they will each be allocated 1% of the machine.A user's normalized shares are simply:\nS =\t(Suser / Ssiblings) *\n\t(Saccount / Ssibling-accounts) *\n\t(Sparent / Sparent-siblings) * ...\n\n S\n is the user's normalized share, between zero and one\n Suser\n are the number of shares of the account allocated to the user\n Ssiblings\n are the total number of shares allocated to all users permitted to charge the account (including Suser)\n Saccount\n are the number of shares of the parent account allocated to the account\n Ssibling-accounts\n are the total number of shares allocated to all sub-accounts of the parent account\n Sparent\n are the number of shares of the grandparent account allocated to the parent\n Sparent-siblings\n are the total number of shares allocated to all sub-accounts of the grandparent account\nNormalized Usage\n\n The processor*seconds allocated to every job are tracked in real-time.  If one only considered usage over a fixed time period, then calculating a user's normalized usage would be a simple quotient:\n\tUN = Uuser / Utotal\n\n UN\n is normalized usage, between zero and one\n Uuser\n is the processor*seconds consumed by all of a user's jobs in a given account for over a fixed time period\n Utotal\n is the total number of processor*seconds utilized across the cluster during that same time period\n However, significant real-world usage quantities span multiple time periods.  Rather than treating usage over a number of weeks or months with equal importance, Slurm's fair-share priority calculation places more importance on the most recent resource usage and less importance on usage from the distant past. The Slurm usage metric is based off a half-life formula that favors the most recent usage statistics.  Usage statistics from the past decrease in importance based on a single decay factor, D:\n\tUH = Ucurrent_period +\n\t     ( D * Ulast_period) + (D * D * Uperiod-2) + ...\n\n UH\n is the historical usage subject to the half-life decay\n Ucurrent_period\n is the usage charged over the current measurement period\n Ulast_period\n is the usage charged over the last measurement period\n Uperiod-2\n is the usage charged over the second last measurement period\n D\n is a decay factor between zero and one that delivers the\n  half-life decay based off the PriorityDecayHalfLife setting\n  in the slurm.conf file.  Without accruing additional usage, a user's\n  UH usage will decay to half its original value after a time period\n  of PriorityDecayHalfLife seconds.\n In practice, the PriorityDecayHalfLife could be a matter of\nseconds or days as appropriate for each site.  The decay is\nrecalculated every PriorityCalcPeriod minutes, or 5 minutes by\ndefault.  The decay factor, D, is assigned the value that will achieve\nthe half-life decay rate specified by the PriorityDecayHalfLife\nparameter. The total number of processor*seconds utilized can be similarly aggregated with the same decay factor:\n\tRH = Rcurrent_period +\n\t    ( D * Rlast_period) + (D * D * Rperiod-2) + ...\n\n RH\n is the total historical usage subject to the same half-life decay as the usage formula.\n Rcurrent_period\n is the total usage charged over the current measurement period\n Rlast_period\n is the total usage charged over the last measurement period\n Rperiod-2\n is the total usage charged over the second last measurement period\n D\n is the decay factor between zero and one\n A user's normalized usage that spans multiple time periods then becomes:\n\tU = UH / RH\nSimplified Fair-Share Formula\n\n The simplified formula for calculating the fair-share factor for usage that spans multiple time periods and subject to a half-life decay is:\n\tF = 2**(-U/S/d)\n\n F\n is the fair-share factor\n S\n is the normalized shares\n U\n is the normalized usage factoring in half-life decay\n d\n is the FairShareDampeningFactor (a configuration parameter, default value of 1)\n The fair-share factor will therefore range from zero to one, where one represents the highest priority for a job.  A fair-share factor of 0.5 indicates that the user's jobs have used exactly the portion of the machine that they have been allocated.  A fair-share factor of above 0.5 indicates that the user's jobs have consumed less than their allocated share while a fair-share factor below 0.5 indicates that the user's jobs have consumed more than their allocated share of the computing resources.The Fair-share Factor Under An Account Hierarchy\n\n The method described above presents a system whereby the priority of a user's job is calculated based on the portion of the machine allocated to the user and the historical usage of all the jobs run by that user under a specific account. Another layer of \"fairness\" is necessary however, one that factors in the usage of other users drawing from the same account.  This allows a job's fair-share factor to be influenced by the computing resources delivered to jobs of other users drawing from the same account. If there are two members of a given account, and if one of those users has run many jobs under that account, the job priority of a job submitted by the user who has not run any jobs will be negatively affected.  This ensures that the combined usage charged to an account matches the portion of the machine that is allocated to that account. In the example below, when user 3 submits their first job using account C, they will want their job's priority to reflect all the resources delivered to account B.  They do not care that user 1 has been using up a significant portion of the cycles allocated to account B and user 2 has yet to run a job out of account B.  If user 2 submits a job using account B and user 3 submits a job using account C, user 3 expects their job to be scheduled before the job from user 2.\n\n  Figure 2. Usage Example\nThe Slurm Fair-Share Formula\n\n The Slurm fair-share formula has been designed to provide fair scheduling to users based on the allocation and usage of every account. The actual formula used is a refinement of the formula presented above:\n\tF = 2**(-UE/S)\n The difference is that the usage term is effective usage, which is defined as:\n\tUE = UAchild +\n\t\t  ((UEparent - UAchild) * Schild/Sall_siblings)\n\n UE\n is the effective usage of the child user or child account\n UAchild\n is the actual usage of the child user or child account\n UEparent\n is the effective usage of the parent account\n Schild\n is the shares allocated to the child user or child account\n Sall_siblings\n is the shares allocated to all the children of the parent account\n This formula only applies with the second tier of accounts below root.  For the tier of accounts just under root, their effective usage equals their actual usage. Because the formula for effective usage includes a term of the effective usage of the parent, the calculation for each account in the tree must start at the second tier of accounts and proceed downward:  to the children accounts, then grandchildren, etc.  The effective usage of the users will be the last to be calculated. Plugging in the effective usage into the fair-share formula above yields a fair-share factor that reflects the aggregated usage charged to each of the accounts in the fair-share hierarchy.FairShare=parentIt is possible to disable the fairshare at certain levels of the fair share\nhierarchy by using the FairShare=parent option of sacctmgr.\nFor users and accounts with FairShare=parent the normalized shares\nand effective usage values from the parent in the hierarchy will be used when\ncalculating fairshare priories.If all users in an account are configured with FairShare=parent\nthe result is that all the jobs drawing from that account will get the same\nfairshare priority, based on the accounts total usage. No additional fairness\nis added based on a user's individual usage.Example The following example demonstrates the effective usage calculations and resultant fair-share factors. (See Figure 3 below.) The machine's computing resources are allocated to accounts A and D with 40 and 60 shares respectively.  Account A is further divided into two children accounts, B with 30 shares and C with 10 shares.  Account D is further divided into two children accounts, E with 25 shares and F with 35 shares. Note:  the shares at any given tier in the Account hierarchy do not need to total up to 100 shares.  This example shows them totaling up to 100 to make the arithmetic easier to follow in your head. User 1 is granted permission to submit jobs against the B account.  Users 2 and 3 are granted one share each in the C account.  User 4 is the sole member of the E account and User 5 is the sole member of the F account. Note:  accounts A and D do not have any user members in this example, though users could have been assigned.The shares assigned to each account make it easy to determine normalized\nshares of the machine's complete resources. Account A has .4 normalized shares,\nB has .3 normalized shares, etc. Users who are sole members of an account have\nthe same number of normalized shares as the account. (E.g., User 1 has .3\nnormalized shares). Users who share accounts have a portion of the normalized\nshares based on their shares. For example, if user 2 had been allocated 4\nshares instead of 1, user 2 would have had .08 normalized shares. With users 2\nand 3 each holding 1 share, they each have a normalized share of 0.05. Users 1, 2, and 4 have run jobs that have consumed the machine's computing resources.  User 1's actual usage is 0.2 of the machine; user 2 is 0.25,  and user 4 is 0.25. The actual usage charged to each account is represented by the solid arrows.  The actual usage charged to each account is summed as one goes up the tree.  Account C's usage is the sum of the usage of Users 2 and 3; account A's actual usage is the sum of its children, accounts B and C.\n\n  Figure 3. Fair-share Example\n\n User 1 normalized share: 0.3\n User 2 normalized share: 0.05\n User 3 normalized share: 0.05\n User 4 normalized share: 0.25\n User 5 normalized share: 0.35\n As stated above, the effective usage is computed from the formula:\n\tUE = UAchild +\n\t\t  ((UEparent - UAchild) * Schild/Sall_siblings)\n The effective usage for all accounts at the first tier under the root allocation is always equal to the actual usage:\n Account B effective usage: 0.2 + ((0.45 - 0.2) * 30 / 40) = 0.3875\n Account C effective usage: 0.25 + ((0.45 - 0.25) * 10 / 40) = 0.3\n Account E effective usage: 0.25 + ((0.25 - 0.25) * 25 / 60) = 0.25\n Account F effective usage: 0.0 + ((0.25 - 0.0) * 35 / 60) = 0.1458\n The effective usage of each user is calculated using the same formula:\n User 1 effective usage: 0.2 + ((0.3875 - 0.2) * 1 / 1) = 0.3875\n User 2 effective usage: 0.25 + ((0.3 - 0.25) * 1 / 2) =  0.275\n User 3 effective usage: 0.0 + ((0.3 - 0.0) * 1 / 2) =  0.15\n User 4 effective usage: 0.25 + ((0.25 - 0.25) * 1 / 1) = 0.25\n User 5 effective usage: 0.0 + ((.1458 - 0.0) * 1 / 1) =  0.1458\n Using the Slurm fair-share formula,\n\tF = 2**(-UE/S)\n the fair-share factor for each user is:\n User 1 fair-share factor: 2**(-.3875 / .3) =  0.408479\n User 2 fair-share factor: 2**(-.275 / .05) =  0.022097\n User 3 fair-share factor: 2**(-.15 / .05) =   0.125000\n User 4 fair-share factor: 2**(-.25 / .25) =   0.500000\n User 5 fair-share factor: 2**(-.1458 / .35) = 0.749154\n From this example, once can see that users 1,2, and 3 are over-serviced while user 5 is under-serviced.  Even though user 3 has yet to submit a job, his/her fair-share factor is negatively influenced by the jobs users 1 and 2 have run. Based on the fair-share factor alone, if all 5 users were to submit a job charging their respective accounts, user 5's job would be granted the highest scheduling priority.Last modified 11 June 2019"
        },
        {
            "title": "Navigation",
            "content": "\nSlurm Workload Manager\nVersion 24.05\n\n\nAbout\n\nOverview\nRelease Notes\n\n\n\nUsing\n\nDocumentation\nFAQ\nPublications\n\n\n\nInstalling\n\nDownload\nRelated Software\nInstallation Guide\n\n\n\nGetting Help\n\nMailing Lists\nSupport and Training\nTroubleshooting\n\n\n"
        }
    ]
}