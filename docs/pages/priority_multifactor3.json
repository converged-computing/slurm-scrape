{
    "url": "https://slurm.schedmd.com/priority_multifactor3.html",
    "sections": [
        {
            "title": "\n\nSlurm Workload Manager\n\n",
            "content": "\n\nSchedMD\n\n"
        },
        {
            "title": "Depth-Oblivious Fair-share Factor",
            "content": "Contents\nIntroduction\nDepth-Oblivious Fair-Share Formula\nThe Effective Usage Ratio Under an Account Hierarchy\nConfiguration\nIntroductionThe depth-oblivious fair-share factor is a variant of the default\nfair-share factor which increases usable priority ranges and improves\nfairness between accounts in deep and/or irregular hierarchies. The\nreader is assumed to be familiar with the priority/multifactor plugin\nand only the specifics of the depth-oblivious factor are documented\nhereDepth-Oblivious Fair-Share Formula\n\n The main formula for calculating the fair-share factor of an account is:\n\tF = 2^(-R)\nwhere:\n F\n is the fair-share factor\n R\n is the effective usage ratio of the account\n This formula resembles the original fair-share formula, and\nproduces the same result for an account at the first level of the tree\n(under root). Indeed, for first-level accounts, the effective usage\nratio R is equal to the usage ratio r defined as: \n\tr = U/S\nwhere:\n S\n is the normalized shares\n U\n is the normalized usage factoring in half-life decay\n which is the same as the original formula. The Effective Usage Ratio Under an Account Hierarchy\n\n The generalized formula for R is a bit more complex. It involves a\nlocal usage ratio rl:\n\trl = r / (Uall_siblings/Sall_siblings)\n which is the ratio between the usage ratio of an account, and the\ntotal usage ratio of all the siblings at his level including\nitself. For example, assuming that all the children of an account have\nused in total two times their combined shares (which equal the shares\nof the parent account), but that one of the child has used only two\nthirds of his shares, the local usage ratio of that child will be of\none third.  The general formula for R is then defined by: \n\tR = Rparent * rl^k\nwhere:\n k\n varies between 0 and 1 and determines how much the effective usage\nratio of an account is determined by the usage ratio of its ancestors.\n To understand the formula for k, it is useful to first make a few\nobservations about the formula for R. On the one hand, if k equals 1,\nthe above formula gives R = Rparent * rl. For a\nsecond-level account, by plugging in the formula for rl,\nthis leads to R = r *\nUparent/Uall_siblings. Assuming jobs are\nsubmitted at leaf accounts, Uparent =\nUall_siblings which gives R = r. This means that if k\nequals 1, the fair-share factor of an account is only based on its own\nusage ratio. On the other hand, if k equals 0, R = Rparent\nwhich means the fair-share factor of an account is only based on the\nusage ratio of its ancestors.  The formula for k is: \n\n\tk = (1/(1+(5*ln(Rparent))^2)) if ln(Rparent)*ln(rl) <= 0\n\tk = 1 if ln(Rparent)*ln(rl) >= 0\n\n This formula is chosen to ensure that, if the usage of the\nancestors of an account is on target, the fair-share factor of the\naccount mainly depends on its own usage. Therefore k tends towards 1\nwhen Rparent tends towards 1. On the contrary, the more the\nancestors of an account have underused/overused their shares, the more\nthe fair-share factor of the account should get a bonus/malus by\nmoving towards the fair-share factor of its parent. Therefore, k tends\ntowards 0 when Rparent diverges from 1. However, if the\naccount usage imbalance is greater than its ancestors' in the same\ndirection, (for example, the ancestors have consumed two times their\nshares, and the child has consumed 3 times its shares), moving the\nfair-share factor back towards the one of the parent is not\nhelpful. As a result, k is kept to 1 in that case.\n\n\n  Figure 1. Plot of k as a function of Rparent\n\n\nConfiguration\nThe following slurm.conf parameters are used\nto enable the depth-oblivious flavor of the fair-share factor.  See\nslurm.conf(5) man page for more details.\n\nPriorityFlags\nSet to \"DEPTH_OBLIVIOUS\".\nPriorityType\nSet this value to \"priority/multifactor\".\n\n\nLast modified 26 June 2023\n"
        },
        {
            "title": "Navigation",
            "content": "\nSlurm Workload Manager\nVersion 24.05\n\n\nAbout\n\nOverview\nRelease Notes\n\n\n\nUsing\n\nDocumentation\nFAQ\nPublications\n\n\n\nInstalling\n\nDownload\nRelated Software\nInstallation Guide\n\n\n\nGetting Help\n\nMailing Lists\nSupport and Training\nTroubleshooting\n\n\n"
        },
        {
            "title": "Configuration",
            "content": "The following slurm.conf parameters are used\nto enable the depth-oblivious flavor of the fair-share factor.  See\nslurm.conf(5) man page for more details.\nPriorityFlags\nSet to \"DEPTH_OBLIVIOUS\".\nPriorityType\nSet this value to \"priority/multifactor\".\nLast modified 26 June 2023"
        }
    ]
}