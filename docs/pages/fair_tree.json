{
    "url": "https://slurm.schedmd.com/fair_tree.html",
    "sections": [
        {
            "title": "\n\nSlurm Workload Manager\n\n",
            "content": "\n\nSchedMD\n\n"
        },
        {
            "title": "Fair Tree Fairshare Algorithm",
            "content": "Contents\nIntroduction\nOverview for End Users\nAlgorithm\nLevel Fairshare Calculation\nTies\nsshare\nConfiguration\nImportant notes\nIntroduction\nFair Tree prioritizes users such that if accounts A and B are siblings and A has\na higher fairshare factor than B, all children of A will have higher fairshare\nfactors than all children of B.Some of the benefits include:\n\n\t\tAll users from a higher priority account receive a higher fair\n\t\tshare factor than all users from a lower priority account.\n\t\n\n\t\tUsers are sorted and ranked to prevent errors due to precision\n\t\tloss. Ties are allowed.\n\t\n\n\t\tAccount coordinators cannot accidentally harm the priority of\n\t\ttheir users relative to users in other accounts.\n\t\n\n\t\tUsers are extremely unlikely to have exactly the same fairshare\n\t\tfactor as another user due to loss of precision in calculations.\n\t\n\n\t\tNew jobs are immediately assigned a priority.\n\t\nOverview for End Users\n\nThis section is intended for non-admin users who just want to know how their\nfairshare factor is determined.  Run sshare -l (lowercase \"L\") to\nview the following columns: FairShare, Level FS.  Note that\nLevel FS values are infinity if the association has no usage.If an account has a higher Level FS value than any other sibling user or\nsibling account, all children of that account will have a higher FairShare value\nthan the children of the other account. This is true at every level of the\nassociation tree.The FairShare value is obtained by using the Fair Tree\nalgorithm to rank all users in the order that they\nshould be prioritized (descending). The FairShare value is the user's rank\ndivided by the total number of user associations. The highest ranked user\nreceives a 1.0 fairshare value.If you (UserA) have a lower FairShare value than another user (UserB) and\nwant to know why, find the first common ancestor account. At the level\nbelow the common ancestor, compare the Level FS value of your ancestor to the\nLevel FS value of UserB's ancestor. Your ancestor has a lower Level FS value\nthan UserB's ancestor. For information on how Level FS value is\ncalculated, read the section about the Level FS\nequation.For example, assume the association tree contains UserA and UserB as\nfollows:\nroot => Acct1 => Acct12 => UserA\nroot => Acct1 => Acct16 => UserB\nAcct1 is the first common ancestor of UserA and UserB. Check the Level FS\nvalues of Acct12 and Acct16.  If UserB has a higher FairShare value than UserA,\nAcct16 has a higher Level FS value than Acct12.The sections below contain more information about the algorithm, including\nhow the final fairshare factor and the Level FS values are calculated.AlgorithmAn equation is used to calculate a Level Fairshare value for each\nassociation, only considering the shares and usage of itself and its siblings.\nA \nrooted plane tree (PDF download), also known as a rooted\nordered tree, is logically created then sorted by Level Fairshare with the\nhighest values on the left. The tree is then visited in a depth-first\ntraversal. Users are ranked in pre-order as they are found. The ranking is\nused to create the final fairshare factor for the user.The algorithm performs a single traversal of the tree since all the steps\ncan be combined. The basic idea is to set rank equal to the count of user\nassociations then start at root:Calculate Level Fairshare for the subtree's children\nSort children of the subtree\nVisit the children in descending order\nIf user, assign a final fairshare factor similar to\n\t(rank-- / user_assoc_count)\nIf account, descend to account\nLevel Fairshare Calculation\n\nThe Level Fairshare equation is described below. Under-served associations\nwill have a value greater than 1.0. Over-served associations will have a value\nbetween 0.0 and 1.0.\n\nLF = S / U\n\nLF\n is the association's Level Fairshare\n S\n also known as Shares Norm, S is the association's assigned shares\nnormalized to the shares assigned to itself and its siblings:\nS = Srawself / Srawself+siblings\n\n U\n also known as Effective Usage, U is the association's usage normalized to\nthe account's usage:\nU = Urawself / Urawself+siblings\n\nU and S are in the range 0.0 .. 1.0. LF is in the\nrange 0.0 .. infinity.TiesTies are handled as follows:\n\nSibling users with the same Level Fairshare receive the same rank\nA user with the same Level Fairshare as a sibling account will receive the\nsame rank as its highest ranked user\nSibling accounts with the same Level Fairshare have their children lists\nmerged before descending\n\nssharesshare was modified to show the Level Fairshare value as Level FS when\nthe -l (long) parameter is specified.  The field shows the value for each\nassociation, thus allowing users to see the results of the fairshare\ncalculation at each level.Note: Norm Usage is not used by Fair Tree but is still displayed.ConfigurationThe following slurm.conf parameters are used to\nconfigure the Fair Tree algorithm.  See slurm.conf(5) man page for more\ndetails.\nPriorityType\nSet this value to \"priority/multifactor\".\nPriorityCalcPeriod\nPriorityCalcPeriod is the frequency in minutes that job half-life decay\nand Fair Tree calculations are performed.\nImportant Notes\nAs the Fair Tree algorithm ranks all users, active or not, the\nadministrator must carefully consider how to apply other priority weights\nin the priority/multifactor plugin. The PriorityWeightFairshare can be\nusefully set to a much smaller value than usual, possibly as low as 1 or 2 times\nthe number of user associations.\n\nFair Tree requires the Slurm Accounting\nDatabase to provide usage information and the assigned shares values.\n\nscontrol reconfigure does not cause the Fair Tree algorithm to\nrun immediately, even if switching from a different algorithm. You may have to\nwait until the next iteration as defined by PriorityCalcPeriod.\n\nLast modified 26 June 2023"
        },
        {
            "title": "Navigation",
            "content": "\nSlurm Workload Manager\nVersion 24.05\n\n\nAbout\n\nOverview\nRelease Notes\n\n\n\nUsing\n\nDocumentation\nFAQ\nPublications\n\n\n\nInstalling\n\nDownload\nRelated Software\nInstallation Guide\n\n\n\nGetting Help\n\nMailing Lists\nSupport and Training\nTroubleshooting\n\n\n"
        }
    ]
}