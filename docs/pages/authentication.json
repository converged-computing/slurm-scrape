{
    "url": "https://slurm.schedmd.com/authentication.html",
    "sections": [
        {
            "title": "\n\nSlurm Workload Manager\n\n",
            "content": "\n\nSchedMD\n\n"
        },
        {
            "title": "Authentication Plugins",
            "content": "OverviewIt is important to know that the Remote Procedure Calls (RPCs) that are\nreceived by Slurm are coming from trusted sources. There are a few different\nauthentication mechanisms available within Slurm to verify the legitimacy and\nintegrity of the requests.MUNGEMUNGE can be used to create and validate credentials. It allows Slurm to\nauthenticate the UID and GID of a request from another host that has matching\nusers and groups. MUNGE libraries must exist when building Slurm in order for\nit to be able to use munge for authentication. All hosts in the cluster must\nhave a shared cryptographic key.Setup\nMUNGE requires that there be a shared key on the machines running\nslurmctld, slurmdbd and the nodes. You can create a key file by entering your\nown text or by generating random data:\n\ndd if=/dev/random of=/etc/munge/munge.key bs=1024 count=1\n\n\nThis key should be owned by the \"munge\" user and should not be readable\nor writable by other users:\n\nchown munge:munge /etc/munge/munge.key\nchmod 400 /etc/munge/munge.key\n\n\nDistribute the key file to the machines on the cluster. It needs to be\non the machines running slurmctld, slurmdbd, slurmd and any submit hosts\nyou have configured. Use the distribution method of your choice.\nThe \"munge\" service should be running on any machines that need to use it\nfor authentication. It should be enabled and started on all the machines you\ndistributed a key to:\n\nsystemctl enable munge\nsystemctl start munge\n\n\nChanging the authentication mechanism requires a restart of Slurm daemons.\nThe daemons need to be stopped before updating the slurm.conf so that client\ncommands do not use a mechanism other than what the running daemons are\nexpecting.\nUpdate your slurm.conf and slurmdbd.conf to use MUNGE authentication.\n\nslurm.conf:\n\nAuthType = auth/munge\nCredType = cred/munge\n\nslurmdbd.conf:\n\nAuthType = auth/munge\n\n\n\nStart the Slurm daemons back up with the appropriate method for your\ncluster.\nSlurmBeginning with version 23.11, Slurm has its own plugin that can create and\nvalidate credentials. It validates that the requests come from legitimate UIDs\nand GIDs on other hosts with matching users and groups. All hosts in the\ncluster must have a shared cryptographic key.Single Key Setup\nFor the authentication to happen correctly you must have a shared key on\nthe machine running slurmctld, slurmdbd and the nodes. You can create a key\nfile by entering your own text or by generating random data:\n\ndd if=/dev/random of=/etc/slurm/slurm.key bs=1024 count=1\n\n\nThe slurm.key or slurm.jwks should be owned by SlurmUser and should not be\nreadable or writable by other users. This example assumes the SlurmUser is\n'slurm':\n\nchown slurm:slurm /etc/slurm/slurm.key\nchmod 600 /etc/slurm/slurm.key\n\n\nDistribute the key file to the machines on the cluster. It needs to be\non the machines running slurmctld, slurmdbd, slurmd and sackd.\nUpdate your slurm.conf and slurmdbd.conf to use the Slurm authentication\ntype.\n\nslurm.conf:\n\nAuthType = auth/slurm\nCredType = cred/slurm\n\nslurmdbd.conf:\n\nAuthType = auth/slurm\n\n\n\nStart the daemons back up with the appropriate method for your cluster.\nBeginning with version 24.05, you may alternatively create a slurm.jwks file\nwith multiple keys defined. The slurm.jwks file aids with key rotation, as\nthe cluster does not need to be restarted at once when a key is rotated.\nInstead, an scontrol reconfigure is sufficient. There are no slurm.conf\nparameters required to use the slurm.jwks file, instead, the presence of the\nslurm.jwks file enables this functionality. If the slurm.jwks is not present or\ncannot be read, the cluster defaults to the slurm.key.Multiple Key SetupSetup for multiple keys is very similar to the single key setup with the\nexception of a richer key file. The key file is composed of one jwks-esque\n\"keys\" list, with a number of \"key\" entries into this list. The key entries\nhave many different fields. An example file is below.\n\n{\n  \"keys\": [\n    {\n      \"alg\": \"HS256\",\n      \"kty\": \"oct\",\n      \"kid\": \"key-identifier\",\n      \"k\": \"VGhlIGtleSBiZWxvdyBtZSBuZXZlciBsaWVz\",\n      \"exp\": 1718200800\n    },\n    {\n      \"alg\": \"HS256\",\n      \"kty\": \"oct\",\n      \"kid\": \"key-identifier-2\",\n      \"k\": \"VGhlIGtleSBhYm92ZSBtZSBhbHdheXMgbGllcw==\",\n      \"use\": \"default\"\n    }\n  ]\n}\nThe following fields are used by auth/slurm. (Additional fields can be\npresent, but will be ignored.)\n\nalg \u2014 The cryptographic algorithm used with the key. This\nfield is required, and the value MUST be HS256.\nkty \u2014 The family of cryptographic algorithms used to sign the\nkey. This field is required, and the value MUST be oct.\nkid \u2014 The case-sensitive text identifier used for key\nmatching. This field is required, and the text must be unique.\nk \u2014 The actual key, represented in a Base64 or Base64url\nencoded binary blob. This field is required, and must be longer than 16\nbytes.\nuse \u2014 Determines whether this key is the default key.\nAcceptable values are only \"default\", which denotes this key as the default\nkey. There can only be one default key. This field is optional.\nexp \u2014 The expiration date of the key as a Unix timestamp. This\nfield is optional.\n\nOnce the slurm.jwks file has been created, use the same process for setting\nup auth/slurm as in the single key setup, except use the slurm.jwks file instead\nof the slurm.key file.If the cluster does not have access to consistent user ids from LDAP or\nthe operating system, you can use the\nuse_client_ids option to\nallow it to use the Slurm authentication mechanism.SACKSlurm's internal authentication makes use of a subsystem \u2014 the\nSlurm Auth and Cred Kiosk (SACK) \u2014\nthat is responsible for handling requests from the auth/slurm and\ncred/slurm plugins. This subsystem is automatically started and managed\ninternally by the slurmctld, slurmdbd, and slurmd daemons on each system with no\nneed to run a separate daemon.For login nodes not running one of these Slurm daemons, the sackd\ndaemon should be run to allow the Slurm client commands to authenticate to\nthe rest of the cluster. This daemon can also manage cached configuration files\nfor configless environments.JWTSlurm can be configured to use JSON Web Tokens (JWT) for authentication\npurposes. This is configured with the AuthAltType parameter and is used only\nfor client to server communication. You can read more about this authentication\nmechanism and how to install it here.Last modified 02 July 2024"
        },
        {
            "title": "Navigation",
            "content": "\nSlurm Workload Manager\nVersion 24.05\n\n\nAbout\n\nOverview\nRelease Notes\n\n\n\nUsing\n\nDocumentation\nFAQ\nPublications\n\n\n\nInstalling\n\nDownload\nRelated Software\nInstallation Guide\n\n\n\nGetting Help\n\nMailing Lists\nSupport and Training\nTroubleshooting\n\n\n"
        }
    ]
}