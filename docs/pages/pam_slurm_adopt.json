{
    "url": "https://slurm.schedmd.com/pam_slurm_adopt.html",
    "sections": [
        {
            "title": "\n\nSlurm Workload Manager\n\n",
            "content": "\n\nSchedMD\n\n"
        },
        {
            "title": "pam_slurm_adopt",
            "content": "The purpose of this module is to prevent users from sshing into nodes that\nthey do not have a running job on, and to track the ssh connection and any\nother spawned processes for accounting and to ensure complete job cleanup when\nthe job is completed. This module does this by determining the job which\noriginated the ssh connection. The user's connection is \"adopted\" into the\n\"external\" step of the job. When access is denied, the user will receive a\nrelevant error message.Contents\nInstallation\nSlurm Configuration\nSSH Configuration\nPAM Configuration\nAdministrative Access Configuration\npam_slurm_adopt Module Options\nFirewalls, IP Addresses, etc.\nSELinux\nLimitations\nInstallation\n\nSource:In your Slurm source directory, navigate to ./contribs/pam_slurm_adopt/\nand runmake && make installas root. This will place pam_slurm_adopt.a, pam_slurm_adopt.la,\nand pam_slurm_adopt.so in /lib/security/ (on Debian systems) or\n/lib64/security/ (on RedHat/SuSE systems).RPM:The included slurm.spec will build a slurm-pam_slurm RPM which will install\npam_slurm_adopt. Refer to the\nQuick Start\nAdministrator Guide for instructions on managing an RPM-based install.DEB:The included debian packaging scripts will build the\nslurm-smd-libpam-slurm-adopt package which will install pam_slurm_adopt.\nQuick Start\nAdministrator Guide for instructions on managing an DEB-based install.Slurm Configuration\n\nPrologFlags=contain must be set in the slurm.conf. This sets up the\n\"extern\" step into which ssh-launched processes will be adopted. You must also\nenable the task/cgroup plugin in slurm.conf. See the\nSlurm cgroups guide.\nCAUTION This option must be in place before using this module.\nThe module bases its checks on local steps that have already been launched. Jobs\nlaunched without this option do not have an extern step, so pam_slurm_adopt will\nnot have access to those jobs.LaunchParameters=ulimit_pam_adopt will set RLIMIT_RSS in processes\nadopted by the external step, similar to tasks running in regular steps.The UsePAM option in slurm.conf is not related to pam_slurm_adopt.SSH Configuration\n\nVerify that UsePAM is set to On in /etc/ssh/sshd_config (it\nshould be on by default).PAM Configuration\n\nAdd the following line to the appropriate file in /etc/pam.d, such as\nsystem-auth or sshd (you may use either the \"required\" or \"sufficient\" PAM\ncontrol flag):\naccount    required      pam_slurm_adopt.so\n The order of plugins is very important. pam_slurm_adopt.so should be the\nlast PAM module in the account stack. Included files such as common-account\nshould normally be included before pam_slurm_adopt.\n\nYou might have the following account stack in sshd:\naccount    required      pam_nologin.so\naccount    include       password-auth\n...\n-account    required      pam_slurm_adopt.so\nNote the \"-\" before the account entry for pam_slurm_adopt. It allows\nPAM to fail gracefully if the pam_slurm_adopt.so file is not found. If Slurm\nis on a shared filesystem, such as NFS, then this is suggested to avoid being\nlocked out of a node while the shared filesystem is mounting or down.pam_slurm_adopt must be used with the task/cgroup task plugin and the\nproctrack/cgroup proctrack plugin.\nThe pam_systemd module will conflict with pam_slurm_adopt, so you need to\ndisable it in all files that are included in sshd or system-auth (e.g.\npassword-auth, common-session, etc.).If you need the user management features from pam_systemd, such as\nhandling user runtime directory /run/user/$UID, you can have the prolog script\nrun 'loginctl enable-linger $SLURM_JOB_USER' and the epilog script disable\nit again (after making sure there are no other jobs from this user on the node)\nby running 'loginctl disable-linger $SLURM_JOB_USER'. You will also need to\nexport the XDG_* environment variables if your software requires them.\nYou can see an example of prolog and epilog scripts here:\nloginctl enable-linger $SLURM_JOB_USER\nexit 0\n\necho \"export XDG_RUNTIME_DIR=/run/user/$SLURM_JOB_UID\"\necho \"export XDG_SESSION_ID=$(</proc/self/sessionid)\"\necho \"export XDG_SESSION_TYPE=tty\"\necho \"export XDG_SESSION_CLASS=user\"\n\n#Only disable linger if this is the last job running for this user.\nO_P=0\nfor pid in $(scontrol listpids | awk -v jid=$SLURM_JOB_ID 'NR!=1 { if ($2 != jid && $1 != \"-1\"){print $1} }'); do\n        ps --noheader -o euser p $pid | grep -q $SLURM_JOB_USER && O_P=1\ndone\nif [ $O_P -eq 0 ]; then\n        loginctl disable-linger $SLURM_JOB_USER\nfi\nexit 0\nYou must also make sure a different PAM\nmodule isn't short-circuiting the account stack before it gets to\npam_slurm_adopt.so. From the example above, the following two lines have been\ncommented out in the included password-auth file:\n#account    sufficient    pam_localuser.so\n#-session   optional      pam_systemd.so\nNote: This may involve editing a file that is auto-generated.\nDo not run the config script that generates the file or your\nchanges will be erased.Administrative Access Configuration\n\n\npam_slurm_adopt will always allow the root user access, and will do so even\nbefore checking for slurm configuration. If you wish to also allow other admins\nto the system with their own user accounts, this can be accomplished by stacking\nother modules along with pam_slurm_adopt.\n\n\nStacking pam_access with pam_slurm_adopt is one way to permit administrative\naccess, with two possible implementations with subtle differences in behavior.\nBoth will require editing the pam_access configuration file\n(/etc/security/access.conf). In the following example, the access.conf file will\nallow members of the group \"wheel\" to log in.\n\n\n+:(wheel):ALL\n-:ALL:ALL\n\n\nThen you will need to stack the modules in the /etc/pam.d/sshd file.  The order\nhere matters, and each ordering has different implications. In the example\nbelow, pam_slurm adopt is listed first as \"sufficient\", followed by pam_access.\nIn this configuration when the admin has a job running, their ssh session\nwill be adopted into the job. If they do not, access will be permitted by\npam_access, but note that pam_slurm_adopt will still emit the \"access denied\"\nmessage.\n\n\naccount    sufficient    pam_slurm_adopt.so\naccount    required      pam_access.so\n\n\nFlipping this order, with pam_access(sufficient) before\npam_slurm_adopt(required), members of the administrative group will bypass\npam_slurm_adopt entirely.\n\n\naccount    sufficient    pam_access.so\naccount    required      pam_slurm_adopt.so\n\n\nThe pam_listfile module is another module that can be stacked with\npam_slurm_adopt and achieve similar results.  In the following example, it will\nallow all users in the specified file to log in, skipping the pam_slurm_adopt\nmodule.  This can also be flipped similar to pam_access, with the same\nimplications.\n\n\naccount    sufficient    pam_listfile.so item=user sense=allow onerr=fail file=/path/to/allowed_users_file\naccount    required      pam_slurm_adopt.so\n\n\nMore information about the capabilities and configuration options for pam_access\nand pam_listfile can be found in their respective man pages.\n\npam_slurm_adopt Module Options\n\n\n\nThis module is configurable. Add these options to the end of the pam_slurm_adopt\nline in the appropriate file in /etc/pam.d/ (e.g., sshd or system-auth):\n\n\naccount sufficient pam_slurm_adopt.so optionname=optionvalue\n\nThis module has the following options:\n\n\naction_no_jobs\n\n\n\nThe action to perform if the user has no jobs on the node. Configurable\nvalues are:\n\n\n\n\n\n\nignore\n\n\nDo nothing. Fall through to the next pam module.\n\ndeny (default)\n  \n\nDeny the connection.\n\n\n\n\n\naction_unknown\n\n\n\nThe action to perform when the user has multiple jobs on the node and\nthe RPC does not locate the source job. If the RPC mechanism works properly in\nyour environment, this option will likely be relevant only when\nconnecting from a login node. Configurable values are:\n\n\n\n\n\n\nnewest (default)\n  \n\nOn systems with cgroup/v1 pick the newest job on the node.\nThe \"newest\" job is chosen based on the mtime of the job's step_extern cgroup;\nasking Slurm would require an RPC to the controller. Thus, the memory cgroup\nmust be in use so that the code can check mtimes of cgroup directories. The user\ncan ssh in but may be adopted into a job that exits earlier than the\njob they intended to check on. The ssh connection will at least be\nsubject to appropriate limits and the user can be informed of better\nways to accomplish their objectives if this becomes a problem.\nNOTE: If the module fails to retrieve the cgroup mtime, then the picked\njob may not be the newest one.\nOn systems with cgroup/v2 the newest is just the job with the greatest\nid, and thus this does not ensure that it is really the newest job.\n\n\nallow\n\n\nLet the connection through without adoption.\n\ndeny\n\n\nDeny the connection.\n\n\n\n\n\naction_adopt_failure\n\n\nThe action to perform if the process is unable to be adopted into any\njob for whatever reason. If the process cannot be adopted into the job\nidentified by the callerid RPC, it will fall through to the action_unknown\ncode and try to adopt there. A failure at that point or if there is only\none job will result in this action being taken. Configurable values are:\n\n\n\n\n\n\nallow (default)\n  \n\nLet the connection through without adoption. WARNING: This value is\ninsecure and is recommended for testing purposes only. We recommend using\n\"deny.\"\n\ndeny\n\n\nDeny the connection.\n\n\n\n\n\naction_generic_failure\n\n\nThe action to perform if there are certain failures such as the\ninability to talk to the local slurmd or if the kernel doesn't offer\nthe correct facilities. Configurable values are:\n\n\n\n\n\n\nignore (default)\n  \n\nDo nothing. Fall through to the next pam module. WARNING: This value is\ninsecure and is recommended for testing purposes only. We recommend using\n\"deny.\"\n\nallow\n\n\nLet the connection through without adoption.\n\ndeny\n\n\nDeny the connection.\n\n\n\n\n\ndisable_x11\n\n\nTurn off Slurm built-in X11 forwarding support. Configurable values are:\n\n\n\n\n\n\n0 (default)\n  \n\nIf the job the connection is adopted into has Slurm's X11 forwarding\nenabled, the DISPLAY variable will be overwritten with the X11 tunnel\nendpoint details.\n\n1\n\n\nDo not check for Slurm's X11 forwarding support, and do not alter the\nDISPLAY variable.\n\n\n\n\n\njoin_container\n\n\nControl the interaction with the job_container/tmpfs plugin.\nConfigurable values are:\n\n\n\n\n\ntrue (default)\n  \n\nAttempt to join a container created by the job_container/tmpfs plugin.\n\nfalse\n\n\nDo not attempt to join a container.\n\n\n\n\n\nlog_level\n\n\nSee \nSlurmdDebug in slurm.conf for available options.\nThe default log_level is info.\n\n\nnodename\n\n\nIf the NodeName defined in slurm.conf is different than this node's\nhostname (as reported by hostname -s), then this must be set to the\nNodeName in slurm.conf that this host operates as.\n\n\nservice\n\n\nThe pam service name for which this module should run. By default\nit only runs for sshd for which it was designed for. A\ndifferent service name can be specified like \"login\" or \"*\" to\nallow the module to in any service context. For local pam logins\nthis module could cause unexpected behavior or even security\nissues. Therefore if the service name does not match then this\nmodule will not perform the adoption logic and returns\nPAM_IGNORE immediately.\n\n\nFirewalls, IP Addresses, etc.\n\n\nslurmd should be accessible on any IP address from which a user might\nlaunch ssh. The RPC to determine the source job must be able to reach the\nslurmd port on that particular IP address. If there is no slurmd\non the source node, such as on a login node, it is better to have the RPC be\nrejected rather than silently dropped. This will allow better responsiveness to\nthe RPC initiator.\nSELinux\nSELinux may conflict with pam_slurm_adopt, but it is generally possible for\nthem to work side by side. This is an example type enforcement file that was\nused on a fairly stock Debian system. It is provided to give some direction\nand to show what is required to get this working but may require additional\nmodification.\n\nmodule pam_slurm_adopt 1.0;\n\nrequire {\n\ttype sshd_t;\n\ttype var_spool_t;\n\ttype unconfined_t;\n\ttype initrc_var_run_t;\n\tclass sock_file write;\n\tclass dir { read search };\n\tclass unix_stream_socket connectto;\n}\n\n#============= sshd_t ==============\nallow sshd_t initrc_var_run_t:dir search;\nallow sshd_t initrc_var_run_t:sock_file write;\nallow sshd_t unconfined_t:unix_stream_socket connectto;\nallow sshd_t var_spool_t:dir read;\nallow sshd_t var_spool_t:sock_file write;\n\nIt is possible for some plugins to require more permissions than this.\nNotably, job_container/tmpfs will require something more like this:\n\nmodule pam_slurm_adopt 1.0;\n\nrequire {\n\ttype nsfs_t;\n\ttype var_spool_t;\n\ttype initrc_var_run_t;\n\ttype unconfined_t;\n\ttype sshd_t;\n\tclass sock_file write;\n\tclass dir { read search };\n\tclass unix_stream_socket connectto;\n\tclass fd use;\n\tclass file read;\n\tclass capability sys_admin;\n}\n\n#============= sshd_t ==============\nallow sshd_t initrc_var_run_t:dir search;\nallow sshd_t initrc_var_run_t:sock_file write;\nallow sshd_t nsfs_t:file read;\nallow sshd_t unconfined_t:fd use;\nallow sshd_t unconfined_t:unix_stream_socket connectto;\nallow sshd_t var_spool_t:dir read;\nallow sshd_t var_spool_t:sock_file write;\nallow sshd_t self:capability sys_admin;\n\nLimitations\n\n\nAlternate authentication methods such as multi-factor authentication may\nbreak process adoption with pam_slurm_adopt.\nWhen using SELinux support in Slurm, the session started via pam_slurm_adopt\nwon't necessarily be in the same context as the job it is associated with.\nLast modified 23 July 2024\n"
        },
        {
            "title": "Navigation",
            "content": "\nSlurm Workload Manager\nVersion 24.05\n\n\nAbout\n\nOverview\nRelease Notes\n\n\n\nUsing\n\nDocumentation\nFAQ\nPublications\n\n\n\nInstalling\n\nDownload\nRelated Software\nInstallation Guide\n\n\n\nGetting Help\n\nMailing Lists\nSupport and Training\nTroubleshooting\n\n\n"
        },
        {
            "title": "pam_slurm_adopt Module Options\n\n",
            "content": "\nThis module is configurable. Add these options to the end of the pam_slurm_adopt\nline in the appropriate file in /etc/pam.d/ (e.g., sshd or system-auth):\n\naccount sufficient pam_slurm_adopt.so optionname=optionvalue\nThis module has the following options:\n\naction_no_jobs\n\n\n\nThe action to perform if the user has no jobs on the node. Configurable\nvalues are:\n\n\n\n\n\n\nignore\n\n\nDo nothing. Fall through to the next pam module.\n\ndeny (default)\n  \n\nDeny the connection.\n\n\n\n\n\naction_unknown\n\n\n\nThe action to perform when the user has multiple jobs on the node and\nthe RPC does not locate the source job. If the RPC mechanism works properly in\nyour environment, this option will likely be relevant only when\nconnecting from a login node. Configurable values are:\n\n\n\n\n\n\nnewest (default)\n  \n\nOn systems with cgroup/v1 pick the newest job on the node.\nThe \"newest\" job is chosen based on the mtime of the job's step_extern cgroup;\nasking Slurm would require an RPC to the controller. Thus, the memory cgroup\nmust be in use so that the code can check mtimes of cgroup directories. The user\ncan ssh in but may be adopted into a job that exits earlier than the\njob they intended to check on. The ssh connection will at least be\nsubject to appropriate limits and the user can be informed of better\nways to accomplish their objectives if this becomes a problem.\nNOTE: If the module fails to retrieve the cgroup mtime, then the picked\njob may not be the newest one.\nOn systems with cgroup/v2 the newest is just the job with the greatest\nid, and thus this does not ensure that it is really the newest job.\n\n\nallow\n\n\nLet the connection through without adoption.\n\ndeny\n\n\nDeny the connection.\n\n\n\n\n\naction_adopt_failure\n\n\nThe action to perform if the process is unable to be adopted into any\njob for whatever reason. If the process cannot be adopted into the job\nidentified by the callerid RPC, it will fall through to the action_unknown\ncode and try to adopt there. A failure at that point or if there is only\none job will result in this action being taken. Configurable values are:\n\n\n\n\n\n\nallow (default)\n  \n\nLet the connection through without adoption. WARNING: This value is\ninsecure and is recommended for testing purposes only. We recommend using\n\"deny.\"\n\ndeny\n\n\nDeny the connection.\n\n\n\n\n\naction_generic_failure\n\n\nThe action to perform if there are certain failures such as the\ninability to talk to the local slurmd or if the kernel doesn't offer\nthe correct facilities. Configurable values are:\n\n\n\n\n\n\nignore (default)\n  \n\nDo nothing. Fall through to the next pam module. WARNING: This value is\ninsecure and is recommended for testing purposes only. We recommend using\n\"deny.\"\n\nallow\n\n\nLet the connection through without adoption.\n\ndeny\n\n\nDeny the connection.\n\n\n\n\n\ndisable_x11\n\n\nTurn off Slurm built-in X11 forwarding support. Configurable values are:\n\n\n\n\n\n\n0 (default)\n  \n\nIf the job the connection is adopted into has Slurm's X11 forwarding\nenabled, the DISPLAY variable will be overwritten with the X11 tunnel\nendpoint details.\n\n1\n\n\nDo not check for Slurm's X11 forwarding support, and do not alter the\nDISPLAY variable.\n\n\n\n\n\njoin_container\n\n\nControl the interaction with the job_container/tmpfs plugin.\nConfigurable values are:\n\n\n\n\n\ntrue (default)\n  \n\nAttempt to join a container created by the job_container/tmpfs plugin.\n\nfalse\n\n\nDo not attempt to join a container.\n\n\n\n\n\nlog_level\n\n\nSee \nSlurmdDebug in slurm.conf for available options.\nThe default log_level is info.\n\n\nnodename\n\n\nIf the NodeName defined in slurm.conf is different than this node's\nhostname (as reported by hostname -s), then this must be set to the\nNodeName in slurm.conf that this host operates as.\n\n\nservice\n\n\nThe pam service name for which this module should run. By default\nit only runs for sshd for which it was designed for. A\ndifferent service name can be specified like \"login\" or \"*\" to\nallow the module to in any service context. For local pam logins\nthis module could cause unexpected behavior or even security\nissues. Therefore if the service name does not match then this\nmodule will not perform the adoption logic and returns\nPAM_IGNORE immediately.\n\nFirewalls, IP Addresses, etc.\n\nslurmd should be accessible on any IP address from which a user might\nlaunch ssh. The RPC to determine the source job must be able to reach the\nslurmd port on that particular IP address. If there is no slurmd\non the source node, such as on a login node, it is better to have the RPC be\nrejected rather than silently dropped. This will allow better responsiveness to\nthe RPC initiator.SELinuxSELinux may conflict with pam_slurm_adopt, but it is generally possible for\nthem to work side by side. This is an example type enforcement file that was\nused on a fairly stock Debian system. It is provided to give some direction\nand to show what is required to get this working but may require additional\nmodification.\nmodule pam_slurm_adopt 1.0;\n\nrequire {\n\ttype sshd_t;\n\ttype var_spool_t;\n\ttype unconfined_t;\n\ttype initrc_var_run_t;\n\tclass sock_file write;\n\tclass dir { read search };\n\tclass unix_stream_socket connectto;\n}\n\n#============= sshd_t ==============\nallow sshd_t initrc_var_run_t:dir search;\nallow sshd_t initrc_var_run_t:sock_file write;\nallow sshd_t unconfined_t:unix_stream_socket connectto;\nallow sshd_t var_spool_t:dir read;\nallow sshd_t var_spool_t:sock_file write;\nIt is possible for some plugins to require more permissions than this.\nNotably, job_container/tmpfs will require something more like this:\nmodule pam_slurm_adopt 1.0;\n\nrequire {\n\ttype nsfs_t;\n\ttype var_spool_t;\n\ttype initrc_var_run_t;\n\ttype unconfined_t;\n\ttype sshd_t;\n\tclass sock_file write;\n\tclass dir { read search };\n\tclass unix_stream_socket connectto;\n\tclass fd use;\n\tclass file read;\n\tclass capability sys_admin;\n}\n\n#============= sshd_t ==============\nallow sshd_t initrc_var_run_t:dir search;\nallow sshd_t initrc_var_run_t:sock_file write;\nallow sshd_t nsfs_t:file read;\nallow sshd_t unconfined_t:fd use;\nallow sshd_t unconfined_t:unix_stream_socket connectto;\nallow sshd_t var_spool_t:dir read;\nallow sshd_t var_spool_t:sock_file write;\nallow sshd_t self:capability sys_admin;\nLimitations\n\nAlternate authentication methods such as multi-factor authentication may\nbreak process adoption with pam_slurm_adopt.When using SELinux support in Slurm, the session started via pam_slurm_adopt\nwon't necessarily be in the same context as the job it is associated with.Last modified 23 July 2024"
        }
    ]
}