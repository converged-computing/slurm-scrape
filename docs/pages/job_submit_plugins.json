{
    "url": "https://slurm.schedmd.com/job_submit_plugins.html",
    "sections": [
        {
            "title": "\n\nSlurm Workload Manager\n\n",
            "content": "\n\nSchedMD\n\n"
        },
        {
            "title": "Job Submit Plugin API",
            "content": "Overview This document describes Slurm job submit plugins and the API that\ndefines them. It is intended as a resource to programmers wishing to write\ntheir own Slurm job submit plugins. This is version 100 of the API.Slurm job submit plugins must conform to the\nSlurm Plugin API with the following specifications:const char\nplugin_name[]=\"full\u00a0text\u00a0name\"\n\nA free-formatted ASCII text string that identifies the plugin.\n\nconst char\nplugin_type[]=\"major/minor\"\n\nThe major type must be \"job_submit.\"\nThe minor type can be any suitable name for the type of job submission package.\nWe include samples in the Slurm distribution for\n\nall_partitions \u2014 Set default partition to all partitions on\nthe cluster.\ndefaults \u2014 Set default values for job submission or modify\nrequests.\nlogging \u2014 Log select job submission and modification\nparameters.\nlua \u2014 Interface to Lua scripts\nimplementing these functions (actually a slight variation of them). Sample Lua\nscripts can be found with the Slurm distribution in the directory\ncontribs/lua. The Lua script must be named \"job_submit.lua\" and must\nbe located in the default configuration directory (typically the subdirectory\n\"etc\" of the installation directory). Slurmctld will fatal on startup if the\nconfigured lua script is invalid. Slurm will try to load the script for each\njob submission. If the script is broken or removed while slurmctld is running,\nSlurm will fallback to the previous working version of the script.\nWarning: slurmctld runs this script while holding internal locks, and\nonly a single copy of this script can run at a time. This blocks most\nconcurrency in slurmctld. Therefore, this script should run to completion as\nquickly as possible.\npartition \u2014 Sets a job's default partition based upon job\nsubmission parameters and available partitions.\npbs \u2014 Translate PBS job submission options to Slurm equivalent\n(if possible).\nrequire_timelimit \u2014 Force job submissions to specify a\ntimelimit.\n\nconst uint32_t plugin_version\nIf specified, identifies the version of Slurm used to build this plugin and\nany attempt to load the plugin from a different version of Slurm will result\nin an error.\nIf not specified, then the plugin may be loaded by Slurm commands and\ndaemons from any version, however this may result in difficult to diagnose\nfailures due to changes in the arguments to plugin functions or changes\nin other Slurm functions used by the plugin.\nSlurm can be configured to use multiple job_submit plugins if desired,\nhowever the lua plugin will only execute one lua script named \"job_submit.lua\"\nlocated in the default script directory (typically the subdirectory \"etc\" of\nthe installation directory).\nAPI Functions\nAll of the following functions are required. Functions which are not\nimplemented must be stubbed.\n\n int init (void)\nDescription:\n  Called when the plugin is loaded, before any other functions are\n  called. Put global initialization here.\nReturns: \nSLURM_SUCCESS on success, or\nSLURM_ERROR on failure.\n void fini (void)\nDescription:\n  Called when the plugin is removed. Clear any allocated storage here.\nReturns: None.\nNote: These init and fini functions are not the same as those\ndescribed in the dlopen (3) system library.\nThe C run-time system co-opts those symbols for its own initialization.\nThe system _init() is called before the Slurm\ninit(), and the Slurm\nfini() is called before the system's\n_fini().\n\nint job_submit(struct job_descriptor *job_desc, uint32_t submit_uid, char **error_msg)\nDescription:\nThis function is called by the slurmctld daemon with the job submission\nparameters supplied by the user regardless of the command used (e.g.\nsalloc, sbatch, slurmrestd). Only explicitly\ndefined values will be represented. For values not defined at submit time\nslurm.NO_VAL/16/64 or\nnil will be set. It can be used to log and/or\nmodify the job parameters supplied by the user as desired. Note that this\nfunction has access to the slurmctld's global data structures, for example\nto examine the available partitions, reservations, etc.\nArguments: \njob_desc\n(input/output) the job allocation request specifications, before job defaults\nare set.\nsubmit_uid\n(input) user ID initiating the request.\nerror_msg\n(output) If the argument is not null, then a plugin generated error message\ncan be stored here. The error message is expected to have allocated memory\nwhich Slurm will release using the xfree function. The error message is always\npropagated to the caller, no matter the return code.\nReturns: \nSLURM_SUCCESS on success, or\nSLURM_ERROR on failure.\n\n\nint job_modify(struct job_descriptor *job_desc, job_record_t *job_ptr, uint32_t modify_uid)\nDescription:\nThis function is called by the slurmctld daemon with job modification parameters\nsupplied by the user regardless of the command used (e.g. scontrol, sview,\nslurmrestd). It can be used to log and/or\nmodify the job parameters supplied by the user as desired. Note that this\nfunction has access to the slurmctld's global data structures, for example to\nexamine the available partitions, reservations, etc.\nArguments: \njob_desc\n(input/output) the job allocation request specifications, before job defaults\nare set.\njob_ptr\n(input/output) slurmctld daemon's current data structure for the job to\nbe modified.\nmodify_uid\n(input) user ID initiating the request.\nReturns: \nSLURM_SUCCESS on success, or\nSLURM_ERROR on failure.\n\nLua Functions\nThe Lua functions differ slightly from those implemented in C for\nbetter ease of use. Sample Lua scripts can be found with the Slurm distribution\nin the directory contribs/lua. The default installation location of\nthe Lua scripts is the same location as the Slurm configuration file,\nslurm.conf.\nReading and writing of job environment variables using Lua is possible\nby referencing the environment variables as a data structure containing\nnamed elements.\nNOTE: Only sbatch sends the environment to slurmctld. salloc and srun\ndo not send the environment to slurmctld, so job_desc.environment is not\navailable in the job_submit plugin for these jobs.\nFor example:\n\n...\n\t-- job_desc.environment is only available for batch jobs.\n\tif (job_desc.script) then\n\t\tif (job_desc.environment ~= nil) then\n\t\t\tif (job_desc.environment[\"FOO\"] ~= nil) then\n\t\t\t\tslurm.log_user(\"Found env FOO=%s\",\n\t\t\t\t\t       job_desc.environment[\"FOO\"])\n\t\t\tend\n\t\tend\n\tend\n...\n\nNOTE: To get/set the environment for all types of jobs, an alternate\napproach is to use CliFilterPlugins.\n\nint slurm_job_submit(job_desc_msg_t *job_desc, List part_list, uint32_t\nsubmit_uid)\nDescription:\nThis function is called by the slurmctld daemon with the job submission\nparameters supplied by the user regardless of the command used (e.g.\nsalloc, sbatch, slurmrestd). Only explicitly\ndefined values will be represented. For values not defined at submit time\nslurm.NO_VAL/16/64 or\nnil will be set. It can be used to log and/or\nmodify the job parameters supplied by the user as desired. Note that this\nfunction has access to the slurmctld's global data structures, for example\nto examine the available partitions, reservations, etc.\nArguments: \njob_desc\n(input/output) the job allocation request specifications.\npart_list\n(input) List of pointer to partitions which this user is authorized to use.\nsubmit_uid\n(input) user ID initiating the request.\nReturns: \nslurm.SUCCESS \u2014\nJob submission accepted by plugin.\nslurm.FAILURE \u2014\nJob submission rejected due to error (Deprecated in 19.05).\nslurm.ERROR \u2014\nJob submission rejected due to error.\nslurm.ESLURM_* \u2014\nJob submission rejected due to error as defined by\nslurm/slurm_errno.h and src/common/slurm_errno.c.\nNOTE: As job_desc contains only\nuser-specified values, undefined values can be recognized (before defaults\nare set) by either checking for nil or for\nthe corresponding slurm.NO_VAL/16/64. This\nallows sites to apply policies, such as requiring users to define the number\nof nodes, as in the example below:\n\n...\n\t-- Number of nodes must be defined at submit time\n\tif (job_desc.max_nodes == slurm.NO_VAL) then\n\t\tslurm.log_user(\"No max_nodes specified, please specify a number of nodes\")\n\t\treturn slurm.ERROR\n\tend\n...\n\n\nint slurm_job_modify(job_desc_msg_t *job_desc, job_record_t *job_ptr,\nList part_list, int modify_uid)\nDescription:\nThis function is called by the slurmctld daemon with job modification parameters\nsupplied by the user regardless of the command used (e.g. scontrol, sview,\nslurmrestd). It can be used to log and/or\nmodify the job parameters supplied by the user as desired. Note that this\nfunction has access to the slurmctld's global data structures, for example to\nexamine the available partitions, reservations, etc.\nArguments: \njob_desc\n(input/output) the job allocation request specifications.\njob_ptr\n(input/output) slurmctld daemon's current data structure for the job to\nbe modified.\npart_list\n(input) List of pointer to partitions which this user is authorized to use.\nmodify_uid\n(input) user ID initiating the request.\nReturns: \nReturns from job_modify() are the same as the returns from job_submit().\nLua Job Attributes\nThe available job attributes change occasionally with different versions of\nSlurm. To find the job attributes that are available for the version of Slurm\nyou're using, go to the  SchedMD\ngithub page, and navigate to\nsrc/plugins/job_submit/lua/job_submit_lua.c.\n_job_rec_field() contains the list of attributes available for the\njob_record (e.g. current record in Slurm). _get_job_req_field() contains\nthe list of attributes available for the job_descriptor (e.g. submission or\nmodification request).\n\nBuilding\nGenerally using a LUA interface for a job submit plugin is best:\nIt is simple to write and maintain with minimal dependencies upon the Slurm\ndata structures.\nHowever using C does provide a mechanism to get more information than available\nusing LUA including full access to all of the data structures and functions\nin the slurmctld daemon.\nThe simplest way to build a C program would be to just replace one of the\njob submit plugins included in the Slurm distribution with your own code\n(i.e. use a patch with your own code).\nThen just build and install Slurm with that new code.\nBuilding a new plugin outside of the Slurm distribution is possible, but\nfar more complex.\nIt also requires access to a multitude of Slurm header files as shown in the\nprocedure below.\n\nYou will need to at least partly build Slurm first. The \"configure\" command\nmust be executed in order to build the \"config.h\" file in the build directory.\nCreate a local directory somewhere for your files to build with.\nAlso create subdirectories named \".libs\" and \".deps\".\nCopy a \".deps/job_submit_*Plo\" file from another job_submit plugin's \".deps\"\ndirectory (made as part of the build process) into your local \".deps\" subdirectory.\nRename the file as appropriate to reflect your plugins name (e.g. rename\n\"job_submit_partition.Plo\" to be something like \"job_submit_mine.Plo\").\nCompile and link your plugin. Those options might differ depending\nupon your build environment. Check the options used for building the\nother job_submit plugins and modify the example below as required.\nInstall the plugin.\n\n\n# Example:\n# The Slurm source is in ~/SLURM/slurm.git\n# The Slurm build directory is ~/SLURM/slurm.build\n# The plugin build is to take place in the directory\n#   \"~/SLURM/my_submit\"\n# The installation location is \"/usr/local\"\n\n# Build Slurm from ~/SLURM/slurm.build\n# (or at least run \"~/SLURM/slurm.git/configure\")\n\n# Set up your plugin files\ncd ~/SLURM\nmkdir my_submit\ncd my_submit\nmkdir .libs\nmkdir .deps\n# Create your plugin code\nvi job_submit_mine.c\n\n# Copy up a dependency file\ncp ~/SLURM/slurm.build/src/plugins/job_submit/partition/.deps/job_submit_partition.Plo \\\n   .deps/job_submit_mine.Plo\n\n# Compile\ngcc -DHAVE_CONFIG_H -I~/SLURM/slurm.build -I~/slurm.git \\\n   -g -O2 -pthread -fno-gcse -Werror -Wall -g -O0       \\\n   -fno-strict-aliasing -MT job_submit_mine.lo          \\\n   -MD -MP -MF .deps/job_submit_mine.Tpo                \\\n   -c job_submit_mine.c -o .libs/job_submit_mine.o\n\n# Some clean up\nmv -f .deps/job_submit_mine.Tpo .deps/job_submit_mine.Plo\nrm -fr .libs/job_submit_mine.a .libs/job_submit_mine.la \\\n   .libs/job_submit_mine.lai job_submit_mine.so\n\n# Link\ngcc -shared -fPIC -DPIC .libs/job_submit_mine.o -O2         \\\n   -pthread -O0 -pthread -Wl,-soname -Wl,job_submit_mine.so \\\n   -o job_submit_mine.so\n\n# Install\ncp job_submit_mine.so file \\\n   /usr/local/lib/slurm/job_submit_mine.so\n\nLast modified 04 October 2023\n"
        },
        {
            "title": "Navigation",
            "content": "\nSlurm Workload Manager\nVersion 24.05\n\n\nAbout\n\nOverview\nRelease Notes\n\n\n\nUsing\n\nDocumentation\nFAQ\nPublications\n\n\n\nInstalling\n\nDownload\nRelated Software\nInstallation Guide\n\n\n\nGetting Help\n\nMailing Lists\nSupport and Training\nTroubleshooting\n\n\n"
        },
        {
            "title": "API Functions",
            "content": "All of the following functions are required. Functions which are not\nimplemented must be stubbed.\n\n int init (void)\nDescription:\n  Called when the plugin is loaded, before any other functions are\n  called. Put global initialization here.\nReturns: \nSLURM_SUCCESS on success, or\nSLURM_ERROR on failure.\n void fini (void)\nDescription:\n  Called when the plugin is removed. Clear any allocated storage here.\nReturns: None.\nNote: These init and fini functions are not the same as those\ndescribed in the dlopen (3) system library.\nThe C run-time system co-opts those symbols for its own initialization.\nThe system _init() is called before the Slurm\ninit(), and the Slurm\nfini() is called before the system's\n_fini().\n\nint job_submit(struct job_descriptor *job_desc, uint32_t submit_uid, char **error_msg)\nDescription:\nThis function is called by the slurmctld daemon with the job submission\nparameters supplied by the user regardless of the command used (e.g.\nsalloc, sbatch, slurmrestd). Only explicitly\ndefined values will be represented. For values not defined at submit time\nslurm.NO_VAL/16/64 or\nnil will be set. It can be used to log and/or\nmodify the job parameters supplied by the user as desired. Note that this\nfunction has access to the slurmctld's global data structures, for example\nto examine the available partitions, reservations, etc.\nArguments: \njob_desc\n(input/output) the job allocation request specifications, before job defaults\nare set.\nsubmit_uid\n(input) user ID initiating the request.\nerror_msg\n(output) If the argument is not null, then a plugin generated error message\ncan be stored here. The error message is expected to have allocated memory\nwhich Slurm will release using the xfree function. The error message is always\npropagated to the caller, no matter the return code.\nReturns: \nSLURM_SUCCESS on success, or\nSLURM_ERROR on failure.\n\n\nint job_modify(struct job_descriptor *job_desc, job_record_t *job_ptr, uint32_t modify_uid)\nDescription:\nThis function is called by the slurmctld daemon with job modification parameters\nsupplied by the user regardless of the command used (e.g. scontrol, sview,\nslurmrestd). It can be used to log and/or\nmodify the job parameters supplied by the user as desired. Note that this\nfunction has access to the slurmctld's global data structures, for example to\nexamine the available partitions, reservations, etc.\nArguments: \njob_desc\n(input/output) the job allocation request specifications, before job defaults\nare set.\njob_ptr\n(input/output) slurmctld daemon's current data structure for the job to\nbe modified.\nmodify_uid\n(input) user ID initiating the request.\nReturns: \nSLURM_SUCCESS on success, or\nSLURM_ERROR on failure.\n\nLua Functions\nThe Lua functions differ slightly from those implemented in C for\nbetter ease of use. Sample Lua scripts can be found with the Slurm distribution\nin the directory contribs/lua. The default installation location of\nthe Lua scripts is the same location as the Slurm configuration file,\nslurm.conf.\nReading and writing of job environment variables using Lua is possible\nby referencing the environment variables as a data structure containing\nnamed elements.\nNOTE: Only sbatch sends the environment to slurmctld. salloc and srun\ndo not send the environment to slurmctld, so job_desc.environment is not\navailable in the job_submit plugin for these jobs.\nFor example:\n\n...\n\t-- job_desc.environment is only available for batch jobs.\n\tif (job_desc.script) then\n\t\tif (job_desc.environment ~= nil) then\n\t\t\tif (job_desc.environment[\"FOO\"] ~= nil) then\n\t\t\t\tslurm.log_user(\"Found env FOO=%s\",\n\t\t\t\t\t       job_desc.environment[\"FOO\"])\n\t\t\tend\n\t\tend\n\tend\n...\n\nNOTE: To get/set the environment for all types of jobs, an alternate\napproach is to use CliFilterPlugins.\n\nint slurm_job_submit(job_desc_msg_t *job_desc, List part_list, uint32_t\nsubmit_uid)\nDescription:\nThis function is called by the slurmctld daemon with the job submission\nparameters supplied by the user regardless of the command used (e.g.\nsalloc, sbatch, slurmrestd). Only explicitly\ndefined values will be represented. For values not defined at submit time\nslurm.NO_VAL/16/64 or\nnil will be set. It can be used to log and/or\nmodify the job parameters supplied by the user as desired. Note that this\nfunction has access to the slurmctld's global data structures, for example\nto examine the available partitions, reservations, etc.\nArguments: \njob_desc\n(input/output) the job allocation request specifications.\npart_list\n(input) List of pointer to partitions which this user is authorized to use.\nsubmit_uid\n(input) user ID initiating the request.\nReturns: \nslurm.SUCCESS \u2014\nJob submission accepted by plugin.\nslurm.FAILURE \u2014\nJob submission rejected due to error (Deprecated in 19.05).\nslurm.ERROR \u2014\nJob submission rejected due to error.\nslurm.ESLURM_* \u2014\nJob submission rejected due to error as defined by\nslurm/slurm_errno.h and src/common/slurm_errno.c.\nNOTE: As job_desc contains only\nuser-specified values, undefined values can be recognized (before defaults\nare set) by either checking for nil or for\nthe corresponding slurm.NO_VAL/16/64. This\nallows sites to apply policies, such as requiring users to define the number\nof nodes, as in the example below:\n\n...\n\t-- Number of nodes must be defined at submit time\n\tif (job_desc.max_nodes == slurm.NO_VAL) then\n\t\tslurm.log_user(\"No max_nodes specified, please specify a number of nodes\")\n\t\treturn slurm.ERROR\n\tend\n...\n\n\nint slurm_job_modify(job_desc_msg_t *job_desc, job_record_t *job_ptr,\nList part_list, int modify_uid)\nDescription:\nThis function is called by the slurmctld daemon with job modification parameters\nsupplied by the user regardless of the command used (e.g. scontrol, sview,\nslurmrestd). It can be used to log and/or\nmodify the job parameters supplied by the user as desired. Note that this\nfunction has access to the slurmctld's global data structures, for example to\nexamine the available partitions, reservations, etc.\nArguments: \njob_desc\n(input/output) the job allocation request specifications.\njob_ptr\n(input/output) slurmctld daemon's current data structure for the job to\nbe modified.\npart_list\n(input) List of pointer to partitions which this user is authorized to use.\nmodify_uid\n(input) user ID initiating the request.\nReturns: \nReturns from job_modify() are the same as the returns from job_submit().\nLua Job Attributes\nThe available job attributes change occasionally with different versions of\nSlurm. To find the job attributes that are available for the version of Slurm\nyou're using, go to the  SchedMD\ngithub page, and navigate to\nsrc/plugins/job_submit/lua/job_submit_lua.c.\n_job_rec_field() contains the list of attributes available for the\njob_record (e.g. current record in Slurm). _get_job_req_field() contains\nthe list of attributes available for the job_descriptor (e.g. submission or\nmodification request).\n\nBuilding\nGenerally using a LUA interface for a job submit plugin is best:\nIt is simple to write and maintain with minimal dependencies upon the Slurm\ndata structures.\nHowever using C does provide a mechanism to get more information than available\nusing LUA including full access to all of the data structures and functions\nin the slurmctld daemon.\nThe simplest way to build a C program would be to just replace one of the\njob submit plugins included in the Slurm distribution with your own code\n(i.e. use a patch with your own code).\nThen just build and install Slurm with that new code.\nBuilding a new plugin outside of the Slurm distribution is possible, but\nfar more complex.\nIt also requires access to a multitude of Slurm header files as shown in the\nprocedure below.\n\nYou will need to at least partly build Slurm first. The \"configure\" command\nmust be executed in order to build the \"config.h\" file in the build directory.\nCreate a local directory somewhere for your files to build with.\nAlso create subdirectories named \".libs\" and \".deps\".\nCopy a \".deps/job_submit_*Plo\" file from another job_submit plugin's \".deps\"\ndirectory (made as part of the build process) into your local \".deps\" subdirectory.\nRename the file as appropriate to reflect your plugins name (e.g. rename\n\"job_submit_partition.Plo\" to be something like \"job_submit_mine.Plo\").\nCompile and link your plugin. Those options might differ depending\nupon your build environment. Check the options used for building the\nother job_submit plugins and modify the example below as required.\nInstall the plugin.\n\n\n# Example:\n# The Slurm source is in ~/SLURM/slurm.git\n# The Slurm build directory is ~/SLURM/slurm.build\n# The plugin build is to take place in the directory\n#   \"~/SLURM/my_submit\"\n# The installation location is \"/usr/local\"\n\n# Build Slurm from ~/SLURM/slurm.build\n# (or at least run \"~/SLURM/slurm.git/configure\")\n\n# Set up your plugin files\ncd ~/SLURM\nmkdir my_submit\ncd my_submit\nmkdir .libs\nmkdir .deps\n# Create your plugin code\nvi job_submit_mine.c\n\n# Copy up a dependency file\ncp ~/SLURM/slurm.build/src/plugins/job_submit/partition/.deps/job_submit_partition.Plo \\\n   .deps/job_submit_mine.Plo\n\n# Compile\ngcc -DHAVE_CONFIG_H -I~/SLURM/slurm.build -I~/slurm.git \\\n   -g -O2 -pthread -fno-gcse -Werror -Wall -g -O0       \\\n   -fno-strict-aliasing -MT job_submit_mine.lo          \\\n   -MD -MP -MF .deps/job_submit_mine.Tpo                \\\n   -c job_submit_mine.c -o .libs/job_submit_mine.o\n\n# Some clean up\nmv -f .deps/job_submit_mine.Tpo .deps/job_submit_mine.Plo\nrm -fr .libs/job_submit_mine.a .libs/job_submit_mine.la \\\n   .libs/job_submit_mine.lai job_submit_mine.so\n\n# Link\ngcc -shared -fPIC -DPIC .libs/job_submit_mine.o -O2         \\\n   -pthread -O0 -pthread -Wl,-soname -Wl,job_submit_mine.so \\\n   -o job_submit_mine.so\n\n# Install\ncp job_submit_mine.so file \\\n   /usr/local/lib/slurm/job_submit_mine.so\n\nLast modified 04 October 2023\n"
        },
        {
            "title": "Lua Functions",
            "content": "The Lua functions differ slightly from those implemented in C for\nbetter ease of use. Sample Lua scripts can be found with the Slurm distribution\nin the directory contribs/lua. The default installation location of\nthe Lua scripts is the same location as the Slurm configuration file,\nslurm.conf.\nReading and writing of job environment variables using Lua is possible\nby referencing the environment variables as a data structure containing\nnamed elements.NOTE: Only sbatch sends the environment to slurmctld. salloc and srun\ndo not send the environment to slurmctld, so job_desc.environment is not\navailable in the job_submit plugin for these jobs.For example:\n...\n\t-- job_desc.environment is only available for batch jobs.\n\tif (job_desc.script) then\n\t\tif (job_desc.environment ~= nil) then\n\t\t\tif (job_desc.environment[\"FOO\"] ~= nil) then\n\t\t\t\tslurm.log_user(\"Found env FOO=%s\",\n\t\t\t\t\t       job_desc.environment[\"FOO\"])\n\t\t\tend\n\t\tend\n\tend\n...\nNOTE: To get/set the environment for all types of jobs, an alternate\napproach is to use CliFilterPlugins.\nint slurm_job_submit(job_desc_msg_t *job_desc, List part_list, uint32_t\nsubmit_uid)\nDescription:\nThis function is called by the slurmctld daemon with the job submission\nparameters supplied by the user regardless of the command used (e.g.\nsalloc, sbatch, slurmrestd). Only explicitly\ndefined values will be represented. For values not defined at submit time\nslurm.NO_VAL/16/64 or\nnil will be set. It can be used to log and/or\nmodify the job parameters supplied by the user as desired. Note that this\nfunction has access to the slurmctld's global data structures, for example\nto examine the available partitions, reservations, etc.\nArguments: \njob_desc\n(input/output) the job allocation request specifications.\npart_list\n(input) List of pointer to partitions which this user is authorized to use.\nsubmit_uid\n(input) user ID initiating the request.\nReturns: \nslurm.SUCCESS \u2014\nJob submission accepted by plugin.\nslurm.FAILURE \u2014\nJob submission rejected due to error (Deprecated in 19.05).\nslurm.ERROR \u2014\nJob submission rejected due to error.\nslurm.ESLURM_* \u2014\nJob submission rejected due to error as defined by\nslurm/slurm_errno.h and src/common/slurm_errno.c.\nNOTE: As job_desc contains only\nuser-specified values, undefined values can be recognized (before defaults\nare set) by either checking for nil or for\nthe corresponding slurm.NO_VAL/16/64. This\nallows sites to apply policies, such as requiring users to define the number\nof nodes, as in the example below:\n\n...\n\t-- Number of nodes must be defined at submit time\n\tif (job_desc.max_nodes == slurm.NO_VAL) then\n\t\tslurm.log_user(\"No max_nodes specified, please specify a number of nodes\")\n\t\treturn slurm.ERROR\n\tend\n...\n\n\nint slurm_job_modify(job_desc_msg_t *job_desc, job_record_t *job_ptr,\nList part_list, int modify_uid)\nDescription:\nThis function is called by the slurmctld daemon with job modification parameters\nsupplied by the user regardless of the command used (e.g. scontrol, sview,\nslurmrestd). It can be used to log and/or\nmodify the job parameters supplied by the user as desired. Note that this\nfunction has access to the slurmctld's global data structures, for example to\nexamine the available partitions, reservations, etc.\nArguments: \njob_desc\n(input/output) the job allocation request specifications.\njob_ptr\n(input/output) slurmctld daemon's current data structure for the job to\nbe modified.\npart_list\n(input) List of pointer to partitions which this user is authorized to use.\nmodify_uid\n(input) user ID initiating the request.\nReturns: \nReturns from job_modify() are the same as the returns from job_submit().\nLua Job Attributes\nThe available job attributes change occasionally with different versions of\nSlurm. To find the job attributes that are available for the version of Slurm\nyou're using, go to the  SchedMD\ngithub page, and navigate to\nsrc/plugins/job_submit/lua/job_submit_lua.c.\n_job_rec_field() contains the list of attributes available for the\njob_record (e.g. current record in Slurm). _get_job_req_field() contains\nthe list of attributes available for the job_descriptor (e.g. submission or\nmodification request).\n\nBuilding\nGenerally using a LUA interface for a job submit plugin is best:\nIt is simple to write and maintain with minimal dependencies upon the Slurm\ndata structures.\nHowever using C does provide a mechanism to get more information than available\nusing LUA including full access to all of the data structures and functions\nin the slurmctld daemon.\nThe simplest way to build a C program would be to just replace one of the\njob submit plugins included in the Slurm distribution with your own code\n(i.e. use a patch with your own code).\nThen just build and install Slurm with that new code.\nBuilding a new plugin outside of the Slurm distribution is possible, but\nfar more complex.\nIt also requires access to a multitude of Slurm header files as shown in the\nprocedure below.\n\nYou will need to at least partly build Slurm first. The \"configure\" command\nmust be executed in order to build the \"config.h\" file in the build directory.\nCreate a local directory somewhere for your files to build with.\nAlso create subdirectories named \".libs\" and \".deps\".\nCopy a \".deps/job_submit_*Plo\" file from another job_submit plugin's \".deps\"\ndirectory (made as part of the build process) into your local \".deps\" subdirectory.\nRename the file as appropriate to reflect your plugins name (e.g. rename\n\"job_submit_partition.Plo\" to be something like \"job_submit_mine.Plo\").\nCompile and link your plugin. Those options might differ depending\nupon your build environment. Check the options used for building the\nother job_submit plugins and modify the example below as required.\nInstall the plugin.\n\n\n# Example:\n# The Slurm source is in ~/SLURM/slurm.git\n# The Slurm build directory is ~/SLURM/slurm.build\n# The plugin build is to take place in the directory\n#   \"~/SLURM/my_submit\"\n# The installation location is \"/usr/local\"\n\n# Build Slurm from ~/SLURM/slurm.build\n# (or at least run \"~/SLURM/slurm.git/configure\")\n\n# Set up your plugin files\ncd ~/SLURM\nmkdir my_submit\ncd my_submit\nmkdir .libs\nmkdir .deps\n# Create your plugin code\nvi job_submit_mine.c\n\n# Copy up a dependency file\ncp ~/SLURM/slurm.build/src/plugins/job_submit/partition/.deps/job_submit_partition.Plo \\\n   .deps/job_submit_mine.Plo\n\n# Compile\ngcc -DHAVE_CONFIG_H -I~/SLURM/slurm.build -I~/slurm.git \\\n   -g -O2 -pthread -fno-gcse -Werror -Wall -g -O0       \\\n   -fno-strict-aliasing -MT job_submit_mine.lo          \\\n   -MD -MP -MF .deps/job_submit_mine.Tpo                \\\n   -c job_submit_mine.c -o .libs/job_submit_mine.o\n\n# Some clean up\nmv -f .deps/job_submit_mine.Tpo .deps/job_submit_mine.Plo\nrm -fr .libs/job_submit_mine.a .libs/job_submit_mine.la \\\n   .libs/job_submit_mine.lai job_submit_mine.so\n\n# Link\ngcc -shared -fPIC -DPIC .libs/job_submit_mine.o -O2         \\\n   -pthread -O0 -pthread -Wl,-soname -Wl,job_submit_mine.so \\\n   -o job_submit_mine.so\n\n# Install\ncp job_submit_mine.so file \\\n   /usr/local/lib/slurm/job_submit_mine.so\n\nLast modified 04 October 2023\n"
        },
        {
            "title": "Lua Job Attributes",
            "content": "The available job attributes change occasionally with different versions of\nSlurm. To find the job attributes that are available for the version of Slurm\nyou're using, go to the  SchedMD\ngithub page, and navigate to\nsrc/plugins/job_submit/lua/job_submit_lua.c.\n_job_rec_field() contains the list of attributes available for the\njob_record (e.g. current record in Slurm). _get_job_req_field() contains\nthe list of attributes available for the job_descriptor (e.g. submission or\nmodification request).\nBuildingGenerally using a LUA interface for a job submit plugin is best:\nIt is simple to write and maintain with minimal dependencies upon the Slurm\ndata structures.\nHowever using C does provide a mechanism to get more information than available\nusing LUA including full access to all of the data structures and functions\nin the slurmctld daemon.\nThe simplest way to build a C program would be to just replace one of the\njob submit plugins included in the Slurm distribution with your own code\n(i.e. use a patch with your own code).\nThen just build and install Slurm with that new code.\nBuilding a new plugin outside of the Slurm distribution is possible, but\nfar more complex.\nIt also requires access to a multitude of Slurm header files as shown in the\nprocedure below.\nYou will need to at least partly build Slurm first. The \"configure\" command\nmust be executed in order to build the \"config.h\" file in the build directory.\nCreate a local directory somewhere for your files to build with.\nAlso create subdirectories named \".libs\" and \".deps\".\nCopy a \".deps/job_submit_*Plo\" file from another job_submit plugin's \".deps\"\ndirectory (made as part of the build process) into your local \".deps\" subdirectory.\nRename the file as appropriate to reflect your plugins name (e.g. rename\n\"job_submit_partition.Plo\" to be something like \"job_submit_mine.Plo\").\nCompile and link your plugin. Those options might differ depending\nupon your build environment. Check the options used for building the\nother job_submit plugins and modify the example below as required.\nInstall the plugin.\n\n# Example:\n# The Slurm source is in ~/SLURM/slurm.git\n# The Slurm build directory is ~/SLURM/slurm.build\n# The plugin build is to take place in the directory\n#   \"~/SLURM/my_submit\"\n# The installation location is \"/usr/local\"\n\n# Build Slurm from ~/SLURM/slurm.build\n# (or at least run \"~/SLURM/slurm.git/configure\")\n\n# Set up your plugin files\ncd ~/SLURM\nmkdir my_submit\ncd my_submit\nmkdir .libs\nmkdir .deps\n# Create your plugin code\nvi job_submit_mine.c\n\n# Copy up a dependency file\ncp ~/SLURM/slurm.build/src/plugins/job_submit/partition/.deps/job_submit_partition.Plo \\\n   .deps/job_submit_mine.Plo\n\n# Compile\ngcc -DHAVE_CONFIG_H -I~/SLURM/slurm.build -I~/slurm.git \\\n   -g -O2 -pthread -fno-gcse -Werror -Wall -g -O0       \\\n   -fno-strict-aliasing -MT job_submit_mine.lo          \\\n   -MD -MP -MF .deps/job_submit_mine.Tpo                \\\n   -c job_submit_mine.c -o .libs/job_submit_mine.o\n\n# Some clean up\nmv -f .deps/job_submit_mine.Tpo .deps/job_submit_mine.Plo\nrm -fr .libs/job_submit_mine.a .libs/job_submit_mine.la \\\n   .libs/job_submit_mine.lai job_submit_mine.so\n\n# Link\ngcc -shared -fPIC -DPIC .libs/job_submit_mine.o -O2         \\\n   -pthread -O0 -pthread -Wl,-soname -Wl,job_submit_mine.so \\\n   -o job_submit_mine.so\n\n# Install\ncp job_submit_mine.so file \\\n   /usr/local/lib/slurm/job_submit_mine.so\nLast modified 04 October 2023"
        }
    ]
}