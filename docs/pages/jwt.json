{
    "url": "https://slurm.schedmd.com/jwt.html",
    "sections": [
        {
            "title": "\n\nSlurm Workload Manager\n\n",
            "content": "\n\nSchedMD\n\n"
        },
        {
            "title": "JSON Web Tokens (JWT) Authentication",
            "content": "Slurm provides a\nRFC7519 compliant\nimplementation of JSON Web Tokens (JWT). This\nauthentication can be used as an AuthAltType, usually alongside\nauth/munge as the AuthType. The only supported communication\ndirection is from a client connecting to slurmctld and slurmdbd.\nThis means that certain scenarios (specifically interactive jobs using\nsrun) are currently not supported for clients with auth/jwt enabled (or\nthat have SLURM_JWT in their environment).Prerequisites\n\nJWT requires libjwt.\nBoth the library and the development headers must be available when Slurm is\ncompiled.Full root trust in JWT creation\n\nThe power to create JWTs is the power of root on a cluster. This is a\nper-site decision on what/who/when/how to trust. If a given authentication\nsystem can not be fully trusted with the powers of root for the entire cluster,\nthen an authenticating proxy will need to be used to divide up the trust and\nimplement the site's specific policies before the requests reach Slurm\n(specifically slurmrestd). While possibly inefficient, there is no technical\nreason that tiers of authenticating proxies can not be used if there is a lack\nof trust but a desire to allow creation of lesser auth tokens. Each site will\nneed to weight the risks and benefits of which JWTs to trust before implementing\nany system. Once a job has been queued, the proxied authentication system will\nno longer be involved and the job will run with that user's permissions and\naccess per Linux/POSIX's ACLs and trusts.Models of trust\n\nThere are several ways to handle controlling JWT authentication and access.\nSlurm JWT plugin implementation is purposefully simple and will not be able to\nsupport most models of trust needed by sites. There already exists a plethora of\nauthentication systems, and the expectation is that any site that wants more\ncomplexity than the default offering will use one of those systems instead.\nExternal JWT generation\nWe provide an example python script for generating new JWTs but they are a\nstandard and most languages have existing tooling for them. This is usually the\neasiest route for sites but does require each site to implement the tooling for\ntheir users directly.\nAuthenticating proxy\nThis is the most versatile option, as any authentication system can be\nplaced in front of slurmrestd. It requires creating a slurmuser/root token that\ncan then be used to proxy for any user. There are existing solutions for this\nwith Nginx and Apache, and probably every other non-trivial proxy. We suggest\nchoosing the preferred proxy and finding an existing setup guide for\nauthenticating via that proxy. The proxy will need to have the\nX-SLURM-USER-TOKEN and X-SLURM-USER-NAME headers defined.\nThere is no requirement that an authenticating proxy implement JWT for\nclients. This is the primary benefit of authenticating proxies; they can use\nany authentication method since they are the trusted point that tells Slurm\nwhich user the request is from. These authentication tokens are only used by\nthe proxy and are not passed to the job. This is generally not an\nissue as once the job is in Slurm, it runs as the Posix user with all of the\ninherent trust of that user and it then uses auth/munge or\nauth/slurm for everything after that.\nJWKS\nThis is like an authentication proxy, as another system is used to create the\ntokens, but it skips having the authentication system in front of Slurm by using\nsigned public keys. This tends to be the preferred solution for sites using\ncloud authentication systems, such as:\n\n\nAmazon Cognito\nKeycloak - Using keycloak is an\noption which doesn't require a cloud auth solution.\n\n\nSetup for Standalone Use\n\n\n\n    Configure and build Slurm with JWT support\nAdd JWT key to controller in StateSaveLocation.\nHere is an example with the JWT key in /var/spool/slurm/statesave/:\n\ndd if=/dev/random of=/var/spool/slurm/statesave/jwt_hs256.key bs=32 count=1\nchown slurm:slurm /var/spool/slurm/statesave/jwt_hs256.key\nchmod 0600 /var/spool/slurm/statesave/jwt_hs256.key\nchown slurm:slurm /var/spool/slurm/statesave\nchmod 0755 /var/spool/slurm/statesave\n\nThe key does not have to be in the StateSaveLocation, but that is a convenient\nlocation if you have multiple controllers since it is shared between them.\nThe key should not be placed in a directory where non-admin users might be\nable to access it.\nThe key file should be owned by SlurmUser or root, with\nrecommended permissions of 0400. The file must not be accessible by 'other'.\n\nAdd JWT as an alternative authentication in slurm.conf and slurmdbd.conf:\n\nAuthAltTypes=auth/jwt\nAuthAltParameters=jwt_key=/var/spool/slurm/statesave/jwt_hs256.key\n\n\nRestart slurmctld\nCreate tokens for users as desired:\n\nscontrol token username=$USER\n\nAn optional lifespan=$LIFESPAN option can be used to change the token\nlifespan from the default 1800 seconds. The root account, or SlurmUser\naccount can be used to generate tokens for any user. Alternatively, a user\nmay use the command to generate tokens for themselves by simply calling\n\nscontrol token\n\nNote that administrators can prevent users from generating tokens by setting\nthe following parameter in slurm.conf:\n\nAuthAltParameters=disable_token_creation\n\nThis functionality is provided to allow sites to control when and how users are\nprovided tokens along with controlling the token lifespans.\n\nExport the SLURM_JWT environment variable before calling any Slurm\ncommand.\nExport the SLURM_JWT=daemon environment variable before starting\nthe slurmrestd daemon to activate AuthAltTypes=auth/jwt as the primary\nauthentication mechanism.\n\nExternal Authentication Integration with JWKS and RS256 Tokens\n\nStarting with the 21.08 release, Slurm can support RS256 tokens such as\nthose generated by\nAmazon Cognito,\nAzure AD, or\nKeycloak.\nTo enable Slurm's RS256 token support, an appropriate JWKS file must be\ndownloaded and configured as such:\n\nAuthAltTypes=auth/jwt\nAuthAltParameters=jwks=/var/spool/slurm/statesave/jwks.json\n\nThe jwks file should be owned by SlurmUser or root, must be\nreadable by SlurmUser, with recommended permissions of 0400.\nThe file must not be writable by 'other'.Note that, by default, the built-in ability to generate HS256 tokens will\nbe disabled when JWKS support is enabled. It can be re-enabled by explicitly\nconfiguring the jwt_key= option alongside jwks=.\nNote: Slurm ignores the x5c and x5t fields and does not\nattempt to verify the certificate chain if presented in the JWKS file. JWTs are\nonly verified against RSA 256 bit keys provided via e and\nn fields.\nJWKS has signing keys that receive trust by being placed in the\njwks.json. Those trusted keys can then create new tokens (which are JWTs) for\nany user by signing them. JWKS does not support adding keys for individual\nusers but only for adding trusted signing keys.\nJWT and JWKS can coexist in Slurm. Slurm will auto-disable JWT when\nJWKS is configured as a safety mechanism, to avoid accidentally having both\nenabled at the same time.\nUser Mapping\nDepending on the service used to generate tokens, you may run into issues\nmapping the token to a username. Slurm defaults to using the sun\n(Slurm UserName) field. If the service uses a different field, you will need to\ncorrect this for it to work with Slurm.Option 1: Change Slurm to use a different field. This can be\ncustomized using \nAuthAltParameters=userclaimfield. For example, using the default field\nfor KeyCloak:\n\nAuthAltParameters=jwks=/local/path/to/jwks.json,userclaimfield=preferred_username\n\nOption 2: Change the identity service to use a different field. In\nKeyCloak 25.0, for example, you should find this option under Clients ->\nClient details -> Dedicated scopes -> Mapper details. Change the username\nmapping to use the sun field.Compatibility\n\nRFC7519\nRequired tokens for Slurm are present:\n\t\niat: Unix timestamp of creation date.\nexp: Unix timestamp of expiration date.\nsun or username: Slurm UserName (\n\t\t\t\n\t\t\t\tPOSIX.1-2017 User Name\n\t\t\t).\n\t\t\n\n\nTokens are signed with HS256 algorithm compliant to RFC7518. RS256 is also\n\tsupported to verify tokens, although Slurm cannot create them\n\tdirectly.\nSigning key is provided to slurmctld and slurmdbd to allow decryption of\n\tthe tokens. Slurm currently only supports a single signing key.\n\n#!/usr/bin/env python3\nimport sys\nimport os\nimport pprint\nimport json\nimport time\nfrom datetime import datetime, timedelta, timezone\n\nfrom jwt import JWT\nfrom jwt.jwa import HS256\nfrom jwt.jwk import jwk_from_dict\nfrom jwt.utils import b64decode,b64encode\n\nif len(sys.argv) != 3:\n    sys.exit(\"gen_jwt.py [user name] [expiration time (seconds)]\");\n\nwith open(\"/var/spool/slurm/statesave/jwt.key\", \"rb\") as f:\n    priv_key = f.read()\n\nsigning_key = jwk_from_dict({\n    'kty': 'oct',\n    'k': b64encode(priv_key)\n})\n\nmessage = {\n    \"exp\": int(time.time() + int(sys.argv[2])),\n    \"iat\": int(time.time()),\n    \"sun\": sys.argv[1]\n}\n\na = JWT()\ncompact_jws = a.encode(message, signing_key, alg='HS256')\nprint(\"SLURM_JWT={}\".format(compact_jws))\n\n#!/usr/bin/env python3\nimport sys\nimport os\nimport pprint\nimport json\nimport time\nfrom datetime import datetime, timedelta, timezone\n\nfrom jwt import JWT\nfrom jwt.jwa import HS256\nfrom jwt.jwk import jwk_from_dict\nfrom jwt.utils import b64decode,b64encode\n\nif len(sys.argv) != 2:\n    sys.exit(\"verify_jwt.py [JWT Token]\");\n\nwith open(\"/var/spool/slurm/statesave/jwt.key\", \"rb\") as f:\n    priv_key = f.read()\n\nsigning_key = jwk_from_dict({\n    'kty': 'oct',\n    'k': b64encode(priv_key)\n})\n\na = JWT()\nb = a.decode(sys.argv[1], signing_key, algorithms=[\"HS256\"])\nprint(b)\nLast modified 15 August 2024"
        },
        {
            "title": "Navigation",
            "content": "\nSlurm Workload Manager\nVersion 24.05\n\n\nAbout\n\nOverview\nRelease Notes\n\n\n\nUsing\n\nDocumentation\nFAQ\nPublications\n\n\n\nInstalling\n\nDownload\nRelated Software\nInstallation Guide\n\n\n\nGetting Help\n\nMailing Lists\nSupport and Training\nTroubleshooting\n\n\n"
        }
    ]
}