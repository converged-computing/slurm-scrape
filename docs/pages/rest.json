{
    "url": "https://slurm.schedmd.com/rest.html",
    "sections": [
        {
            "title": "\n\nSlurm Workload Manager\n\n",
            "content": "\n\nSchedMD\n\n"
        },
        {
            "title": "REST API Reference",
            "content": "Slurm provides a\n\t\n\t\tREST API\n\t daemon named slurmrestd. This daemon is designed to allow clients to\n\tcommunicate with Slurm via a REST API (in addition to the command line\n\tinterface (CLI) or C API).\nSee also:\n\nREST API Quick Start Guide\n\nCommon Issues\n\nREST API Implementation Details\nOpenAPI Plugin Release Notes\nREST API Client Guide\n\nStatelessSlurmrestd is stateless as it does not cache or save any state between\nrequests. Each request is handled in a thread and then all of that state is\ndiscarded. Any request to slurmrestd is completely synchronous with the\nSlurm controller (slurmctld or slurmdbd) and is only considered complete once\nthe HTTP response code has been sent to the client. Slurmrestd will hold a\nclient connection open while processing a request. Slurm database commands are\ncommitted at the end of every request, on the success of all API calls in the\nrequest.Sites are strongly encouraged to setup a caching proxy between slurmrestd\nand clients to avoid having clients repeatedly call queries, causing usage to\nbe higher than needed (and causing lock contention) on the controller.Run modesSlurmrestd currently supports two run modes: inet service mode and listening\nmode.Inet Service ModeThe Slurmrestd daemon acts as an\n\n\tInet Service\n treating STDIN and STDOUT as the client. This mode allows clients to use\ninetd, xinetd, or systemd socket activated services and avoid the need to run a\ndaemon on the host at all times. This mode creates an instance for each client\nand does not support reusing the same instance for different clients.Listening ModeThe Slurmrestd daemon acts as a full UNIX service and continuously listens\nfor new TCP connections. Each connection and request are independently\nauthenticated.Configurationdoc/man/man1/slurmrestd.8REST API Quick Start GuidePluginsAs of Slurm 20.11, the REST API uses plugins for authentication and\ngenerating content. As of Slurm-21.08, the OpenAPI plugins are available\noutside of slurmrestd daemon and other slurm commands may provide or accept the\nlatest version of the OpenAPI formatted output. This functionality is provided\non a per command basis. These plugins can be optionally listed or selected via\ncommand line arguments as described in the \nslurmrestd documentation.Plugin life cycle\n\nPlugins provided upstream with Slurm in any release are considered supported\nby that release. In general, only the latest versioned plugins will receive\nminor bug fixes but all will receive security fixes. Due to the nature of the\nplugins, one plugin can be supported across multiple Slurm releases to ensure\n(limited) backward client compatibility. SchedMD is currently only explicitly\ndeprecating plugins per the\n\nOpenAPI standard method of setting \"Deprecated: True\"\nin the method path. Any plugin that is not marked as deprecated will\ncontinue to exist in the next Slurm Major release pending any critical issues\nwhich will be announced separately. Any plugin marked for deprecation will be\nremoved on the next Slurm major release. In general, the last three plugins\nhave been retained in each Slurm major release with the oldest getting marked\nas deprecated.\nSites are always encouraged to use the latest stable plugin version\navailable for code development. There is no guarantee of compatibility\nbetween different versions of the same plugin with clients. Clients should\nalways make sure to validate their code when migrating to newer versions of\nplugins. Plugin versions will always be included in the path for every method\nprovided by a given plugin to ensure no two plugins will provide the same\npath.As the plugins utilize the Slurm API internally, plugins that existed in\nprevious versions of Slurm should continue to be able to communicate with the\ntwo previous versions of Slurm, similar to other components of Slurm. Newer\nplugins may have required RPC changes which will exclude them from working with\nprevious Slurm versions. For instance, the openapi/dbv0.0.36 plugin will not be\nable to communicate with any slurmdbd servers prior to the slurm-20.11\nrelease.As with all other plugins in Slurm, sites are more than welcome to write\ntheir own plugins and are suggested to submit them as code contributions via\nbugzilla, tagged as a contribution.\nThe plugin API provided may change between releases which could cause site\nspecific plugins to break.SecurityThe Slurm REST API is written to provide the necessary functionality for\nclients to control Slurm using REST commands. It is not designed to be\ndirectly internet facing. Only unencrypted and uncompressed HTTP communications\nare supported. Slurmrestd also has no protection against man in the middle or\nreplay attacks. Slurmrestd should only be placed in a trusted network that will\ncommunicate with a trusted client.Any site wishing to expose Slurm REST API to the internet or outside of the\ncluster should at the very least use a proxy to wrap all communications with\nTLS v1.3 (or later). You should also add monitoring to reject any client who\nrepeatedly attempts invalid logins at either the network perimeter firewall or\nat the TLS proxy. Any client filtering that can be done via a proxy is\nsuggested to avoid common internet crawlers from talking to slurmrestd and\nwasting system resource or even causing higher latency for valid clients.\nSites are recommended to use shorter lived JWT tokens for clients and renew\noften, possibly via non-Slurm JWT generator to avoid having to enforce JWT\nlifespan limits. It is also suggested that sites use an authenticating proxy\nto handle all client authentication against the sites preferred Single Sign\nOn (SSO) provider instead of Slurm scontrol generated tokens. This will\nprevent any unauthenticated client from connecting to slurmrestd.The Slurm REST API is an HTTP server and all general possible precautions\nfor security of any web server should be applied. As these precautions are site\nspecific, it is highly recommended that you work with your site's security\ngroup to ensure all policies are enforced at the proxy before connecting to\nslurmrestd.Slurm tries not to give potential attackers any hints when there are\nauthentication failures. This results in the client getting this rather terse\nmessage: Authentication failure. When this happens, take a look at\nthe logs for the relevant Slurm daemon (i.e. slurmdbd, slurmctld\nor slurmd) for information about the actual issue.JSON Web Token (JWT) Authentication\n\nslurmrestd supports using JWT to authenticate users.\nJWT can be used to authenticate user over REST protocol.\n\nUser Name Header: X-SLURM-USER-NAME\nJWT Header: X-SLURM-USER-TOKEN\n\nSlurmUser or root can provide alternative user names to act as a proxy for the\ngiven user. While using JWT authentication, slurmrestd should be run as a\nunique, unprivileged user and group. Slurmrestd should be provided an\ninvalid SLURM_JWT environment variable at startup to activate JWT authentication.\nThis will allow users to provide their own JWT tokens while authenticating to\nthe proxy and ensuring against any possible accidental authorizations.When using JWT, it is important that AuthAltTypes=auth/jwt be\nconfigured in your slurm.conf for slurmrestd.Local Authentication\n\nslurmrestd supports using UNIX domain sockets to have the kernel\nauthenticate local users. By default, slurmrestd will not start as root or\nSlurmUser or if the user's primary group belongs to root or SlurmUser.\nSlurmrestd must be located in the Munge security domain in order to function\nand communicate with Slurm in local authentication mode.\nAuthenticating Proxy\n\nThere is a wide array of authentication systems that a site could choose\nfrom, if using JWT authentication doesn't meet your\nrequirements. An authenticating proxy is setup with a JWT token assigned to\nthe SlurmUser that can then be used to proxy for any user on the cluster.\nThis ability is only allowed for SlurmUser and the root users, all other\ntokens will only work with their locally assigned users.If using a third-party authenticating proxy, it is expected that it will\nprovide the correct HTTP headers (X-SLURM-USER-NAME and\nX-SLURM-USER-TOKEN) to slurmrestd along with the user's request.Slurm places no requirements on the authenticating proxy beyond its being\nHTTP 1.1 compliant and that it provides the correct HTTP headers to allow\nclient authentication. Slurm will explicitly trust the HTTP headers provided\nand has no way to verify them (beyond the proxy's trusted token\nX-SLURM-USER-TOKEN). Any authenticating proxy will need to follow\nyour site's security policies and ensure that the proxied requests come from\nthe correct user. These requirements are standard to any authenticated\nproxy and are not Slurm specific.A working trivial example can be found in an \ninternal tool used for testing and training. It uses\nPHP and\nNGINX to provide the authentication logic.\nLast modified 16 March 2023"
        },
        {
            "title": "Navigation",
            "content": "\nSlurm Workload Manager\nVersion 24.05\n\n\nAbout\n\nOverview\nRelease Notes\n\n\n\nUsing\n\nDocumentation\nFAQ\nPublications\n\n\n\nInstalling\n\nDownload\nRelated Software\nInstallation Guide\n\n\n\nGetting Help\n\nMailing Lists\nSupport and Training\nTroubleshooting\n\n\n"
        }
    ]
}