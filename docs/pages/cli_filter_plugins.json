{
    "url": "https://slurm.schedmd.com/cli_filter_plugins.html",
    "sections": [
        {
            "title": "\n\nSlurm Workload Manager\n\n",
            "content": "\n\nSchedMD\n\n"
        },
        {
            "title": "cli_filter Plugin API",
            "content": "OverviewThis document describes Slurm cli_filter plugins and the API that\ndefines them. It is intended as a resource to programmers wishing to write\ntheir own Slurm cli_filter plugins. The purpose of the cli_filter plugins is to provide programmatic hooks\nduring the execution of the salloc, sbatch, and srun\ncommand line interface (CLI) programs. Three hooks are defined:\n\ncli_filter_p_setup_defaults \u2014\nCalled before any option processing is done,\nper job component, allowing a plugin to replace default option\nvalues.\ncli_filter_p_pre_submit \u2014\nCalled after option processing per job\ncomponent but before any communication\nis made with the slurm controller. This location\nis ideal for policy enforcement because the plugin can read all the options\nsupplied by the user (as well as the environment) - thus invalid job requests\ncan be stopped before they ever reach the slurmctld.\ncli_filter_p_post_submit \u2014\nCalled after the jobid (and, in the case of\nsrun, after the stepid) is generated, and typically before or in\nparallel with job execution.  In combination with data collected in the\ncli_filter_p_pre_submit() hook, this is an ideal location for logging\nactivity.\n\ncli_filter plugins vary from the job_submit\nplugin as it is entirely executed client-side, whereas job_submit is\nprocessed server-side (within the slurm controller). The benefit of the\ncli_filter is that it has access to all command line options in a simple and\nconsistent interface as well as being safer to run disruptive operations\n(e.g., quota checks or other long running operations you might want to use\nfor integrating policy decisions), which can be problematic if run from the\ncontroller. The disadvantage of the cli_filter is that it must not be relied\nupon for security purposes as an enterprising user can circumvent it simply\nby providing an alternate slurm.conf with the CliFilterPlugins option\ndisabled. If you plan to use the cli_filter for managing policies, you should\nalso configure a job_submit plugin to reinforce those policies.Slurm cli_filter plugins must conform to the\nSlurm Plugin API with the following specifications:const char\nplugin_name[]=\"full\u00a0text\u00a0name\"\n\nA free-formatted ASCII text string that identifies the plugin.\n\nconst char\nplugin_type[]=\"major/minor\"\n\nThe major type must be \"cli_filter.\"\nThe minor type can be any suitable name for the type of job submission package.\nWe include samples in the Slurm distribution for\n\nnone \u2014 An empty plugin with no actions taken, a useful starting\ntemplate for a new plugin.\n\nconst uint32_t plugin_version\nIf specified, identifies the version of Slurm used to build this plugin and\nany attempt to load the plugin from a different version of Slurm will result\nin an error.\nIf not specified, then the plugin may be loaded by Slurm commands and\ndaemons from any version, however this may result in difficult to diagnose\nfailures due to changes in the arguments to plugin functions or changes\nin other Slurm functions used by the plugin.\nSlurm can be configured to use multiple cli_filter plugins if desired,\nhowever the lua plugin will only execute one lua script named \"cli_filter.lua\"\nlocated in the default script directory (typically the subdirectory \"etc\" of\nthe installation directory).\nAPI Functions\nAll of the following functions are required. Functions which are not\nimplemented must be stubbed.\nint init(void)\nDescription:\n  Called when the plugin is loaded, before any other functions are\n  called. Put global initialization here.\nReturns: \nSLURM_SUCCESS on success, or\nSLURM_ERROR on failure.\nvoid fini(void)\nDescription:\n  Called when the plugin is removed. Clear any allocated storage here.\nReturns: None.\nNote: These init and fini functions are not the same as those\ndescribed in the dlopen (3) system library.\nThe C run-time system co-opts those symbols for its own initialization.\nThe system _init() is called before the Slurm\ninit(), and the Slurm\nfini() is called before the system's\n_fini().\nint cli_filter_p_setup_defaults(slurm_opt_t *options, bool early)\nDescription:\nThis function is called by the salloc, sbatch, or srun command line interface\n(CLI) programs shortly before processing any options from the environment,\ncommand line, or script (#SBATCH). The hook may be run multiple times per job\ncomponent, once for an early pass (if implemented by the CLI), and again for\nthe main pass.\nNote that this call is skipped for any srun command run within an existing job\nallocation to prevent settings from overriding the set of options that have been\npopulated for the job based on the job environment.\nThe options and early arguments are meant to be passed to slurm_option_set()\nwhich will set the option if it is in the appropriate pass. Failures to set\nan option may be a symptom of trying to set the option on the wrong pass. Given\nthat you should not return SLURM_ERROR simply because of a failure to set an option.\nArguments: \noptions\n(input) slurm option data structure; meant to be passed to the slurm_option_* API\nwithin src/common/slurm_opt.h.\nearly\n(input) boolean indicating if this is the early pass or not; meant to be passed to\nthe slurm_option_* API within src/common/slurm_opt.h.\nReturns: \nSLURM_SUCCESS on success, or\nSLURM_ERROR on failure, will terminate execution\nof the CLI.\n\nint cli_filter_p_pre_submit(slurm_opt_t *options, int offset)\nDescription:\nThis function is called by the CLI after option processing but before any\ncommunication with the slurmctld is made.  This is after all\ncli_filter_p_setup_defaults()\nhooks are executed (for the current job component), environment variables\nprocessed, command line options and #SBATCH directives interpreted.\ncli_filter_p_pre_submit() is called before any parts of\nthe data structure are rewritten, so it is safe to\nboth read and write or unset any options from the plugin that you desire.\nNote that cli_filter_p_post_submit() cannot safely read (or write) the options,\nso you should save any state for logging in cli_filter_p_post_submit() during\ncli_filter_p_pre_submit(). This function is called once per job component.\nArguments: \noptions\n(input/output) the job allocation request specifications.\noffset\n(input) integer value for the current hetjob offset; should be used as a key when\nstoring data for communication between cli_filter_p_pre_submit() and\ncli_filter_p_post_submit().\nReturns: \nSLURM_SUCCESS on success, or\nSLURM_ERROR on failure, will terminate execution\nof the CLI.\n\nvoid cli_filter_p_post_submit(int offset, uint32_t jobid, uint32_t stepid)\nDescription:\nThis function is called by the CLI after a jobid (and, if srun, a stepid) has\nbeen assigned by the controller.  It is no longer safe to read or write to the\noptions data structure, so it has been removed from this function.  You should\nsave any state you need in cli_filter_p_pre_submit() using het_job_offset as a\nkey, since the function is called separately for every job component, and access\nit here.\nArguments: \noffset\n(input) integer value for the current hetjob offset; should be used as a key\nwhen storing data for communication between cli_filter_p_pre_submit() and\ncli_filter_p_post_submit().\njobid\n(input) job id of the job\nstepid\n(input) step id of the job if appropriate, NO_VAL otherwise\nLUA Interface\nSetting CliFilterPlugins=cli_filter/lua in slurm.conf will allow\nyou to implement the API functions mentioned using Lua language. The file must\nbe named \"cli_filter.lua\" and, similar to the job_submit plugin, it must be\nlocated in the default configuration directory (typically the subdirectory\n\"etc\" of the installation).\nAn example is provided within the source code\n\nhere.\nNOTE: Although available options are defined in the struct\nslurm_opt_t within\nsrc/common/slurm_opt.h, some options might be renamed. The provided\nexample shows a way of displaying the configured options by using\nslurm.json_cli_options(options).\nUser Defaults\nSetting CliFilterPlugins=cli_filter/user_defaults in slurm.conf will\nallow users to define their own defaults for jobs submitted from the machine(s)\nwith the configured file. The plugin looks for the definition file in\n$HOME/.slurm/defaults. It will read each line as a\ncomponent=value pair, where component is any of the\njob submission options available to salloc, sbatch, or srun and\nvalue is a default value defined by the user. The following\nexample would configure each job to have a default name, time limit, amount\nof memory, and error and output files:\n\njob-name=default_name\ntime=10:00\nmem=256\nerror = slurm-%j.errfile\noutput = slurm-%j.logfile\n\nYou can also specify different default settings for jobs based on the\ncommand being used to submit the job and/or the cluster being submitted to.\nThe syntax for this would be:\n<command>:<cluster>:<component>\n<command> could be one of:\n\nsalloc: Jobs submitted with the salloc command.\nsbatch: Jobs submitted with the sbatch command.\nsrun: Jobs submitted with the srun command.\n*: Jobs submitted with any submission command.\n\n<cluster> could be any defined cluster on your system,\nor * to have it match any cluster.\n<component> is any of the job submission options\navailable to salloc, sbatch, or srun.\nThe following example would assign different default partitions based on\nthe command used to submit the job. It would also assign different partitions\nfor jobs submitted with salloc, depending on the cluster being used:\n\nsalloc:cluster1:partition = interactive\nsalloc:cluster2:partition = member\nsbatch:*:partition = high\nsrun:*:partition = short\n\nLast modified 19 February 2024\n"
        },
        {
            "title": "Navigation",
            "content": "\nSlurm Workload Manager\nVersion 24.05\n\n\nAbout\n\nOverview\nRelease Notes\n\n\n\nUsing\n\nDocumentation\nFAQ\nPublications\n\n\n\nInstalling\n\nDownload\nRelated Software\nInstallation Guide\n\n\n\nGetting Help\n\nMailing Lists\nSupport and Training\nTroubleshooting\n\n\n"
        },
        {
            "title": "API Functions",
            "content": "All of the following functions are required. Functions which are not\nimplemented must be stubbed.int init(void)\nDescription:\n  Called when the plugin is loaded, before any other functions are\n  called. Put global initialization here.\nReturns: \nSLURM_SUCCESS on success, or\nSLURM_ERROR on failure.\nvoid fini(void)\nDescription:\n  Called when the plugin is removed. Clear any allocated storage here.\nReturns: None.\nNote: These init and fini functions are not the same as those\ndescribed in the dlopen (3) system library.\nThe C run-time system co-opts those symbols for its own initialization.\nThe system _init() is called before the Slurm\ninit(), and the Slurm\nfini() is called before the system's\n_fini().\nint cli_filter_p_setup_defaults(slurm_opt_t *options, bool early)\nDescription:\nThis function is called by the salloc, sbatch, or srun command line interface\n(CLI) programs shortly before processing any options from the environment,\ncommand line, or script (#SBATCH). The hook may be run multiple times per job\ncomponent, once for an early pass (if implemented by the CLI), and again for\nthe main pass.\nNote that this call is skipped for any srun command run within an existing job\nallocation to prevent settings from overriding the set of options that have been\npopulated for the job based on the job environment.\nThe options and early arguments are meant to be passed to slurm_option_set()\nwhich will set the option if it is in the appropriate pass. Failures to set\nan option may be a symptom of trying to set the option on the wrong pass. Given\nthat you should not return SLURM_ERROR simply because of a failure to set an option.\nArguments: \noptions\n(input) slurm option data structure; meant to be passed to the slurm_option_* API\nwithin src/common/slurm_opt.h.\nearly\n(input) boolean indicating if this is the early pass or not; meant to be passed to\nthe slurm_option_* API within src/common/slurm_opt.h.\nReturns: \nSLURM_SUCCESS on success, or\nSLURM_ERROR on failure, will terminate execution\nof the CLI.\n\nint cli_filter_p_pre_submit(slurm_opt_t *options, int offset)\nDescription:\nThis function is called by the CLI after option processing but before any\ncommunication with the slurmctld is made.  This is after all\ncli_filter_p_setup_defaults()\nhooks are executed (for the current job component), environment variables\nprocessed, command line options and #SBATCH directives interpreted.\ncli_filter_p_pre_submit() is called before any parts of\nthe data structure are rewritten, so it is safe to\nboth read and write or unset any options from the plugin that you desire.\nNote that cli_filter_p_post_submit() cannot safely read (or write) the options,\nso you should save any state for logging in cli_filter_p_post_submit() during\ncli_filter_p_pre_submit(). This function is called once per job component.\nArguments: \noptions\n(input/output) the job allocation request specifications.\noffset\n(input) integer value for the current hetjob offset; should be used as a key when\nstoring data for communication between cli_filter_p_pre_submit() and\ncli_filter_p_post_submit().\nReturns: \nSLURM_SUCCESS on success, or\nSLURM_ERROR on failure, will terminate execution\nof the CLI.\n\nvoid cli_filter_p_post_submit(int offset, uint32_t jobid, uint32_t stepid)\nDescription:\nThis function is called by the CLI after a jobid (and, if srun, a stepid) has\nbeen assigned by the controller.  It is no longer safe to read or write to the\noptions data structure, so it has been removed from this function.  You should\nsave any state you need in cli_filter_p_pre_submit() using het_job_offset as a\nkey, since the function is called separately for every job component, and access\nit here.\nArguments: \noffset\n(input) integer value for the current hetjob offset; should be used as a key\nwhen storing data for communication between cli_filter_p_pre_submit() and\ncli_filter_p_post_submit().\njobid\n(input) job id of the job\nstepid\n(input) step id of the job if appropriate, NO_VAL otherwise\nLUA Interface\nSetting CliFilterPlugins=cli_filter/lua in slurm.conf will allow\nyou to implement the API functions mentioned using Lua language. The file must\nbe named \"cli_filter.lua\" and, similar to the job_submit plugin, it must be\nlocated in the default configuration directory (typically the subdirectory\n\"etc\" of the installation).\nAn example is provided within the source code\n\nhere.\nNOTE: Although available options are defined in the struct\nslurm_opt_t within\nsrc/common/slurm_opt.h, some options might be renamed. The provided\nexample shows a way of displaying the configured options by using\nslurm.json_cli_options(options).\nUser Defaults\nSetting CliFilterPlugins=cli_filter/user_defaults in slurm.conf will\nallow users to define their own defaults for jobs submitted from the machine(s)\nwith the configured file. The plugin looks for the definition file in\n$HOME/.slurm/defaults. It will read each line as a\ncomponent=value pair, where component is any of the\njob submission options available to salloc, sbatch, or srun and\nvalue is a default value defined by the user. The following\nexample would configure each job to have a default name, time limit, amount\nof memory, and error and output files:\n\njob-name=default_name\ntime=10:00\nmem=256\nerror = slurm-%j.errfile\noutput = slurm-%j.logfile\n\nYou can also specify different default settings for jobs based on the\ncommand being used to submit the job and/or the cluster being submitted to.\nThe syntax for this would be:\n<command>:<cluster>:<component>\n<command> could be one of:\n\nsalloc: Jobs submitted with the salloc command.\nsbatch: Jobs submitted with the sbatch command.\nsrun: Jobs submitted with the srun command.\n*: Jobs submitted with any submission command.\n\n<cluster> could be any defined cluster on your system,\nor * to have it match any cluster.\n<component> is any of the job submission options\navailable to salloc, sbatch, or srun.\nThe following example would assign different default partitions based on\nthe command used to submit the job. It would also assign different partitions\nfor jobs submitted with salloc, depending on the cluster being used:\n\nsalloc:cluster1:partition = interactive\nsalloc:cluster2:partition = member\nsbatch:*:partition = high\nsrun:*:partition = short\n\nLast modified 19 February 2024\n"
        },
        {
            "title": "LUA Interface",
            "content": "Setting CliFilterPlugins=cli_filter/lua in slurm.conf will allow\nyou to implement the API functions mentioned using Lua language. The file must\nbe named \"cli_filter.lua\" and, similar to the job_submit plugin, it must be\nlocated in the default configuration directory (typically the subdirectory\n\"etc\" of the installation).\nAn example is provided within the source code\n\nhere.NOTE: Although available options are defined in the struct\nslurm_opt_t within\nsrc/common/slurm_opt.h, some options might be renamed. The provided\nexample shows a way of displaying the configured options by using\nslurm.json_cli_options(options).User DefaultsSetting CliFilterPlugins=cli_filter/user_defaults in slurm.conf will\nallow users to define their own defaults for jobs submitted from the machine(s)\nwith the configured file. The plugin looks for the definition file in\n$HOME/.slurm/defaults. It will read each line as a\ncomponent=value pair, where component is any of the\njob submission options available to salloc, sbatch, or srun and\nvalue is a default value defined by the user. The following\nexample would configure each job to have a default name, time limit, amount\nof memory, and error and output files:\n\njob-name=default_name\ntime=10:00\nmem=256\nerror = slurm-%j.errfile\noutput = slurm-%j.logfile\nYou can also specify different default settings for jobs based on the\ncommand being used to submit the job and/or the cluster being submitted to.\nThe syntax for this would be:\n<command>:<cluster>:<component><command> could be one of:\n\nsalloc: Jobs submitted with the salloc command.\nsbatch: Jobs submitted with the sbatch command.\nsrun: Jobs submitted with the srun command.\n*: Jobs submitted with any submission command.\n<cluster> could be any defined cluster on your system,\nor * to have it match any cluster.<component> is any of the job submission options\navailable to salloc, sbatch, or srun.The following example would assign different default partitions based on\nthe command used to submit the job. It would also assign different partitions\nfor jobs submitted with salloc, depending on the cluster being used:\n\nsalloc:cluster1:partition = interactive\nsalloc:cluster2:partition = member\nsbatch:*:partition = high\nsrun:*:partition = short\nLast modified 19 February 2024"
        }
    ]
}