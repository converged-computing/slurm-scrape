{
    "url": "https://slurm.schedmd.com/rest_clients.html",
    "sections": [
        {
            "title": "\n\nSlurm Workload Manager\n\n",
            "content": "\n\nSchedMD\n\n"
        },
        {
            "title": "REST API Client Writing Guide",
            "content": "Contents\nOpenAPI Specification (OAS)\nOpenAPI Standard Compliance\n\n\t\tOpenAPI Specification (OAS) Documentation\nClient design\nOpenAPI Specification (OAS) changes\nOpenAPI Specification (OAS)\n\nSlurmrestd is compliant with\n\t\n\t\tOpenAPI 3.0.2\n\t.\n\tThe generated OAS can be viewed at the following URLs:\n\n/openapi.json\n/openapi.yaml\n/openapi/v3\nThe generated OAS can be generated directly via calling:\n\nGenerate OAS with only a compiled slurmrestd:\nenv SLURM_CONF=/dev/null slurmrestd --generate-openapi-spec -s slurmctld,slurmdbd -d v0.0.40\n\nGenerate OAS with fully configured Slurm install:\nslurmrestd --generate-openapi-spec -s slurmctld,slurmdbd -d v0.0.40\n\n\nThe OAS is designed to be the primary documentation for the request methods\nand responses including their contents. There are several third party tools\nthat automatically generate documentation against the OAS output listed by\nopenapi.tools.\nAn example of how to generate the docs is \nhere.The generated OpenAPI specification changes depending on the configuration of\nslurmrestd at run time. slurmrestd is a\nframework, and the actual content is provided by plugins, which are optional at\nruntime. However, the specific plugin versions (as noted by the v0.0.XX in the\npaths) will be stable across Slurm versions, if the relevant plugin is still\npresent. Plugin life cycles are described\nhere.OpenAPI Standard Compliance\n\nSlurm attempts to strictly comply with the relevant\n\nOpenAPI standards.\nFor reasons of compatibility, Slurm's OAS is tested against publicly available\nOpenAPI client generators, but Slurm does not directly support any of them as\nthey are outside the control of SchedMD and may change at any time. The goal\nis to comply with the standards, supporting as many clients as possible,\nwithout favoring any one client. Sites are always welcome to write their own\nclients that are OpenAPI compliant. As a rule, SchedMD will debug the HTTP\nsent to and received by slurmrestd but will not directly debug any client\nsource code.\n\nopenapi/v0.0.37:\n\t\t\n\n\t\t\t\t\tv4.x of OpenAPI-generator\n\n\n\t\t\t\t\tv5.x of OpenAPI-generator\n\n\n\nopenapi/v0.0.38:\n\t\t\n\n\t\t\t\t\tv4.x of OpenAPI-generator\n\n\n\t\t\t\t\tv5.x of OpenAPI-generator\n\n\n\nopenapi/v0.0.39:\n\t\t\n\n\t\t\t\t\tv6.x of OpenAPI-generator\n\n\n\nopenapi/dbv0.0.37:\n\t\t\n\n\t\t\t\t\tv4.x of OpenAPI-generator\n\n\n\t\t\t\t\tv5.x of OpenAPI-generator\n\n\n\nopenapi/dbv0.0.38:\n\t\t\n\n\t\t\t\t\tv4.x of OpenAPI-generator\n\n\n\t\t\t\t\tv5.x of OpenAPI-generator\n\n\n\nopenapi/dbv0.0.39:\n\t\t\n\n\t\t\t\t\tv6.x of OpenAPI-generator\n\n\n\nOpenAPI Specification (OAS) Documentation\n\nSlurm includes example generated documentation,\nprovided with each release. Slurm's documentation only includes the latest\nplugins to encourage sites to develop against the latest plugins, as they\nwill have the longest lifespan and, by extension, the new clients will continue\nto work for longer. Plugin life cycles are described\nhere. This documentation is\ngenerated via the following steps using\n\n\tOpenAPI-generator HTML output:\nGenerate OAS:\n\nenv SLURM_CONF=/dev/null slurmrestd --generate-openapi-spec -s slurmctld,slurmdbd -d v0.0.40 > openapi.json\n\n\nGenerate documentation:\n\nopenapi-generator-cli generate -i openapi.json -g html -o rest_api_docs\n\n\nPoint browser to rest_api_docs/index.html\nSwagger provides a web editor\nto view and interact with the generated OAS. It makes generating clients and\ndocumentation via\nSwagger Codegen\nrelatively simple.\nClient Design\n\nClients should always be generated against or designed to work with specific\nversions of the tagged paths from slurmrestd.\nClient developers are strongly encouraged to not include functionality for\nversions of methods not intended for use.\nClient developers need to plan how to gracefully handle changes between\ndifferent Slurm versions if they plan to support multiple versions.\nSlurm's method of versioning is done explicitly to allow old code to continue\nto work with newer Slurm releases while that older version is still\nsupported. For example, v0.0.38 methods were added in Slurm-22.05 but can be\nused until Slurm-24.05. While this works, these methods will not get any new\nfeatures or functionality, but generally only security fixes. Slurm will get\nseveral new features every release, and those changes are then reflected by the\nchanges in the new plugin version. A client wishing to use the new features will\nhave to move to the newer version as new features will not be backported.Using an OpenAPI schema generated for just one version is\nadvised. Many of the OpenAPI client generators have a way to strip out the\nversion tag from the struct names (i.e. V0039AccountFlagsDELETED\n-> AccountFlagsDELETED). This could allow for a set of\nunversioned base code could be created and then adjusted for material changes\nin the outputted code with newer Slurm versions. Having a strongly typed\nlanguage can help with this considerably. Generally, only parts of the schema\nchange between different versions for specific endpoints, although looking at\na diff of them can be intimidating even if using something like\njson-diff. Another option is\nhaving wrappers to account for version differences in the same fashion as many\nc libraries account for differences between Windows and Linux.The generated OpenAPI schema can change, depending on which plugins are\npresent, but the versioned paths and their schemas will not (with limited\nexceptions). As such, generating a schema limited to only v0.0.40\nand placing it in your repo should result in a schema that can be used in\nSlurm-23.11 to Slurm-25.05. In general, regenerating the client code and OpenAPI\nschema will be counter-productive, as even the OpenAPI generators themselves can\ngenerate different results for the same OpenAPI specification between their\nversions. The same driver code would likely not even compile even though\nnothing about the server has changed. An example of this\nspecific type of issue can be found\n\nhere.Developers may want to consider having a somewhat static set of compiled\nclient code in your client's code repository. That code will then only need to\nbe updated for revisions inside of the tagged versions, which are generally\nquite rare. That will remove the need for end users to run the code generators\nand limit the chances of any change disrupting your workflow.\nIt will also allow you to plan for upgrades at a convenient time rather than\nhaving to ensure compatibility of multiple permutations at all times.Developers should be aware that older versions of the versioned plugins are\nremoved from Slurm in a documented cadence as given\nhere.\nClients will need to be upgraded once the relevant plugins versions are removed\nto continue to communicate with slurmrestd.If slurmrestd compiles, then all of it will compile. Run time args to\nslurmrestd and slurm.conf will, however, change the output of OAS. For instance,\nif slurmdbd accounting is not configured then the /slurmdb/ paths\nwill automatically not be included as there is an invalid prerequisite\nfor them. A client that queries them will get a 404 error. Slurmrestd can and\nshould be told to load the minimal number of plugins too (via -d and -s)\nwhich will also change which paths are present and thus included in the OAS. To\nslurmrestd, the OAS is just a form of documentation and doesn't have any\nbearing to how it functions. A client could be generated with many paths that\nthe current running slurmrestd does not have loaded. That client will just get\n404 errors for those queries and should try to avoid them via internal logic.\nThe client only needs to have a matching OAS for the paths/endpoints that client\nwill actually query. Since all endpoints in slurmrestd are versioned, there is\nan automatic guarantee they will work (if present) as though the client is\nquerying the original slurmrestd it used to generate the original OAS it was\ncompiled against. If a path of the same version does not behave the same, then\nthat is a bug, and we kindly ask that a\nticket be opened so we can fix it.There are very limited situations where slurmrestd will generate an OAS with\nthe same endpoint having different functionalities.\n\nIf the specification is somehow fundamentally broken so that it violates the\nOpenAPI standard. Slurm has test units to try catch this but those tests are\nnot perfect.\nA new field or path has been added. This should never break a client as\nclients should ignore unknown fields in JSON/YAML.\nOpenAPI Specification (OAS) changes\n\nChanges to the OAS are always listed with every release in the\nOpenAPI Release Notes.A simple trick to see the differences between versions is to query both and\nthen mask the newer one, to avoid having diff list out every version tag that\nchanged:\n\nenv SLURM_CONF=/dev/null slurmrestd -d v0.0.41 -s slurmdbd,slurmctld --generate-openapi-spec > /tmp/v41.json\nenv SLURM_CONF=/dev/null slurmrestd -d v0.0.40 -s slurmdbd,slurmctld --generate-openapi-spec > /tmp/v40.json\ncat /tmp/v41.json | sed -e 's#v0.0.41#v0.0.40#g' > /tmp/v41_masked.json\nvimdiff /tmp/v40.json /tmp/v41_masked.json\njsondiff /tmp/v40.json /tmp/v41_masked.json\nSometimes this trick still produces too much change in the diff output to be\nuseful. In those cases, selecting a specific (sub)schema can be helpful:\n\njq '.components.schemas.\"v0.0.40_job\"' /tmp/v40.json > /tmp/v40_job.json\njq '.components.schemas.\"v0.0.40_openapi_job_info_resp\".properties.jobs.items' /tmp/v41_masked.json > /tmp/v41_masked_job.json\nvimdiff /tmp/v40_job.json /tmp/v41_masked_job.json\nThe generated OpenAPI schemas are very detailed and get more detailed\nevery release as we add more enums, better expose possible values and\nincrease documentation in comments. Even minor changes to tree structure can\nresult in a large number of changes in the generated schema, which can be\nconfusing while looking at diffs. The example above shows the inlining of\nv0.0.40_job into v0.0.40_openapi_job_info_resp.\nDepending on the generated client, that change may not change the\nresultant client code at all.Last modified 24 September 2024"
        },
        {
            "title": "Navigation",
            "content": "\nSlurm Workload Manager\nVersion 24.05\n\n\nAbout\n\nOverview\nRelease Notes\n\n\n\nUsing\n\nDocumentation\nFAQ\nPublications\n\n\n\nInstalling\n\nDownload\nRelated Software\nInstallation Guide\n\n\n\nGetting Help\n\nMailing Lists\nSupport and Training\nTroubleshooting\n\n\n"
        }
    ]
}