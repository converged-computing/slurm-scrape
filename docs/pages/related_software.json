{
    "url": "https://slurm.schedmd.com/related_software.html",
    "sections": [
        {
            "title": "\n\nSlurm Workload Manager\n\n",
            "content": "\n\nSchedMD\n\n"
        },
        {
            "title": "Related Software",
            "content": "Slurm source can be downloaded from\n\nhttps://www.schedmd.com/download-slurm/.Note that the following related software is not written or maintained by\nSchedMD. Some of the software is required for certain functionality\n(e.g. MySQL or MariaDB are required to use slurmdbd) while other software\nwas written to provide additional functionality for users or\nadministrators.\nAuthentication plugins identifies the user originating\na message.\n\nMUNGE (recommended)\nIn order to compile the \"auth/munge\" authentication plugin for Slurm,\nyou will need to build and install MUNGE, available from\nhttps://dun.github.io/munge/ and\nDebian and\nFedora and\nUbuntu.\n\nAuthentication tools for users that work with Slurm.\n\nAUKS\nAUKS is an utility designed to ease Kerberos V credential support addition\nto non-interactive applications, like batch systems (Slurm, LSF, Torque, etc.).\nIt includes a plugin for the Slurm workload manager. AUKS is not used as\nan authentication plugin by the Slurm code itself, but provides a mechanism\nfor the application to manage Kerberos V credentials.\n\nDatabases can be used to store accounting information.\nSee our Accounting web page for more information.\n\n\nMySQL\nMariaDB\n\nDRMAA (Distributed Resource Management Application API)\nPSNC DRMAA for Slurm\nis an implementation of Open Grid Forum\nDRMAA 1.0 (Distributed Resource Management Application API)\nspecification for submission\nand control of jobs to Slurm.\nUsing DRMAA, grid applications builders, portal developers and ISVs can use\nthe same high-level API to link their software with different cluster/resource\nmanagement systems.\nThere is a variant of PSNC DRMAA providing support for Slurm's --cluster option\navailable from\nhttps://github.com/natefoo/slurm-drmaa.\nPerl 6 DRMAA bindings are available from\nhttps://github.com/scovit/Scheduler-DRMAA.\n\nHardware topology\n\n\nPortable Hardware Locality (hwloc)\nNOTE: If you build Slurm or any MPI stack component with hwloc, note\nthat versions 2.5.0 through 2.7.0 (inclusive) of hwloc have a bug that pushes an\nuntouchable value into the environ array, causing a segfault when accessing it.\nIt is advisable to build with hwloc version 2.7.1 or later.\n\nUsed by slurmd and PMIx client to get hardware topology information.\n\n\nHostlist\nA Python program used for manipulation of Slurm hostlists including\nfunctions such as intersection and difference. Download the code from:\n\nhttp://www.nsc.liu.se/~kent/python-hostlist\n\nLua bindings for hostlist functions are also available here:\n\nhttps://github.com/grondo/lua-hostlist\nNOTE: The Lua  hostlist functions do not support the bracketed numeric\nranges anywhere except at the end of the name (i.e. \"tux[0001-0100]\"\nand \"rack[0-3]_blade[0-63]\" are not supported).\nMPI versions supported\n\nIntel MPI\nMPICH (a.k.a. MPICH2 / MPICH2)\nMVAPICH (a.k.a MVAPICH2)\nOpen MPI\n\nCommand wrappers\nThere is a wrapper for Maui/Moab's showq command\nhere.\nScripting interfaces\n\nA Perl interface is included in the Slurm distribution in the\ncontribs/perlapi directory and packaged in the perlapi RPM.\nPySlurm is a\nPython/Cython module to interface with Slurm.\nThere is also a Python module to expand and collect hostlist expressions\navailable \nhere.\n\nSPANK Plugins\nSPANK provides a very generic interface for stackable plug-ins which\nmay be used to dynamically modify the job launch code in Slurm. SPANK\nplugins may be built without access to Slurm source code. They need\nonly be compiled against Slurm\u2018s spank.h header file, added to the\nSPANK config file plugstack.conf, and they will be loaded at runtime\nduring the next job launch. Thus, the SPANK infrastructure provides\nadministrators and other developers a low cost, low effort ability to\ndynamically modify the runtime behavior of Slurm job launch.\nAdditional documentation can be found\nhere.\nNode Health Check\nProbably the most comprehensive and lightweight health check tool out\nthere is\nLBNL Node Health Check.\nIt has integration with Slurm as well as Torque resource managers.\nAccounting Tools\n\nUBMoD is a web based tool for displaying accounting data from various\nresource managers. It aggregates the accounting data from sacct into a MySQL\ndata warehouse and provide a front end web interface for browsing the data.\nFor more information, see the\nUDMod home page and\nsource code.\nXDMoD (XD Metrics on Demand)\nis an NSF-funded open source tool designed to audit and facilitate the utilization\nof the XSEDE cyberinfrastructure by providing a wide range of metrics on XSEDE\nresources, including resource utilization, resource performance, and impact on\nscholarship and research.\n\nSTUBL (Slurm Tools and UBiLities)\nSTUBL is a collection of supplemental tools and utility scripts for Slurm.\nSTUBL home page.\npestat\nPrints a consolidated compute node status line, with one line per node\nincluding a list of jobs.\n\nHome page\n\nGraphical Sdiag\nThe sdiag utility is a diagnostic tool that maintains statistics on Slurm's\nscheduling performance. You can run sdiag periodically or as you modify\nSlurm's configuration. However if you want a historical view of these\nstatistics, you could save them in a time-series database and graph them over\ntime as performed with this tool:\n\n\n  A collection of custom diamond collectors to gather various Slurm statistics\nCollectd\n  (for use with jobmetrics)\n\nJSON\nSome Slurm plugins (slurmrestd,\n\tburst_buffer/datawarp,\n\tburst_buffer/lua,\n\tjobcomp/elasticsearch, and\n\tjobcomp/kafka) parse and/or\n\tserialize JSON format data. These plugins and slurmrestd are designed to\n\tmake use of the JSON-C library (>= v1.12.0) for this purpose.\n\tInstructions for the build are as follows:\n\ngit clone --depth 1 --single-branch -b json-c-0.15-20200726 https://github.com/json-c/json-c.git json-c\nmkdir json-c-build\ncd json-c-build\ncmake ../json-c\nmake\nsudo make install\n\tDeclare the package configuration path before compiling Slurm\n\t(example provided for /bin/sh):\n\t\nexport PKG_CONFIG_PATH=/usr/local/lib/pkgconfig/:$PKG_CONFIG_PATH\n\n\nHTTP Parser\nslurmrestd requires libhttp_parser\n\t(>= v2.6.0). Instructions for the build are as follows:\n\ngit clone --depth 1 --single-branch -b v2.9.4 https://github.com/nodejs/http-parser.git http_parser\ncd http_parser\nmake\nsudo make install\n\tAdd the following argument when running configure for Slurm:\n\t--with-http-parser=/usr/local/\n\n\nYAML Parser\nslurmrestd and commands that recognize a\n\t--yaml flag will be able to parse YAML if libyaml\n\t(>= v0.2.5) is present. Instructions for the build are as follows:\n\t\ngit clone --depth 1 --single-branch -b 0.2.5 https://github.com/yaml/libyaml libyaml\ncd libyaml\n./bootstrap\n./configure\nmake\nsudo make install\n\tAdd the following argument when running configure for Slurm:\n\t--with-yaml=/usr/local/\n\n\nJWT library\nJWT authentication requires libjwt\n\t(>= v1.10.0). Instructions for the build are as follows:\n\ngit clone --depth 1 --single-branch -b v1.12.0 https://github.com/benmcollins/libjwt.git libjwt\ncd libjwt\nautoreconf --force --install\n./configure --prefix=/usr/local\nmake -j\nsudo make install\n\tAdd the following argument when running configure for Slurm:\n\t--with-jwt=/usr/local/\n\nLast modified 13 March 2024"
        },
        {
            "title": "Navigation",
            "content": "\nSlurm Workload Manager\nVersion 24.05\n\n\nAbout\n\nOverview\nRelease Notes\n\n\n\nUsing\n\nDocumentation\nFAQ\nPublications\n\n\n\nInstalling\n\nDownload\nRelated Software\nInstallation Guide\n\n\n\nGetting Help\n\nMailing Lists\nSupport and Training\nTroubleshooting\n\n\n"
        }
    ]
}