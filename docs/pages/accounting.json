{
    "url": "https://slurm.schedmd.com/accounting.html",
    "sections": [
        {
            "title": "\n\nSlurm Workload Manager\n\n",
            "content": "\n\nSchedMD\n\n"
        },
        {
            "title": "Accounting and Resource Limits",
            "content": "Contents\nOverview\nInfrastructure\n\nStorage Backup Host\n\nSlurm JobComp Configuration\nSlurm Accounting Configuration Before Build\nSlurm Accounting Configuration After Build\nSlurmDBD Configuration\n\nSlurmDBD Archive and Purge\n\nMySQL Configuration\nArchive Server\nTools\nDatabase Configuration\nCluster Options\nAccount Options\nUser Options\nLimit Enforcement\nModifying Entities\nRemoving Entities\nOverviewSlurm can be configured to collect accounting information for every\njob and job step executed.\nAccounting records can be written to a simple text file or a database.\nInformation is available about both currently executing jobs and\njobs which have already terminated.\nThe sacct command can report resource usage for running or terminated\njobs including individual tasks, which can be useful to detect load imbalance\nbetween the tasks.\nThe sstat command can be used to status only currently running jobs.\nIt also can give you valuable information about imbalance between tasks.\nThe sreport can be used to generate reports based upon all jobs\nexecuted in a particular time interval.There are three distinct plugin types associated with resource accounting.\nThe Slurm configuration parameters (in slurm.conf) associated with\nthese plugins include:\nAccountingStorageType controls how detailed job and job\nstep information is recorded. You can store this information in a\ntext file or into SlurmDBD.\nJobAcctGatherType is operating system dependent and\ncontrols what mechanism is used to collect accounting information.\nSupported values are jobacct_gather/linux,\njobacct_gather/cgroup and jobacct_gather/none\n(no information collected).\nJobCompType controls how job completion information is\nrecorded. This can be used to record basic job information such\nas job name, user name, allocated nodes, start time, completion\ntime, exit status, etc. If the preservation of only basic job\ninformation is required, this plugin should satisfy your needs\nwith minimal overhead. You can store this information in a text file,\nor MySQL or MariaDB database.\nThe use of sacct to view information about jobs\nis dependent upon AccountingStorageType\nbeing configured to collect and store that information.\nThe use of sreport is dependent upon some database being\nused to store that information.The use of sacct or sstat to view information about resource usage\n  within jobs is dependent upon both JobAcctGatherType and AccountingStorageType\n  being configured to collect and store that information.Storing the accounting information into text files is\nvery simple. Just configure the appropriate plugin (e.g.\nJobCompType=jobcomp/filetxt) and then specify the\npathname of the file (e.g. JobCompLoc=/var/log/slurm/job_completions).\nUse the logrotate or similar tool to prevent the\nlog files from getting too large.\nSend a SIGUSR2 signal to the slurmctld daemon\nafter moving the files, but before compressing them so\nthat new log files will be created.Storing the data directly into a database from Slurm may seem\nattractive, but it requires the availability of user name and\npassword data not only for the Slurm control daemon (slurmctld),\nbut also for user commands which need to access the data (sacct, sreport, and\nsacctmgr).\nMaking potentially sensitive information available to all users makes\ndatabase security more difficult to provide. Sending the data through\nan intermediate daemon can provide better security and performance\n(through caching data). SlurmDBD (Slurm Database Daemon) provides such services.\nSlurmDBD is written in C, multi-threaded, secure and fast.\nThe configuration required to use SlurmDBD will be described below.\nStoring information directly into a database would be similar.Note that SlurmDBD relies upon existing Slurm plugins\nfor authentication and Slurm SQL for database use, but the other Slurm\ncommands and daemons are not required on the host where\nSlurmDBD is installed. Install the slurm and slurm-slurmdbd\nRPMs on the server where SlurmDBD is to run.Note if you switch from using the MySQL plugin to use the SlurmDBD plugin\n  you must make sure the cluster has been added to the database.  The MySQL\n  plugin doesn't require this, but also will not hurt things if you have it\n  there when using the MySQL plugin. You can verify with\nsacctmgr list cluster\nIf the cluster isn't there, add it (where my cluster's name was\nsnowflake):\nsacctmgr add cluster snowflake\nFailure to do so will result in the slurmctld failing to talk to the slurmdbd\nafter the switch.  If you plan to upgrade to a new version of Slurm don't switch\nplugins at the same time or you may get unexpected results.  Do one then the\nother.If SlurmDBD is configured for use but not responding then slurmctld\nwill utilize an internal cache until SlurmDBD is returned to service.\nThe cached data is written by slurmctld to local storage upon shutdown\nand recovered at startup.\nIf SlurmDBD is not available when slurmctld starts, a cache of \nvalid bank accounts, user limits, etc. based upon their state when the \ndaemons were last communicating will be used. \nNote that SlurmDBD must be responding when slurmctld is first started\nsince no cache of this critical data will be available.\nJob and step accounting records generated by slurmctld will be \nwritten to a cache as needed and transferred to SlurmDBD when returned to \nservice. Note that if SlurmDBD is down long enough for the number of queued\nrecords to exceed the maximum queue size then messages will begin to be\ndropped.Infrastructure\n\nWith the SlurmDBD, we are able to collect data from multiple\nclusters in a single location.\nThis does impose some constraints on the user naming and IDs.\nAccounting is maintained by user name (not user ID), but a\ngiven user name should refer to the same person across all\nof the computers.\nAuthentication relies upon user ID numbers, so those must\nbe uniform across all computers communicating with each\nSlurmDBD, at least for users requiring authentication.\nIn particular, the configured SlurmUser must have the\nsame name and ID across all clusters.\nIf you plan to have administrators of user accounts, limits,\netc. they must also have consistent names and IDs across all\nclusters.\nIf you plan to restrict access to accounting records (e.g.\nonly permit a user to view records of his jobs), then all\nusers should have consistent names and IDs.NOTE: By default only lowercase usernames are supported, but you\ncan configure Parameters=PreserveCaseUser in your slurmdbd.conf to\nallow usernames with uppercase characters.The best way to ensure security of the data is by authenticating\ncommunications to the SlurmDBD and we recommend\nMUNGE for that purpose.\nIf you have one cluster managed by Slurm and execute the SlurmDBD\non that one cluster, the normal MUNGE configuration will suffice.\nOtherwise MUNGE should then be installed on all nodes of all\nSlurm managed clusters, plus the machine where SlurmDBD executes.\nYou then have a choice of either having a single MUNGE key for\nall of these computers or maintaining a unique key for each of the\nclusters plus a second key for communications between the clusters\nfor better security.\nMUNGE enhancements are planned to support two keys within a single\nconfiguration file, but presently two different daemons must be\nstarted with different configurations to support two different keys\n(create two key files and start the daemons with the\n--key-file option to locate the proper key plus the\n--socket option to specify distinct local domain sockets for each).\nThe pathname of local domain socket will be needed in the Slurm\nand SlurmDBD configuration files (slurm.conf and slurmdbd.conf\nrespectively, more details are provided below).Whether you use any authentication module or not you will need to have\na way for the SlurmDBD to get UIDs for users and/or admins.  If using\nMUNGE, it is ideal for your users to have the same id on all your\nclusters.  If this is the case you should have a combination of every cluster's\n/etc/passwd file on the database server to allow the DBD to resolve\nnames for authentication.  If using MUNGE and a user's name is not in\nthe passwd file the action will fail.  If not using MUNGE, you should\nadd anyone you want to be an administrator or operator to the passwd file.\nIf they plan on running sacctmgr or any of the accounting tools they\nshould have the same UID, or they will not authenticate correctly.  An\nLDAP server could also serve as a way to gather this information.Storage Backup Host\n\nA backup instance of slurmdbd can be configured by specifying\n\nAccountingStorageBackupHost in slurm.conf, as well as\nDbdBackupHost in\nslurmdbd.conf. The backup host should be on a different machine than the one\nhosting the primary instance of slurmdbd. Both instances of slurmdbd should\nhave access to the same database, share the same munge key(s), and have the\nsame users with the same UID/GIDs. The\nnetwork page has a visual representation\nof how this might look.Slurm JobComp Configuration\n\nPresently job completion is not supported with the SlurmDBD, but can be\nwritten directly to a database, script or flat file. If you are\nrunning with the accounting storage plugin, use of the job completion plugin\nis probably redundant. If you would like to configure this, some of the more\nimportant parameters include:\nJobCompHost:\nOnly needed if using a database. The name or address of the host where\nthe database server executes.\nJobCompLoc:\nOnly needed if using a flat file. Location of file to write the job\ncompletion data to.\nJobCompPass:\nOnly needed if using a database. Password for the user connecting to\nthe database. Since the password can not be securely maintained,\nstoring the information directly in a database is not recommended.\nJobCompPort:\nOnly needed if using a database. The network port that the database\naccepts communication on.\nJobCompType:\nType of jobcomp plugin set to \"jobcomp/mysql\" or \"jobcomp/filetxt\".\nJobCompUser:\nOnly needed if using a database. User name to connect to\nthe database with.\nJobCompParams:\nPass arbitrary text string to job completion plugin.\n\nSlurm Accounting Configuration Before Build\n\nYou can configure SlurmDBD to communicate with a database by using\nAccountingStorageType=accounting_storage/slurmdbd. This allows\nthe creation of user entities called \"associations\", which consist of the\ncluster, a user, account and optionally a partition.MySQL or MariaDB is the preferred database.\nNOTE: If you have an existing Slurm accounting database and\nplan to upgrade your database server to MariaDB 10.2.1 or later from an older\nversion of MariaDB or any version of MySQL, ensure you are running slurmdbd\n22.05.7 or later. These versions will gracefully handle changes to MariaDB\ndefault values that can cause problems for slurmdbd.\nTo enable this database support\none only needs to have the development package for the database they\nwish to use on the system. Slurm uses the InnoDB storage\nengine in MySQL to make rollback possible.  This must be available on your\nMySQL installation or rollback will not work.\n\nThe slurm configure\nscript uses mysql_config to find out the information it needs\nabout installed libraries and headers. You can specify where your\nmysql_config script is with the\n--with-mysql_conf=/path/to/mysql_config option when configuring your\nslurm build.\nOn a successful configure, output is something like this: \n\nchecking for mysql_config... /usr/bin/mysql_config\nMySQL test program built properly.\n\nNOTE: Before running the slurmdbd for the first time, review the\ncurrent setting for MySQL's innodb_buffer_pool_size.\nConsider setting this\nvalue large enough to handle the size of the database. Having this value\ntoo small can be problematic when converting large tables over to the new\ndatabase schema or when purging old records. We recommend assigning a\nsignificant portion of the system memory to this, keeping in mind the other\nresource requirements on the machine running MySQL/MariaDB, somewhere between\n5 and 50 percent of the available memory.\ninnodb_log_file_size Should also be increased from default to reduce\nunnecessary small writes to disk.  For MySQL 8.0.30+,\ninnodb_redo_log_capacity should be used instead.\nWhen using AccountingStoreFlags=job_env,job_script or older SQL servers,\nit is also important to check the value of max_allowed_packet.  When the\npacket size is too small and a large job script is used, the SQL server may\nreject the sql query as being too large.  This value should be at least 16MB,\nand must be larger than the value of max_script_size.\nSetting innodb_lock_wait_timeout to 900 is reccomended to allow some\npotentially extended queries to complete successfully.\n\nSee the following example:\n\n\nmysql> SHOW VARIABLES LIKE 'innodb_buffer_pool_size';\n+-------------------------+------------+\n| Variable_name           | Value      |\n+-------------------------+------------+\n| innodb_buffer_pool_size | 4294967296 |\n+-------------------------+------------+\n1 row in set (0.001 sec)\n\n\n$cat my.cnf\n...\n[mysqld]\ninnodb_buffer_pool_size=4096M\ninnodb_log_file_size=64M\ninnodb_lock_wait_timeout=900\nmax_allowed_packet=16M\n...\n\nAlso, in MySQL versions prior to 5.7 the default row format was set to\nCOMPACT which could cause some issues during an upgrade when creating\ntables. In more recent versions it was changed to DYNAMIC. The row\nformat of a table determines how its rows are physically stored in pages and\ndirectly affects the performance of queries and DML operations. In very specific\nsituations using a format other than DYNAMIC can lead to rows not fitting into\npages and MySQL can throw an error during the creation of the table because of\nthat. Therefore it is recommended to read carefully about the row format before\ncreating your database tables if you are not using DYNAMIC by default, and\nconsider setting that if your database version supports it. If the\nfollowing InnoDB error shows up during an upgrade, the table can then be\naltered (may take some time) to set the row format to DYNAMIC in order to\nallow the conversion to proceed:\n\n[Warning] InnoDB: Cannot add field ... in table ... because after adding it, the row size is Y which is greater than maximum allowed size (X) for a record on index leaf page.\n\nYou can see what the default row format is by showing the\ninnodb_default_row_format variable:\n\nmysql> SHOW VARIABLES LIKE 'innodb_default_row_format';\n+---------------------------+---------+\n| Variable_name             | Value   |\n+---------------------------+---------+\n| innodb_default_row_format | dynamic |\n+---------------------------+---------+\n1 row in set (0.001 sec)\n\nYou can also see how the tables are created by running the following command,\nwhere db_name is the name of your Slurm database (StorageLoc) set in\nyour slurmdbd.conf:\n\nmysql> SHOW TABLE STATUS IN db_name;\n\n\nSlurm Accounting Configuration After Build\n\n\nFor simplicity's sake, we are going to proceed under the assumption that you\nare running with the SlurmDBD. You can communicate with a storage plugin\ndirectly, but that offers minimal security. \nSeveral Slurm configuration parameters must be set to support\narchiving information in SlurmDBD. SlurmDBD has a separate configuration\nfile which is documented in a separate section.\nNote that you can write accounting information to SlurmDBD\nwhile job completion records are written to a text file or\nnot maintained at all.\nIf you don't set the configuration parameters that begin\nwith \"AccountingStorage\" then accounting information will not be\nreferenced or recorded.\n\nAccountingStorageEnforce:\nThis option contains a comma separated list of options you may want to\n enforce.  The valid options are any comma separated combination of\n\nassociations - This will prevent users from running jobs if\ntheir association is not in the database. This option will\nprevent users from accessing invalid accounts.\n\nlimits - This will enforce limits set on associations and qos'.\n  By setting this option, the\n  'associations' option is automatically set.  If a qos is used the\n  limits will be enforced, but 'qos' described below is still needed\n  if you want to enforce access to the qos.\n\nnojobs - This will make it so no job information is stored in\n  accounting.  By setting this 'nosteps' is also set.\n\nnosteps - This will make it so no step information is stored in\n  accounting. Both nojobs and nosteps could be helpful in an\n  environment where you want to use limits but don't really care about\n  utilization.\n\nqos - This will require all jobs to specify (either overtly or by\n  default) a valid qos (Quality of Service).  QOS values are defined for\n  each association in the database.  By setting this option, the\n  'associations' option is automatically set.  If you want QOS limits to be\n  enforced you need to use the 'limits' option.\n\nsafe - This will ensure a job will only be launched when using an\n  association or qos that has a TRES-minutes limit set if the job will be\n  able to run to completion. Without this option set, jobs will be\n  launched as long as their usage hasn't reached the TRES-minutes limit\n  which can lead to jobs being launched but then killed when the limit is\n  reached.\n  With the 'safe' option set, a job won't be killed due to limits,\n  even if the limits are changed after a job was started and the\n  association or qos violates the updated limits.\n  By setting this option, both the 'associations' option and the\n  'limits' option are set automatically.\n\nwckeys - This will prevent users from running jobs under a wckey\n  that they don't have access to.  By using this option, the\n  'associations' option is automatically set.  The 'TrackWCKey' option is also\n  set to true.\n\n\nNOTE: The association is a combination of cluster, account,\nuser names and optional partition name.\n\nWithout AccountingStorageEnforce being set (the default behavior)\njobs will be executed based upon policies configured in Slurm on each\ncluster.\n\nAccountingStorageExternalHost:\nA comma separated list of external slurmdbds (<host/ip>[:port][,...]) to\nregister with. If no port is given, the AccountingStoragePort will be\nused. This allows clusters registered with the external slurmdbd to communicate\nwith each other using the --cluster/-M client command options.\n\nThe cluster will add itself to the external slurmdbd if it doesn't exist.\nIf a non-external cluster already exists on the external slurmdbd, the\nslurmctld will ignore registering to the external slurmdbd.\n\nAccountingStorageHost: The name or address of the host where\nSlurmDBD executes\nAccountingStoragePass: The password used to gain access to the\ndatabase to store the accounting data. Only used for database type storage\nplugins, ignored otherwise. In the case of Slurm DBD (Database Daemon) with\nMUNGE authentication this can be configured to use a MUNGE daemon specifically\nconfigured to provide authentication between clusters while the default MUNGE\ndaemon provides authentication within a cluster. In that case,\nAccountingStoragePass should specify the named port to be used for\ncommunications with the alternate MUNGE daemon\n(e.g. \"/var/run/munge/global.socket.2\"). The default value is NULL.\nAccountingStoragePort:\nThe network port that SlurmDBD accepts communication on.\nAccountingStorageType:\nSet to \"accounting_storage/slurmdbd\".\nClusterName:\nSet to a unique name for each Slurm-managed cluster so that\naccounting records from each can be identified.\nTrackWCKey:\nBoolean.  If you want to track wckeys (Workload Characterization Key)\n  of users.  A Wckey is an orthogonal way to do accounting against possibly\n  unrelated accounts. When a job is run, use the --wckey option to specify a\n  value and accounting records will be collected by this wckey.\n\n\nSlurmDBD Configuration\n\n\nSlurmDBD requires its own configuration file called \"slurmdbd.conf\".\nThis file should be only on the computer where SlurmDBD executes and\nshould only be readable by the user which executes SlurmDBD (e.g. \"slurm\").\nThis file should be protected from unauthorized access since it\ncontains a database login name and password.\nSee slurmdbd.conf(5) for a more complete\ndescription of the configuration parameters.\nSome of the more important parameters include:\n\nAuthInfo:\nIf using SlurmDBD with a second MUNGE daemon, store the pathname of\nthe named socket used by MUNGE to provide enterprise-wide.\nOtherwise the default MUNGE daemon will be used.\nAuthType:\nDefine the authentication method for communications between Slurm\ncomponents. A value of \"auth/munge\" is recommended.\nDbdHost:\nThe name of the machine where the Slurm Database Daemon is executed.\nThis should be a node name without the full domain name (e.g. \"lx0001\").\nThis defaults to localhost but should be supplied to avoid a\nwarning message.\nDbdPort:\nThe port number that the Slurm Database Daemon (slurmdbd) listens\nto for work. The default value is SLURMDBD_PORT as established at system\nbuild time. If none is explicitly specified, it will be set to 6819.\nThis value must be equal to the AccountingStoragePort parameter in the\nslurm.conf file.\nLogFile:\nFully qualified pathname of a file into which the Slurm Database Daemon's\nlogs are written.\nThe default value is none (performs logging via syslog).\nPluginDir:\nIdentifies the places in which to look for Slurm plugins.\nThis is a colon-separated list of directories, like the PATH\nenvironment variable.\nThe default value is the prefix given at configure time + \"/lib/slurm\".\nSlurmUser:\nThe name of the user that the slurmdbd daemon executes as.\nThis user must exist on the machine executing the Slurm Database Daemon\nand have the same UID as the hosts on which slurmctld execute.\nFor security purposes, a user other than \"root\" is recommended.\nThe default value is \"root\". This name should also be the same SlurmUser\non all clusters reporting to the SlurmDBD.\nNOTE: If this user is different from the one set for slurmctld\nand is not root, it must be added to accounting with AdminLevel=Admin and\nslurmctld must be restarted.\n\nStorageHost:\nDefine the name of the host the database is running where we are going\nto store the data.\nIdeally this should be the host on which SlurmDBD executes, but could\nbe a different machine.\nStorageLoc:\nSpecifies the name of the database where accounting\nrecords are written. For databases the default database is\nslurm_acct_db. Note the name can not have a '/' in it or the\ndefault will be used.\nStoragePass:\nDefine the password used to gain access to the database to store\nthe job accounting data.\nStoragePort:\nDefine the port on which the database is listening.\nStorageType:\nDefine the accounting storage mechanism.\nThe only acceptable value at present is \"accounting_storage/mysql\".\nThe value \"accounting_storage/mysql\" indicates that accounting records\nshould be written to a MySQL or MariaDB database specified by the\nStorageLoc parameter.\nThis value must be specified.\nStorageUser:\nDefine the name of the user we are going to connect to the database\nwith to store the job accounting data.\n\nSlurmDBD Archive and Purge\n\n\nAs time goes on, the slurm database can grow large enough that it is hard to\nmanage. To maintain the database at a reasonable size, slurmdbd supports\narchiving and purging data based on its age. Purged data will be deleted from\nthe database, but you can choose to archive the data as it is being purged.\nArchived data will be placed in flat files that can later be loaded into a\nslurmdbd by sacctmgr.\nArchive and Purge options come in the form of Archive${*} and\nPurge${*}After. See slurmdbd.conf(5)\nfor more details on the available configuration parameters.\nThe units for the purge options are important. For example:\nPurgeJobsAfter=12months will purge jobs more than 12 months old at the\nbeginning of each month, while PurgeJobsAfter=365days will purge jobs\nolder than 365 days old at the beginning of each day. This distinction can be\nuseful for very active clusters, reducing the amount of data that needs to be\npurged at one time.\nMySQL Configuration\n\n\nNOTE: If you have an existing Slurm accounting database and\nplan to upgrade your database server to MariaDB 10.2.1 (or newer) from a\npre-10.2.1 version or from any version of MySQL, please contact SchedMD\nfor assistance.\nWhile Slurm will create the database tables automatically you will need to\nmake sure the StorageUser is given permissions in the MySQL or MariaDB database\nto do so.\nAs the mysql user grant privileges to that user using a\ncommand such as:\nGRANT ALL ON StorageLoc.* TO 'StorageUser'@'StorageHost';\n(The ticks are needed)\n(You need to be root to do this. Also in the info for password\nusage there is a line that starts with '->'. This a continuation\nprompt since the previous mysql statement did not end with a ';'. It\nassumes that you wish to input more info.)\nIf you want Slurm to create the database itself, and any future databases,\nyou can change your grant line to be *.* instead of StorageLoc.*\nLive example:\n\nmysql@snowflake:~$ mysql\nWelcome to the MySQL monitor.Commands end with ; or \\g.\nYour MySQL connection id is 538\nServer version: 5.0.51a-3ubuntu5.1 (Ubuntu)\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the buffer.\n\nmysql> create user 'slurm'@'localhost' identified by 'password';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> grant all on slurm_acct_db.* TO 'slurm'@'localhost';\nQuery OK, 0 rows affected (0.00 sec)\n\nYou may also need to do the same with the system name in order\nfor mysql to work correctly:\n\nmysql> grant all on slurm_acct_db.* TO 'slurm'@'system0';\nQuery OK, 0 rows affected (0.00 sec)\nwhere 'system0' is the localhost or database storage host.\n\nor with a password...\n\nmysql> grant all on slurm_acct_db.* TO 'slurm'@'localhost'\n    -> identified by 'some_pass' with grant option;\nQuery OK, 0 rows affected (0.00 sec)\n\nThe same is true in the case, you made to do the same with the \nsystem name:\n\nmysql> grant all on slurm_acct_db.* TO 'slurm'@'system0'\n    -> identified by 'some_pass' with grant option;\nwhere 'system0' is the localhost or database storage host.\n\nVerify you have InnoDB support\n\nmysql> SHOW ENGINES;\n+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+\n| Engine             | Support | Comment                                                        | Transactions | XA   | Savepoints |\n+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+\n| ...                |         |                                                                |              |      |            |\n| InnoDB             | DEFAULT | Supports transactions, row-level locking, and foreign keys     | YES          | YES  | YES        |\n| ...                |         |                                                                |              |      |            |\n+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+\n\nThen create the database:\n\nmysql> create database slurm_acct_db;\n\nThis will grant user 'slurm' access to do what it needs to do on the local\nhost or the storage host system.  This must be done before the SlurmDBD will\nwork properly. After you grant permission to the user 'slurm' in mysql then\nyou can start SlurmDBD and the other Slurm daemons. You start SlurmDBD by\ntyping its pathname '/usr/sbin/slurmdbd' or '/etc/init.d/slurmdbd start'. You\ncan verify that SlurmDBD is running by typing 'ps aux | grep\nslurmdbd'.\n\nIf the SlurmDBD is not running you can\nuse the -v option when you start SlurmDBD to get more detailed\ninformation.  Starting the SlurmDBD in daemon mode with the '-D' option can\nalso help in debugging so you don't have to go to the log to find the\nproblem.\nArchive Server\nIf ongoing access to Archived/Purged data is required at your site, it is\npossible to create an archive instance of slurmdbd.  Data previously archived\nand purged from the production database can be loaded into the archive server,\nkeeping the production database at a manageable size while making sure old\nrecords are still accessible.\nThe archive instance of slurmdbd should not be able to communicate with the\nproduction server. Ideally they would have separate instances of MySQL/MariaDB\nthat they use to store their data. The Slurm controller (slurmctld) should\nnever communicate with the archive slurmdbd.\nWhen configuring an archive server, there are certain database entries\nthat need to match the production server in order for the archived information\nto show up correctly. In order to make sure the unique identifiers match,\nmysqldump should be used to export the Association, QOS and TRES information.\nThe command to export these tables should look like this, with the appropriate\nvalues substituted for <slurm_user>, <db_name>, and\n<cluster>:\n\nmysqldump -u <slurm_user> -p <db_name> <cluster>_assoc_table qos_table tres_table > slurm.sql\n\nWhile mysqldump should be used to transfer the information from these tables,\nit should not be used to transfer information that will be generated with the\nArchive/Purge process. If mysqldump is used to try to get the desired\ninformation, there will likely be a slight difference and when trying to load\narchive files later there will either be a gap in records or duplicate\nrecords that prevent the archive file from loading correctly.\nTools\nSlurm includes a few tools to let you work with accounting data;\nsacct, sacctmgr, and sreport.\nThese tools all get or set data through the SlurmDBD daemon.\n\nsacct is used to retrieve details, stored in the database, about\nrunning and completed jobs.\nsacctmgr is used to manage entities in the database. These include\nclusters, accounts, user associations, QOSs, etc.\nsreport is used to generate various reports on usage collected over a\ngiven time period.\n\nSee the man pages for each command for more information.\nWhile sreport provides the ability to quickly generate reports with some\nof the most commonly requested information, sites frequently want additional\ncontrol over how the information is displayed. There are some third-party tools\nthat can assist in generating dashboards with graphs of relevant information\nabout your cluster. These are not maintained or supported by SchedMD, but these\nutilities have been useful for some sites:\n\n\nGrafana: Allows creation of dashboards with various graphs using data\ncollected by Prometheus or InfluxDB.\nInfluxDB:\nIncludes an exporter tool that collects performance metrics from Slurm.\nPrometheus\n: Includes an exporter tool that collects performance metrics from\nSlurm.\n\nDatabase Configuration\n\n\nAccounting records are maintained based upon what we refer\nto as an Association,\nwhich consists of four elements: cluster, account, user names and\nan optional partition name. Use the sacctmgr\ncommand to create and manage these records.\nNOTE: There is an order to set up accounting associations.\nYou must define clusters before you add accounts and you must add accounts\nbefore you can add users.\nFor example, to add a cluster named \"snowflake\" to the database\nexecute this line\n(NOTE: as of 20.02, slurmctld will add the cluster to the database upon\nstart if it doesn't exist. Associations still need to be created after\naddition):\n\n\nsacctmgr add cluster snowflake\n\nAdd accounts \"none\" and \"test\" to cluster \"snowflake\" with an execute\nline of this sort:\n\nsacctmgr add account none,test Cluster=snowflake \\\n  Description=\"none\" Organization=\"none\"\n\nIf you have more clusters you want to add these accounts, to you\ncan either not specify a cluster, which will add the accounts to all\nclusters in the system, or comma separate the cluster names you want\nto add to in the cluster option.\nNote that multiple accounts can be added at the same time\nby comma separating the names.\nA description of the account and the organization to which\nit belongs must be specified.\nThese terms can be used later to generate accounting reports.\nAccounts may be arranged in a hierarchical fashion. For example, accounts\nchemistry and physics may be children of the account science.\nThe hierarchy may have an arbitrary depth.\nJust specify the parent='' option in the add account line to construct\nthe hierarchy.\nFor the example above execute\n\nsacctmgr add account science \\\n Description=\"science accounts\" Organization=science\nsacctmgr add account chemistry,physics parent=science \\\n Description=\"physical sciences\" Organization=science\n\nAdd users to accounts using similar syntax.\nFor example, to permit user da to execute jobs on all clusters\nwith a default account of test execute:\n\nsacctmgr add user brian Account=physics\nsacctmgr add user da DefaultAccount=test\n\nIf AccountingStorageEnforce=associations is configured in\nthe slurm.conf of the cluster snowflake then user da would be\nallowed to run in account test and any other accounts added\nin the future.\nAny attempt to use other accounts will result in the job being\naborted.\nAccount test will be the default if he doesn't specify one in\nthe job submission command.\nAssociations can also be created that are tied to specific partitions.\nWhen using the \"add user\" command of sacctmgr you can include the\nPartition=<PartitionName> option to create an association that\nis unique to other associations with the same Account and User.\nCluster Options\n\n\nWhen either adding or modifying a cluster, these are the options\navailable with sacctmgr:\n\nName= Cluster name\n\nAccount Options\n\n\nWhen either adding or modifying an account, the following sacctmgr\noptions are available:\n\nCluster= Only add this account to these clusters.\nThe account is added to all defined clusters by default.\nDescription= Description of the account. (Default is\n  account name)\nName= Name of account. Note the name must be unique and can not\nrepresent different bank accounts at different points in the account\nhierarchy\nOrganization=Organization of the account. (Default is\n  parent account unless parent account is root then organization is\n  set to the account name.)\nParent= Make this account a child of this other account\n  (already added).\n\nUser Options\n\n\nWhen either adding or modifying a user, the following sacctmgr\noptions are available:\n\n\nAccount= Account(s) to add user to\nAdminLevel= This field is used to allow a user to add accounting\nprivileges to this user. Valid options are\n\nNone\nOperator: can add, modify, and remove any database object (user,\naccount, etc), and add other operators\nOn a SlurmDBD served slurmctld these users can\n\nView information that is blocked to regular uses by a PrivateData\n  flag\nCreate/Alter/Delete Reservations\n\n\nAdmin: These users have the same level of privileges as an\noperator in the database.  They can also alter anything on a served\nslurmctld as if they were the slurm user or root.\n\nCluster= Only add to accounts on these clusters (default is all clusters)\nDefaultAccount= Default account for the user, used when no account\nis specified when a job is submitted. (Required on creation)\nDefaultWCKey= Default wckey for the user, used when no wckey\nis specified when a job is submitted. (Only used when tracking wckeys.)\nName= User name\nNewName= Use to rename a user in the accounting database\nPartition= Name of Slurm partition this association applies to\n\nLimit Enforcement\n\n\nVarious limits and limit enforcement are described in\n  the Resource Limits web page.\nTo enable any limit enforcement you must at least have\nAccountingStorageEnforce=limits in your slurm.conf.\nOtherwise, even if you have limits set, they will not be enforced.\nOther options for AccountingStorageEnforce and the explanation for\neach are found on the Resource\nLimits document.\nModifying Entities\n\n\nWhen modifying entities, you can specify many different options in\nSQL-like fashion, using key words like where and set.\nA typical execute line has the following form:\n\nsacctmgr modify <entity> set <options> where <options>\n\nFor example:\n\nsacctmgr modify user set default=none where default=test\n\nwill change all users with a default account of \"test\" to account \"none\".\nOnce an entity has been added, modified or removed, the change is\nsent to the appropriate Slurm daemons and will be available for use\ninstantly.\nRemoving Entities\n\n\nRemoving entities using an execute line similar to the modify example above,\nbut without the set options.\nFor example, remove all users with a default account \"test\" using the following\nexecute line:\n\nsacctmgr remove user where default=test\n\nwill remove all user records where the default account is \"test\".\n\nsacctmgr remove user brian where account=physics\n\nwill remove user \"brian\" from account \"physics\". If user \"brian\" has\naccess to other accounts, those user records will remain.\nNote: In most cases, removed entities are preserved in the slurm database,\nbut flagged as deleted.\nIf an entity has existed for less than 1 day, the entity will be removed\ncompletely. This is meant to clean up after typographical errors.\nRemoving user associations or accounts, however, will cause slurmctld to lose\ntrack of usage data for that user/account.\nLast modified 17 July 2024\n"
        },
        {
            "title": "Navigation",
            "content": "\nSlurm Workload Manager\nVersion 24.05\n\n\nAbout\n\nOverview\nRelease Notes\n\n\n\nUsing\n\nDocumentation\nFAQ\nPublications\n\n\n\nInstalling\n\nDownload\nRelated Software\nInstallation Guide\n\n\n\nGetting Help\n\nMailing Lists\nSupport and Training\nTroubleshooting\n\n\n"
        },
        {
            "title": "\nSlurm Accounting Configuration After Build\n\n",
            "content": "For simplicity's sake, we are going to proceed under the assumption that you\nare running with the SlurmDBD. You can communicate with a storage plugin\ndirectly, but that offers minimal security. Several Slurm configuration parameters must be set to support\narchiving information in SlurmDBD. SlurmDBD has a separate configuration\nfile which is documented in a separate section.\nNote that you can write accounting information to SlurmDBD\nwhile job completion records are written to a text file or\nnot maintained at all.\nIf you don't set the configuration parameters that begin\nwith \"AccountingStorage\" then accounting information will not be\nreferenced or recorded.\nAccountingStorageEnforce:\nThis option contains a comma separated list of options you may want to\n enforce.  The valid options are any comma separated combination of\n\nassociations - This will prevent users from running jobs if\ntheir association is not in the database. This option will\nprevent users from accessing invalid accounts.\n\nlimits - This will enforce limits set on associations and qos'.\n  By setting this option, the\n  'associations' option is automatically set.  If a qos is used the\n  limits will be enforced, but 'qos' described below is still needed\n  if you want to enforce access to the qos.\n\nnojobs - This will make it so no job information is stored in\n  accounting.  By setting this 'nosteps' is also set.\n\nnosteps - This will make it so no step information is stored in\n  accounting. Both nojobs and nosteps could be helpful in an\n  environment where you want to use limits but don't really care about\n  utilization.\n\nqos - This will require all jobs to specify (either overtly or by\n  default) a valid qos (Quality of Service).  QOS values are defined for\n  each association in the database.  By setting this option, the\n  'associations' option is automatically set.  If you want QOS limits to be\n  enforced you need to use the 'limits' option.\n\nsafe - This will ensure a job will only be launched when using an\n  association or qos that has a TRES-minutes limit set if the job will be\n  able to run to completion. Without this option set, jobs will be\n  launched as long as their usage hasn't reached the TRES-minutes limit\n  which can lead to jobs being launched but then killed when the limit is\n  reached.\n  With the 'safe' option set, a job won't be killed due to limits,\n  even if the limits are changed after a job was started and the\n  association or qos violates the updated limits.\n  By setting this option, both the 'associations' option and the\n  'limits' option are set automatically.\n\nwckeys - This will prevent users from running jobs under a wckey\n  that they don't have access to.  By using this option, the\n  'associations' option is automatically set.  The 'TrackWCKey' option is also\n  set to true.\n\n\nNOTE: The association is a combination of cluster, account,\nuser names and optional partition name.\n\nWithout AccountingStorageEnforce being set (the default behavior)\njobs will be executed based upon policies configured in Slurm on each\ncluster.\n\nAccountingStorageExternalHost:\nA comma separated list of external slurmdbds (<host/ip>[:port][,...]) to\nregister with. If no port is given, the AccountingStoragePort will be\nused. This allows clusters registered with the external slurmdbd to communicate\nwith each other using the --cluster/-M client command options.\n\nThe cluster will add itself to the external slurmdbd if it doesn't exist.\nIf a non-external cluster already exists on the external slurmdbd, the\nslurmctld will ignore registering to the external slurmdbd.\n\nAccountingStorageHost: The name or address of the host where\nSlurmDBD executes\nAccountingStoragePass: The password used to gain access to the\ndatabase to store the accounting data. Only used for database type storage\nplugins, ignored otherwise. In the case of Slurm DBD (Database Daemon) with\nMUNGE authentication this can be configured to use a MUNGE daemon specifically\nconfigured to provide authentication between clusters while the default MUNGE\ndaemon provides authentication within a cluster. In that case,\nAccountingStoragePass should specify the named port to be used for\ncommunications with the alternate MUNGE daemon\n(e.g. \"/var/run/munge/global.socket.2\"). The default value is NULL.\nAccountingStoragePort:\nThe network port that SlurmDBD accepts communication on.\nAccountingStorageType:\nSet to \"accounting_storage/slurmdbd\".\nClusterName:\nSet to a unique name for each Slurm-managed cluster so that\naccounting records from each can be identified.\nTrackWCKey:\nBoolean.  If you want to track wckeys (Workload Characterization Key)\n  of users.  A Wckey is an orthogonal way to do accounting against possibly\n  unrelated accounts. When a job is run, use the --wckey option to specify a\n  value and accounting records will be collected by this wckey.\n\nSlurmDBD Configuration\n\nSlurmDBD requires its own configuration file called \"slurmdbd.conf\".\nThis file should be only on the computer where SlurmDBD executes and\nshould only be readable by the user which executes SlurmDBD (e.g. \"slurm\").\nThis file should be protected from unauthorized access since it\ncontains a database login name and password.\nSee slurmdbd.conf(5) for a more complete\ndescription of the configuration parameters.\nSome of the more important parameters include:\nAuthInfo:\nIf using SlurmDBD with a second MUNGE daemon, store the pathname of\nthe named socket used by MUNGE to provide enterprise-wide.\nOtherwise the default MUNGE daemon will be used.\nAuthType:\nDefine the authentication method for communications between Slurm\ncomponents. A value of \"auth/munge\" is recommended.\nDbdHost:\nThe name of the machine where the Slurm Database Daemon is executed.\nThis should be a node name without the full domain name (e.g. \"lx0001\").\nThis defaults to localhost but should be supplied to avoid a\nwarning message.\nDbdPort:\nThe port number that the Slurm Database Daemon (slurmdbd) listens\nto for work. The default value is SLURMDBD_PORT as established at system\nbuild time. If none is explicitly specified, it will be set to 6819.\nThis value must be equal to the AccountingStoragePort parameter in the\nslurm.conf file.\nLogFile:\nFully qualified pathname of a file into which the Slurm Database Daemon's\nlogs are written.\nThe default value is none (performs logging via syslog).\nPluginDir:\nIdentifies the places in which to look for Slurm plugins.\nThis is a colon-separated list of directories, like the PATH\nenvironment variable.\nThe default value is the prefix given at configure time + \"/lib/slurm\".\nSlurmUser:\nThe name of the user that the slurmdbd daemon executes as.\nThis user must exist on the machine executing the Slurm Database Daemon\nand have the same UID as the hosts on which slurmctld execute.\nFor security purposes, a user other than \"root\" is recommended.\nThe default value is \"root\". This name should also be the same SlurmUser\non all clusters reporting to the SlurmDBD.\nNOTE: If this user is different from the one set for slurmctld\nand is not root, it must be added to accounting with AdminLevel=Admin and\nslurmctld must be restarted.\n\nStorageHost:\nDefine the name of the host the database is running where we are going\nto store the data.\nIdeally this should be the host on which SlurmDBD executes, but could\nbe a different machine.\nStorageLoc:\nSpecifies the name of the database where accounting\nrecords are written. For databases the default database is\nslurm_acct_db. Note the name can not have a '/' in it or the\ndefault will be used.\nStoragePass:\nDefine the password used to gain access to the database to store\nthe job accounting data.\nStoragePort:\nDefine the port on which the database is listening.\nStorageType:\nDefine the accounting storage mechanism.\nThe only acceptable value at present is \"accounting_storage/mysql\".\nThe value \"accounting_storage/mysql\" indicates that accounting records\nshould be written to a MySQL or MariaDB database specified by the\nStorageLoc parameter.\nThis value must be specified.\nStorageUser:\nDefine the name of the user we are going to connect to the database\nwith to store the job accounting data.\nSlurmDBD Archive and Purge\n\nAs time goes on, the slurm database can grow large enough that it is hard to\nmanage. To maintain the database at a reasonable size, slurmdbd supports\narchiving and purging data based on its age. Purged data will be deleted from\nthe database, but you can choose to archive the data as it is being purged.\nArchived data will be placed in flat files that can later be loaded into a\nslurmdbd by sacctmgr.Archive and Purge options come in the form of Archive${*} and\nPurge${*}After. See slurmdbd.conf(5)\nfor more details on the available configuration parameters.The units for the purge options are important. For example:\nPurgeJobsAfter=12months will purge jobs more than 12 months old at the\nbeginning of each month, while PurgeJobsAfter=365days will purge jobs\nolder than 365 days old at the beginning of each day. This distinction can be\nuseful for very active clusters, reducing the amount of data that needs to be\npurged at one time.MySQL Configuration\n\nNOTE: If you have an existing Slurm accounting database and\nplan to upgrade your database server to MariaDB 10.2.1 (or newer) from a\npre-10.2.1 version or from any version of MySQL, please contact SchedMD\nfor assistance.While Slurm will create the database tables automatically you will need to\nmake sure the StorageUser is given permissions in the MySQL or MariaDB database\nto do so.\nAs the mysql user grant privileges to that user using a\ncommand such as:GRANT ALL ON StorageLoc.* TO 'StorageUser'@'StorageHost';\n(The ticks are needed)(You need to be root to do this. Also in the info for password\nusage there is a line that starts with '->'. This a continuation\nprompt since the previous mysql statement did not end with a ';'. It\nassumes that you wish to input more info.)If you want Slurm to create the database itself, and any future databases,\nyou can change your grant line to be *.* instead of StorageLoc.*Live example:\nmysql@snowflake:~$ mysql\nWelcome to the MySQL monitor.Commands end with ; or \\g.\nYour MySQL connection id is 538\nServer version: 5.0.51a-3ubuntu5.1 (Ubuntu)\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the buffer.\n\nmysql> create user 'slurm'@'localhost' identified by 'password';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> grant all on slurm_acct_db.* TO 'slurm'@'localhost';\nQuery OK, 0 rows affected (0.00 sec)\nYou may also need to do the same with the system name in order\nfor mysql to work correctly:\nmysql> grant all on slurm_acct_db.* TO 'slurm'@'system0';\nQuery OK, 0 rows affected (0.00 sec)\nwhere 'system0' is the localhost or database storage host.\nor with a password...\nmysql> grant all on slurm_acct_db.* TO 'slurm'@'localhost'\n    -> identified by 'some_pass' with grant option;\nQuery OK, 0 rows affected (0.00 sec)\nThe same is true in the case, you made to do the same with the \nsystem name:\nmysql> grant all on slurm_acct_db.* TO 'slurm'@'system0'\n    -> identified by 'some_pass' with grant option;\nwhere 'system0' is the localhost or database storage host.\nVerify you have InnoDB support\nmysql> SHOW ENGINES;\n+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+\n| Engine             | Support | Comment                                                        | Transactions | XA   | Savepoints |\n+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+\n| ...                |         |                                                                |              |      |            |\n| InnoDB             | DEFAULT | Supports transactions, row-level locking, and foreign keys     | YES          | YES  | YES        |\n| ...                |         |                                                                |              |      |            |\n+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+\nThen create the database:\nmysql> create database slurm_acct_db;\nThis will grant user 'slurm' access to do what it needs to do on the local\nhost or the storage host system.  This must be done before the SlurmDBD will\nwork properly. After you grant permission to the user 'slurm' in mysql then\nyou can start SlurmDBD and the other Slurm daemons. You start SlurmDBD by\ntyping its pathname '/usr/sbin/slurmdbd' or '/etc/init.d/slurmdbd start'. You\ncan verify that SlurmDBD is running by typing 'ps aux | grep\nslurmdbd'.\n\nIf the SlurmDBD is not running you can\nuse the -v option when you start SlurmDBD to get more detailed\ninformation.  Starting the SlurmDBD in daemon mode with the '-D' option can\nalso help in debugging so you don't have to go to the log to find the\nproblem.\nArchive Server\nIf ongoing access to Archived/Purged data is required at your site, it is\npossible to create an archive instance of slurmdbd.  Data previously archived\nand purged from the production database can be loaded into the archive server,\nkeeping the production database at a manageable size while making sure old\nrecords are still accessible.\nThe archive instance of slurmdbd should not be able to communicate with the\nproduction server. Ideally they would have separate instances of MySQL/MariaDB\nthat they use to store their data. The Slurm controller (slurmctld) should\nnever communicate with the archive slurmdbd.\nWhen configuring an archive server, there are certain database entries\nthat need to match the production server in order for the archived information\nto show up correctly. In order to make sure the unique identifiers match,\nmysqldump should be used to export the Association, QOS and TRES information.\nThe command to export these tables should look like this, with the appropriate\nvalues substituted for <slurm_user>, <db_name>, and\n<cluster>:\n\nmysqldump -u <slurm_user> -p <db_name> <cluster>_assoc_table qos_table tres_table > slurm.sql\n\nWhile mysqldump should be used to transfer the information from these tables,\nit should not be used to transfer information that will be generated with the\nArchive/Purge process. If mysqldump is used to try to get the desired\ninformation, there will likely be a slight difference and when trying to load\narchive files later there will either be a gap in records or duplicate\nrecords that prevent the archive file from loading correctly.\nTools\nSlurm includes a few tools to let you work with accounting data;\nsacct, sacctmgr, and sreport.\nThese tools all get or set data through the SlurmDBD daemon.\n\nsacct is used to retrieve details, stored in the database, about\nrunning and completed jobs.\nsacctmgr is used to manage entities in the database. These include\nclusters, accounts, user associations, QOSs, etc.\nsreport is used to generate various reports on usage collected over a\ngiven time period.\n\nSee the man pages for each command for more information.\nWhile sreport provides the ability to quickly generate reports with some\nof the most commonly requested information, sites frequently want additional\ncontrol over how the information is displayed. There are some third-party tools\nthat can assist in generating dashboards with graphs of relevant information\nabout your cluster. These are not maintained or supported by SchedMD, but these\nutilities have been useful for some sites:\n\n\nGrafana: Allows creation of dashboards with various graphs using data\ncollected by Prometheus or InfluxDB.\nInfluxDB:\nIncludes an exporter tool that collects performance metrics from Slurm.\nPrometheus\n: Includes an exporter tool that collects performance metrics from\nSlurm.\n\nDatabase Configuration\n\n\nAccounting records are maintained based upon what we refer\nto as an Association,\nwhich consists of four elements: cluster, account, user names and\nan optional partition name. Use the sacctmgr\ncommand to create and manage these records.\nNOTE: There is an order to set up accounting associations.\nYou must define clusters before you add accounts and you must add accounts\nbefore you can add users.\nFor example, to add a cluster named \"snowflake\" to the database\nexecute this line\n(NOTE: as of 20.02, slurmctld will add the cluster to the database upon\nstart if it doesn't exist. Associations still need to be created after\naddition):\n\n\nsacctmgr add cluster snowflake\n\nAdd accounts \"none\" and \"test\" to cluster \"snowflake\" with an execute\nline of this sort:\n\nsacctmgr add account none,test Cluster=snowflake \\\n  Description=\"none\" Organization=\"none\"\n\nIf you have more clusters you want to add these accounts, to you\ncan either not specify a cluster, which will add the accounts to all\nclusters in the system, or comma separate the cluster names you want\nto add to in the cluster option.\nNote that multiple accounts can be added at the same time\nby comma separating the names.\nA description of the account and the organization to which\nit belongs must be specified.\nThese terms can be used later to generate accounting reports.\nAccounts may be arranged in a hierarchical fashion. For example, accounts\nchemistry and physics may be children of the account science.\nThe hierarchy may have an arbitrary depth.\nJust specify the parent='' option in the add account line to construct\nthe hierarchy.\nFor the example above execute\n\nsacctmgr add account science \\\n Description=\"science accounts\" Organization=science\nsacctmgr add account chemistry,physics parent=science \\\n Description=\"physical sciences\" Organization=science\n\nAdd users to accounts using similar syntax.\nFor example, to permit user da to execute jobs on all clusters\nwith a default account of test execute:\n\nsacctmgr add user brian Account=physics\nsacctmgr add user da DefaultAccount=test\n\nIf AccountingStorageEnforce=associations is configured in\nthe slurm.conf of the cluster snowflake then user da would be\nallowed to run in account test and any other accounts added\nin the future.\nAny attempt to use other accounts will result in the job being\naborted.\nAccount test will be the default if he doesn't specify one in\nthe job submission command.\nAssociations can also be created that are tied to specific partitions.\nWhen using the \"add user\" command of sacctmgr you can include the\nPartition=<PartitionName> option to create an association that\nis unique to other associations with the same Account and User.\nCluster Options\n\n\nWhen either adding or modifying a cluster, these are the options\navailable with sacctmgr:\n\nName= Cluster name\n\nAccount Options\n\n\nWhen either adding or modifying an account, the following sacctmgr\noptions are available:\n\nCluster= Only add this account to these clusters.\nThe account is added to all defined clusters by default.\nDescription= Description of the account. (Default is\n  account name)\nName= Name of account. Note the name must be unique and can not\nrepresent different bank accounts at different points in the account\nhierarchy\nOrganization=Organization of the account. (Default is\n  parent account unless parent account is root then organization is\n  set to the account name.)\nParent= Make this account a child of this other account\n  (already added).\n\nUser Options\n\n\nWhen either adding or modifying a user, the following sacctmgr\noptions are available:\n\n\nAccount= Account(s) to add user to\nAdminLevel= This field is used to allow a user to add accounting\nprivileges to this user. Valid options are\n\nNone\nOperator: can add, modify, and remove any database object (user,\naccount, etc), and add other operators\nOn a SlurmDBD served slurmctld these users can\n\nView information that is blocked to regular uses by a PrivateData\n  flag\nCreate/Alter/Delete Reservations\n\n\nAdmin: These users have the same level of privileges as an\noperator in the database.  They can also alter anything on a served\nslurmctld as if they were the slurm user or root.\n\nCluster= Only add to accounts on these clusters (default is all clusters)\nDefaultAccount= Default account for the user, used when no account\nis specified when a job is submitted. (Required on creation)\nDefaultWCKey= Default wckey for the user, used when no wckey\nis specified when a job is submitted. (Only used when tracking wckeys.)\nName= User name\nNewName= Use to rename a user in the accounting database\nPartition= Name of Slurm partition this association applies to\n\nLimit Enforcement\n\n\nVarious limits and limit enforcement are described in\n  the Resource Limits web page.\nTo enable any limit enforcement you must at least have\nAccountingStorageEnforce=limits in your slurm.conf.\nOtherwise, even if you have limits set, they will not be enforced.\nOther options for AccountingStorageEnforce and the explanation for\neach are found on the Resource\nLimits document.\nModifying Entities\n\n\nWhen modifying entities, you can specify many different options in\nSQL-like fashion, using key words like where and set.\nA typical execute line has the following form:\n\nsacctmgr modify <entity> set <options> where <options>\n\nFor example:\n\nsacctmgr modify user set default=none where default=test\n\nwill change all users with a default account of \"test\" to account \"none\".\nOnce an entity has been added, modified or removed, the change is\nsent to the appropriate Slurm daemons and will be available for use\ninstantly.\nRemoving Entities\n\n\nRemoving entities using an execute line similar to the modify example above,\nbut without the set options.\nFor example, remove all users with a default account \"test\" using the following\nexecute line:\n\nsacctmgr remove user where default=test\n\nwill remove all user records where the default account is \"test\".\n\nsacctmgr remove user brian where account=physics\n\nwill remove user \"brian\" from account \"physics\". If user \"brian\" has\naccess to other accounts, those user records will remain.\nNote: In most cases, removed entities are preserved in the slurm database,\nbut flagged as deleted.\nIf an entity has existed for less than 1 day, the entity will be removed\ncompletely. This is meant to clean up after typographical errors.\nRemoving user associations or accounts, however, will cause slurmctld to lose\ntrack of usage data for that user/account.\nLast modified 17 July 2024\n"
        },
        {
            "title": "Archive Server",
            "content": "If ongoing access to Archived/Purged data is required at your site, it is\npossible to create an archive instance of slurmdbd.  Data previously archived\nand purged from the production database can be loaded into the archive server,\nkeeping the production database at a manageable size while making sure old\nrecords are still accessible.The archive instance of slurmdbd should not be able to communicate with the\nproduction server. Ideally they would have separate instances of MySQL/MariaDB\nthat they use to store their data. The Slurm controller (slurmctld) should\nnever communicate with the archive slurmdbd.When configuring an archive server, there are certain database entries\nthat need to match the production server in order for the archived information\nto show up correctly. In order to make sure the unique identifiers match,\nmysqldump should be used to export the Association, QOS and TRES information.\nThe command to export these tables should look like this, with the appropriate\nvalues substituted for <slurm_user>, <db_name>, and\n<cluster>:\nmysqldump -u <slurm_user> -p <db_name> <cluster>_assoc_table qos_table tres_table > slurm.sql\nWhile mysqldump should be used to transfer the information from these tables,\nit should not be used to transfer information that will be generated with the\nArchive/Purge process. If mysqldump is used to try to get the desired\ninformation, there will likely be a slight difference and when trying to load\narchive files later there will either be a gap in records or duplicate\nrecords that prevent the archive file from loading correctly.ToolsSlurm includes a few tools to let you work with accounting data;\nsacct, sacctmgr, and sreport.\nThese tools all get or set data through the SlurmDBD daemon.\nsacct is used to retrieve details, stored in the database, about\nrunning and completed jobs.\nsacctmgr is used to manage entities in the database. These include\nclusters, accounts, user associations, QOSs, etc.\nsreport is used to generate various reports on usage collected over a\ngiven time period.\nSee the man pages for each command for more information.While sreport provides the ability to quickly generate reports with some\nof the most commonly requested information, sites frequently want additional\ncontrol over how the information is displayed. There are some third-party tools\nthat can assist in generating dashboards with graphs of relevant information\nabout your cluster. These are not maintained or supported by SchedMD, but these\nutilities have been useful for some sites:\n\nGrafana: Allows creation of dashboards with various graphs using data\ncollected by Prometheus or InfluxDB.\nInfluxDB:\nIncludes an exporter tool that collects performance metrics from Slurm.\nPrometheus\n: Includes an exporter tool that collects performance metrics from\nSlurm.\nDatabase Configuration\n\nAccounting records are maintained based upon what we refer\nto as an Association,\nwhich consists of four elements: cluster, account, user names and\nan optional partition name. Use the sacctmgr\ncommand to create and manage these records.NOTE: There is an order to set up accounting associations.\nYou must define clusters before you add accounts and you must add accounts\nbefore you can add users.For example, to add a cluster named \"snowflake\" to the database\nexecute this line\n(NOTE: as of 20.02, slurmctld will add the cluster to the database upon\nstart if it doesn't exist. Associations still need to be created after\naddition):\n\nsacctmgr add cluster snowflake\nAdd accounts \"none\" and \"test\" to cluster \"snowflake\" with an execute\nline of this sort:\nsacctmgr add account none,test Cluster=snowflake \\\n  Description=\"none\" Organization=\"none\"\nIf you have more clusters you want to add these accounts, to you\ncan either not specify a cluster, which will add the accounts to all\nclusters in the system, or comma separate the cluster names you want\nto add to in the cluster option.\nNote that multiple accounts can be added at the same time\nby comma separating the names.\nA description of the account and the organization to which\nit belongs must be specified.\nThese terms can be used later to generate accounting reports.\nAccounts may be arranged in a hierarchical fashion. For example, accounts\nchemistry and physics may be children of the account science.\nThe hierarchy may have an arbitrary depth.\nJust specify the parent='' option in the add account line to construct\nthe hierarchy.\nFor the example above execute\nsacctmgr add account science \\\n Description=\"science accounts\" Organization=science\nsacctmgr add account chemistry,physics parent=science \\\n Description=\"physical sciences\" Organization=science\nAdd users to accounts using similar syntax.\nFor example, to permit user da to execute jobs on all clusters\nwith a default account of test execute:\nsacctmgr add user brian Account=physics\nsacctmgr add user da DefaultAccount=test\nIf AccountingStorageEnforce=associations is configured in\nthe slurm.conf of the cluster snowflake then user da would be\nallowed to run in account test and any other accounts added\nin the future.\nAny attempt to use other accounts will result in the job being\naborted.\nAccount test will be the default if he doesn't specify one in\nthe job submission command.Associations can also be created that are tied to specific partitions.\nWhen using the \"add user\" command of sacctmgr you can include the\nPartition=<PartitionName> option to create an association that\nis unique to other associations with the same Account and User.Cluster Options\n\nWhen either adding or modifying a cluster, these are the options\navailable with sacctmgr:\n\nName= Cluster name\n\nAccount Options\n\n\nWhen either adding or modifying an account, the following sacctmgr\noptions are available:\n\nCluster= Only add this account to these clusters.\nThe account is added to all defined clusters by default.\nDescription= Description of the account. (Default is\n  account name)\nName= Name of account. Note the name must be unique and can not\nrepresent different bank accounts at different points in the account\nhierarchy\nOrganization=Organization of the account. (Default is\n  parent account unless parent account is root then organization is\n  set to the account name.)\nParent= Make this account a child of this other account\n  (already added).\n\nUser Options\n\n\nWhen either adding or modifying a user, the following sacctmgr\noptions are available:\n\n\nAccount= Account(s) to add user to\nAdminLevel= This field is used to allow a user to add accounting\nprivileges to this user. Valid options are\n\nNone\nOperator: can add, modify, and remove any database object (user,\naccount, etc), and add other operators\nOn a SlurmDBD served slurmctld these users can\n\nView information that is blocked to regular uses by a PrivateData\n  flag\nCreate/Alter/Delete Reservations\n\n\nAdmin: These users have the same level of privileges as an\noperator in the database.  They can also alter anything on a served\nslurmctld as if they were the slurm user or root.\n\nCluster= Only add to accounts on these clusters (default is all clusters)\nDefaultAccount= Default account for the user, used when no account\nis specified when a job is submitted. (Required on creation)\nDefaultWCKey= Default wckey for the user, used when no wckey\nis specified when a job is submitted. (Only used when tracking wckeys.)\nName= User name\nNewName= Use to rename a user in the accounting database\nPartition= Name of Slurm partition this association applies to\n\nLimit Enforcement\n\n\nVarious limits and limit enforcement are described in\n  the Resource Limits web page.\nTo enable any limit enforcement you must at least have\nAccountingStorageEnforce=limits in your slurm.conf.\nOtherwise, even if you have limits set, they will not be enforced.\nOther options for AccountingStorageEnforce and the explanation for\neach are found on the Resource\nLimits document.\nModifying Entities\n\n\nWhen modifying entities, you can specify many different options in\nSQL-like fashion, using key words like where and set.\nA typical execute line has the following form:\n\nsacctmgr modify <entity> set <options> where <options>\n\nFor example:\n\nsacctmgr modify user set default=none where default=test\n\nwill change all users with a default account of \"test\" to account \"none\".\nOnce an entity has been added, modified or removed, the change is\nsent to the appropriate Slurm daemons and will be available for use\ninstantly.\nRemoving Entities\n\n\nRemoving entities using an execute line similar to the modify example above,\nbut without the set options.\nFor example, remove all users with a default account \"test\" using the following\nexecute line:\n\nsacctmgr remove user where default=test\n\nwill remove all user records where the default account is \"test\".\n\nsacctmgr remove user brian where account=physics\n\nwill remove user \"brian\" from account \"physics\". If user \"brian\" has\naccess to other accounts, those user records will remain.\nNote: In most cases, removed entities are preserved in the slurm database,\nbut flagged as deleted.\nIf an entity has existed for less than 1 day, the entity will be removed\ncompletely. This is meant to clean up after typographical errors.\nRemoving user associations or accounts, however, will cause slurmctld to lose\ntrack of usage data for that user/account.\nLast modified 17 July 2024\n"
        },
        {
            "title": "Account Options\n\n",
            "content": "When either adding or modifying an account, the following sacctmgr\noptions are available:\n\nCluster= Only add this account to these clusters.\nThe account is added to all defined clusters by default.\nDescription= Description of the account. (Default is\n  account name)\nName= Name of account. Note the name must be unique and can not\nrepresent different bank accounts at different points in the account\nhierarchy\nOrganization=Organization of the account. (Default is\n  parent account unless parent account is root then organization is\n  set to the account name.)\nParent= Make this account a child of this other account\n  (already added).\n\nUser Options\n\n\nWhen either adding or modifying a user, the following sacctmgr\noptions are available:\n\n\nAccount= Account(s) to add user to\nAdminLevel= This field is used to allow a user to add accounting\nprivileges to this user. Valid options are\n\nNone\nOperator: can add, modify, and remove any database object (user,\naccount, etc), and add other operators\nOn a SlurmDBD served slurmctld these users can\n\nView information that is blocked to regular uses by a PrivateData\n  flag\nCreate/Alter/Delete Reservations\n\n\nAdmin: These users have the same level of privileges as an\noperator in the database.  They can also alter anything on a served\nslurmctld as if they were the slurm user or root.\n\nCluster= Only add to accounts on these clusters (default is all clusters)\nDefaultAccount= Default account for the user, used when no account\nis specified when a job is submitted. (Required on creation)\nDefaultWCKey= Default wckey for the user, used when no wckey\nis specified when a job is submitted. (Only used when tracking wckeys.)\nName= User name\nNewName= Use to rename a user in the accounting database\nPartition= Name of Slurm partition this association applies to\n\nLimit Enforcement\n\n\nVarious limits and limit enforcement are described in\n  the Resource Limits web page.\nTo enable any limit enforcement you must at least have\nAccountingStorageEnforce=limits in your slurm.conf.\nOtherwise, even if you have limits set, they will not be enforced.\nOther options for AccountingStorageEnforce and the explanation for\neach are found on the Resource\nLimits document.\nModifying Entities\n\n\nWhen modifying entities, you can specify many different options in\nSQL-like fashion, using key words like where and set.\nA typical execute line has the following form:\n\nsacctmgr modify <entity> set <options> where <options>\n\nFor example:\n\nsacctmgr modify user set default=none where default=test\n\nwill change all users with a default account of \"test\" to account \"none\".\nOnce an entity has been added, modified or removed, the change is\nsent to the appropriate Slurm daemons and will be available for use\ninstantly.\nRemoving Entities\n\n\nRemoving entities using an execute line similar to the modify example above,\nbut without the set options.\nFor example, remove all users with a default account \"test\" using the following\nexecute line:\n\nsacctmgr remove user where default=test\n\nwill remove all user records where the default account is \"test\".\n\nsacctmgr remove user brian where account=physics\n\nwill remove user \"brian\" from account \"physics\". If user \"brian\" has\naccess to other accounts, those user records will remain.\nNote: In most cases, removed entities are preserved in the slurm database,\nbut flagged as deleted.\nIf an entity has existed for less than 1 day, the entity will be removed\ncompletely. This is meant to clean up after typographical errors.\nRemoving user associations or accounts, however, will cause slurmctld to lose\ntrack of usage data for that user/account.\nLast modified 17 July 2024\n"
        },
        {
            "title": "User Options\n\n",
            "content": "When either adding or modifying a user, the following sacctmgr\noptions are available:\n\n\nAccount= Account(s) to add user to\nAdminLevel= This field is used to allow a user to add accounting\nprivileges to this user. Valid options are\n\nNone\nOperator: can add, modify, and remove any database object (user,\naccount, etc), and add other operators\nOn a SlurmDBD served slurmctld these users can\n\nView information that is blocked to regular uses by a PrivateData\n  flag\nCreate/Alter/Delete Reservations\n\n\nAdmin: These users have the same level of privileges as an\noperator in the database.  They can also alter anything on a served\nslurmctld as if they were the slurm user or root.\n\nCluster= Only add to accounts on these clusters (default is all clusters)\nDefaultAccount= Default account for the user, used when no account\nis specified when a job is submitted. (Required on creation)\nDefaultWCKey= Default wckey for the user, used when no wckey\nis specified when a job is submitted. (Only used when tracking wckeys.)\nName= User name\nNewName= Use to rename a user in the accounting database\nPartition= Name of Slurm partition this association applies to\n\nLimit Enforcement\n\n\nVarious limits and limit enforcement are described in\n  the Resource Limits web page.\nTo enable any limit enforcement you must at least have\nAccountingStorageEnforce=limits in your slurm.conf.\nOtherwise, even if you have limits set, they will not be enforced.\nOther options for AccountingStorageEnforce and the explanation for\neach are found on the Resource\nLimits document.\nModifying Entities\n\n\nWhen modifying entities, you can specify many different options in\nSQL-like fashion, using key words like where and set.\nA typical execute line has the following form:\n\nsacctmgr modify <entity> set <options> where <options>\n\nFor example:\n\nsacctmgr modify user set default=none where default=test\n\nwill change all users with a default account of \"test\" to account \"none\".\nOnce an entity has been added, modified or removed, the change is\nsent to the appropriate Slurm daemons and will be available for use\ninstantly.\nRemoving Entities\n\n\nRemoving entities using an execute line similar to the modify example above,\nbut without the set options.\nFor example, remove all users with a default account \"test\" using the following\nexecute line:\n\nsacctmgr remove user where default=test\n\nwill remove all user records where the default account is \"test\".\n\nsacctmgr remove user brian where account=physics\n\nwill remove user \"brian\" from account \"physics\". If user \"brian\" has\naccess to other accounts, those user records will remain.\nNote: In most cases, removed entities are preserved in the slurm database,\nbut flagged as deleted.\nIf an entity has existed for less than 1 day, the entity will be removed\ncompletely. This is meant to clean up after typographical errors.\nRemoving user associations or accounts, however, will cause slurmctld to lose\ntrack of usage data for that user/account.\nLast modified 17 July 2024\n"
        },
        {
            "title": "Limit Enforcement\n\n",
            "content": "Various limits and limit enforcement are described in\n  the Resource Limits web page.To enable any limit enforcement you must at least have\nAccountingStorageEnforce=limits in your slurm.conf.\nOtherwise, even if you have limits set, they will not be enforced.\nOther options for AccountingStorageEnforce and the explanation for\neach are found on the Resource\nLimits document.Modifying Entities\n\nWhen modifying entities, you can specify many different options in\nSQL-like fashion, using key words like where and set.\nA typical execute line has the following form:\n\nsacctmgr modify <entity> set <options> where <options>\n\nFor example:\n\nsacctmgr modify user set default=none where default=test\n\nwill change all users with a default account of \"test\" to account \"none\".\nOnce an entity has been added, modified or removed, the change is\nsent to the appropriate Slurm daemons and will be available for use\ninstantly.\nRemoving Entities\n\n\nRemoving entities using an execute line similar to the modify example above,\nbut without the set options.\nFor example, remove all users with a default account \"test\" using the following\nexecute line:\n\nsacctmgr remove user where default=test\n\nwill remove all user records where the default account is \"test\".\n\nsacctmgr remove user brian where account=physics\n\nwill remove user \"brian\" from account \"physics\". If user \"brian\" has\naccess to other accounts, those user records will remain.\nNote: In most cases, removed entities are preserved in the slurm database,\nbut flagged as deleted.\nIf an entity has existed for less than 1 day, the entity will be removed\ncompletely. This is meant to clean up after typographical errors.\nRemoving user associations or accounts, however, will cause slurmctld to lose\ntrack of usage data for that user/account.\nLast modified 17 July 2024\n"
        },
        {
            "title": "Removing Entities\n\n",
            "content": "Removing entities using an execute line similar to the modify example above,\nbut without the set options.\nFor example, remove all users with a default account \"test\" using the following\nexecute line:\nsacctmgr remove user where default=test\nwill remove all user records where the default account is \"test\".\nsacctmgr remove user brian where account=physics\nwill remove user \"brian\" from account \"physics\". If user \"brian\" has\naccess to other accounts, those user records will remain.Note: In most cases, removed entities are preserved in the slurm database,\nbut flagged as deleted.\nIf an entity has existed for less than 1 day, the entity will be removed\ncompletely. This is meant to clean up after typographical errors.\nRemoving user associations or accounts, however, will cause slurmctld to lose\ntrack of usage data for that user/account.Last modified 17 July 2024"
        }
    ]
}