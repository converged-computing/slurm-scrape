{
    "url": "https://slurm.schedmd.com/selinux.html",
    "sections": [
        {
            "title": "\n\nSlurm Workload Manager\n\n",
            "content": "\n\nSchedMD\n\n"
        },
        {
            "title": "SELinux",
            "content": "Starting with version 21.08, Slurm includes support for setting an SELinux\ncontext for jobs as a technology preview. The implementation may change in\nfuture releases, and support for it is not enabled by default.Architecture\n\nWhen enabled, the Slurm job submission commands \u2014 salloc, sbatch, and\nsrun \u2014 will automatically set a field with the current operating context.\nThis field can be overwritten by the --context\ncommand line option.It is important to note that this value can be directly manipulated by the\nend-user, and it is up to site-specific scripts to validate and control access\nto these contexts. At this time MUNGE, which Slurm users to security identify\nusers and hosts on the cluster, does not provide an SELinux context field, and\nas such there is no secure mechanism to send the current context to the Slurm\ncontroller. Thus the context, as provided at job submission time, must\nbe validated by a job_submit plugin running within the slurmctld.Without such a script, no context is set or managed for a user's job.Installation\n\nSource:SELinux support is disabled by default and must be enabled at configure time.\nIt requires the libselinux1 library and development headers to build.configure --enable-selinuxSetupOnce a version of Slurm that supports SELinux is installed, you will need to\nenable and create a job_submit plugin that will perform verification of the\nSELinux context, before passing it along to the slurmctld. At this time, there\nis not a reliable and secure way to get/verify contexts internally so you MUST\ncreate this script and perform verification in the job_submit plugin.Example:\nfunction slurm_job_submit(job_desc, part_list, submit_uid)\n  if job_desc.req_context then\n    local element = 0\n    for str in string.gmatch(job_desc.req_context, \"([^:]+)\") do\n      if element == 0 and str ~= \"unconfined_u\" then\n        slurm.log_user(\"Error: invalid SELinux context\")\n        return slurm.ERROR\n      elseif element == 1 and str ~= \"unconfined_r\" then\n        slurm.log_user(\"Error: %s is not a valid SELinux role\")\n        return slurm.ERROR\n      end\n      element = element + 1\n    end\n    job_desc.selinux_context = job_desc.req_context\n  else\n    -- Force a specific context if one wasn't requested\n    job_desc.selinux_context = unconfined_u:unconfined_r:slurm_t:s0\n  end\n  return slurm.SUCCESS\nend\nNote that job_desc.selinux_context is set based on the contents of\njob_desc.req_context if they are considered valid.\njob_desc.selinux_context is what set the context that will be used.Initial Testing\n\nid is very useful for showing what context a user is currently in. As a test\nto make sure that we are switching contexts, you can run a quick test with srun.\n\nmcmult@master:~$ srun id\nuid=1000(mcmult) gid=1000(mcmult) groups=1000(mcmult),27(sudo) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023\nmcmult@master:~$ srun --context=unconfined_u:unconfined_r:unconfined_t:s0 id\nuid=1000(mcmult) gid=1000(mcmult) groups=1000(mcmult),27(sudo) context=unconfined_u:unconfined_r:unconfined_t:s0\nAccountingThere is currently no support for tracking the SELinux context in Slurm's\naccounting. This may change as support evolves in future releases.\nIf you need to keep track of the SELinux Context, it is possible to store it in\nthe admin comment field as part of your job_submit plugin as is show in the\nexample below.Example:\nfunction slurm_job_submit(job_desc, part_list, submit_uid)\n  if job_desc.req_context then\n    local element = 0\n    for str in string.gmatch(job_desc.req_context, \"([^:]+)\") do\n      if element == 0 and str ~= \"unconfined_u\" then\n        slurm.log_user(\"Error: invalid SELinux context\")\n        return slurm.ERROR\n      elseif element == 1 and str ~= \"unconfined_r\" then\n        slurm.log_user(\"Error: %s is not a valid SELinux role\")\n        return slurm.ERROR\n      end\n      element = element + 1\n    end\n    job_desc.selinux_context = job_desc.req_context\n  else\n    -- Force a specific context if one wasn't requested\n    job_desc.selinux_context = unconfined_u:unconfined_r:slurm_t:s0\n  end\n  job_desc.admin_comment = \"SELinuxContext=\" .. job_desc.selinux_context\n  return slurm.SUCCESS\nend\nNote the addition of setting \"job_desc.admin_comment\" before returning. This\nwill set the admin comment to show what context we will try to set for the job.\nNotesIf you wish to use pam_slurm_adopt with SELinux, see the\npam_slurm_adopt documentation for hints on how\nto get this working. Note that that when using this feature and\npam_slurm_adopt at the same time that the ssh session may not land in the same\ncontext as the job.Last modified 22 September 2023"
        },
        {
            "title": "Navigation",
            "content": "\nSlurm Workload Manager\nVersion 24.05\n\n\nAbout\n\nOverview\nRelease Notes\n\n\n\nUsing\n\nDocumentation\nFAQ\nPublications\n\n\n\nInstalling\n\nDownload\nRelated Software\nInstallation Guide\n\n\n\nGetting Help\n\nMailing Lists\nSupport and Training\nTroubleshooting\n\n\n"
        }
    ]
}